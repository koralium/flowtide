"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2171],{3905:(t,e,r)=>{r.d(e,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var p=n.createContext({}),s=function(t){var e=n.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},u=function(t){var e=s(t.components);return n.createElement(p.Provider,{value:e},t.children)},c="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,p=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),c=s(r),d=a,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return r?n.createElement(f,i(i({ref:e},u),{},{components:r})):n.createElement(f,i({ref:e},u))}));function f(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l[c]="string"==typeof t?t:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9842:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:5},i="Set Operator",l={unversionedId:"Operators/set",id:"Operators/set",title:"Set Operator",description:"The Set Operator can take in 2->N inputs and will perform a set operation on the inputs. At this point only UNION ALL is supported by the set operator.",source:"@site/docs/Operators/set.md",sourceDirName:"Operators",slug:"/Operators/set",permalink:"/flowtide/docs/Operators/set",draft:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/Operators/set.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Normalization Operator",permalink:"/flowtide/docs/Operators/normalization"}},p={},s=[{value:"Metrics",id:"metrics",level:2}],u={toc:s},c="wrapper";function m(t){let{components:e,...r}=t;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"set-operator"},"Set Operator"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"Set Operator")," can take in 2->N inputs and will perform a set operation on the inputs. At this point only ",(0,a.kt)("em",{parentName:"p"},"UNION ALL")," is supported by the set operator.\nIt is a stateful operator and has one B+ tree for each input."),(0,a.kt)("h2",{id:"metrics"},"Metrics"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"Set Operator")," has the following metrics:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Metric Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"busy"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0-1 on how busy the operator is.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"backpressure"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0-1 on how much backpressure the operator has.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"health"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0 or 1, if the operator is healthy or not.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"events"),(0,a.kt)("td",{parentName:"tr",align:null},"Counter"),(0,a.kt)("td",{parentName:"tr",align:null},"How many events that pass through the operator.")))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"At this point, a set operator will never be unhealthy.\nIf there is a failure against the state, the stream will instead restart.")))}m.isMDXComponent=!0}}]);