"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2319],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=s,h=p["".concat(o,".").concat(d)]||p[d]||f[d]||l;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var l=n.length,r=new Array(l);r[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:s,r[1]=i;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9296:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>f,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=n(7462),s=(n(7294),n(3905));const l={sidebar_position:3},r="Comparison Functions",i={unversionedId:"expressions/scalarfunctions/comparison",id:"expressions/scalarfunctions/comparison",title:"Comparison Functions",description:"Equal",source:"@site/docs/expressions/scalarfunctions/comparison.md",sourceDirName:"expressions/scalarfunctions",slug:"/expressions/scalarfunctions/comparison",permalink:"/flowtide/docs/expressions/scalarfunctions/comparison",draft:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/expressions/scalarfunctions/comparison.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Boolean Functions",permalink:"/flowtide/docs/expressions/scalarfunctions/boolean"},next:{title:"String Functions",permalink:"/flowtide/docs/expressions/scalarfunctions/string"}},o={},u=[{value:"Equal",id:"equal",level:2},{value:"SQL Usage",id:"sql-usage",level:3},{value:"Not equal",id:"not-equal",level:2},{value:"SQL Usage",id:"sql-usage-1",level:3},{value:"Greater than",id:"greater-than",level:2},{value:"SQL Usage",id:"sql-usage-2",level:3},{value:"Greater than or equal",id:"greater-than-or-equal",level:2},{value:"SQL Usage",id:"sql-usage-3",level:3},{value:"Less than",id:"less-than",level:2},{value:"SQL Usage",id:"sql-usage-4",level:3},{value:"Less than or equal",id:"less-than-or-equal",level:2},{value:"SQL Usage",id:"sql-usage-5",level:3},{value:"Is not null",id:"is-not-null",level:2},{value:"SQL Usage",id:"sql-usage-6",level:3},{value:"Coalesce",id:"coalesce",level:2},{value:"SQL Usage",id:"sql-usage-7",level:3},{value:"Is Infinite",id:"is-infinite",level:2},{value:"SQL USage",id:"sql-usage-8",level:3}],c={toc:u},p="wrapper";function f(e){let{components:t,...n}=e;return(0,s.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"comparison-functions"},"Comparison Functions"),(0,s.kt)("h2",{id:"equal"},"Equal"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://substrait.io/extensions/functions_comparison/#equal"},"Substrait definition")),(0,s.kt)("p",null,"Compares equality of two values.\nIf the two values have different types they are not considered equal, so a float with value 1 will not equal an integer with value 1."),(0,s.kt)("h3",{id:"sql-usage"},"SQL Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"... WHERE c1 = 'hello'\n")),(0,s.kt)("h2",{id:"not-equal"},"Not equal"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://substrait.io/extensions/functions_comparison/#not_equal"},"Substrait definition")),(0,s.kt)("p",null,"Checks two values for non equality.\nDifferent types will immedietly return true, that the values are not equal."),(0,s.kt)("h3",{id:"sql-usage-1"},"SQL Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"... WHERE c1 != 'hello'\n")),(0,s.kt)("h2",{id:"greater-than"},"Greater than"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://substrait.io/extensions/functions_comparison/#gt"},"Substrait definition")),(0,s.kt)("p",null,"Checks if the left value is greater than the right value."),(0,s.kt)("h3",{id:"sql-usage-2"},"SQL Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"... WHERE c1 > 1\n")),(0,s.kt)("h2",{id:"greater-than-or-equal"},"Greater than or equal"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://substrait.io/extensions/functions_comparison/#gte"},"Substrait definition")),(0,s.kt)("p",null,"Checks if the left value is greater than or equal to the right value."),(0,s.kt)("h3",{id:"sql-usage-3"},"SQL Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"... WHERE c1 >= 1\n")),(0,s.kt)("h2",{id:"less-than"},"Less than"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://substrait.io/extensions/functions_comparison/#lt"},"Substrait definition")),(0,s.kt)("p",null,"Checks if the left value is less than the right value."),(0,s.kt)("h3",{id:"sql-usage-4"},"SQL Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"... WHERE c1 < 1\n")),(0,s.kt)("h2",{id:"less-than-or-equal"},"Less than or equal"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://substrait.io/extensions/functions_comparison/#lte"},"Substrait definition")),(0,s.kt)("p",null,"Checks if the left value is less than or equal to the right value."),(0,s.kt)("h3",{id:"sql-usage-5"},"SQL Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"... WHERE c1 <= 1\n")),(0,s.kt)("h2",{id:"is-not-null"},"Is not null"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://substrait.io/extensions/functions_comparison/#is_not_null"},"Substrait definition")),(0,s.kt)("p",null,"Checks if a single argument is not equal to null."),(0,s.kt)("h3",{id:"sql-usage-6"},"SQL Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"... WHERE c1 is not null\n")),(0,s.kt)("h2",{id:"coalesce"},"Coalesce"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://substrait.io/extensions/functions_comparison/#coalesce"},"Substrait definition")),(0,s.kt)("p",null,"Returns the first value, left to right that is not equal to null. If all values are null, a null value is returned."),(0,s.kt)("h3",{id:"sql-usage-7"},"SQL Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT coalesce(column1, column2) FROM ...\n")),(0,s.kt)("h2",{id:"is-infinite"},"Is Infinite"),(0,s.kt)("p",null,"Checks if a numeric value is positive or negative infinite. If the value is NaN (0 / 0), or another type, it returns false."),(0,s.kt)("h3",{id:"sql-usage-8"},"SQL USage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT is_infinite(column1) FROM ...\n")))}f.isMDXComponent=!0}}]);