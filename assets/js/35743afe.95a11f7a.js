"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[8377],{4276:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"connectors/deltalake","title":"Delta Lake Connector","description":"The Delta Lake connector allows a stream to read existing data & changes from a delta lake table.","source":"@site/docs/connectors/deltalake.md","sourceDirName":"connectors","slug":"/connectors/deltalake","permalink":"/flowtide/docs/connectors/deltalake","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/connectors/deltalake.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"SQL Server Connector","permalink":"/flowtide/docs/connectors/sqlserver"},"next":{"title":"MongoDB Connector","permalink":"/flowtide/docs/connectors/mongodb"}}');var l=n(4848),s=n(8453);const i={sidebar_position:2},d="Delta Lake Connector",r={},o=[{value:"Options",id:"options",level:2},{value:"Delta Lake Source",id:"delta-lake-source",level:2},{value:"Replaying delta changes",id:"replaying-delta-changes",level:3},{value:"Sample",id:"sample",level:3},{value:"Azure Blob Storage Configuration Example",id:"azure-blob-storage-configuration-example",level:3},{value:"Delta Lake Sink",id:"delta-lake-sink",level:2},{value:"Change data feed",id:"change-data-feed",level:3},{value:"Supported data types",id:"supported-data-types",level:3},{value:"Creating a new table",id:"creating-a-new-table",level:3},{value:"Sql example",id:"sql-example",level:4}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"delta-lake-connector",children:"Delta Lake Connector"})}),"\n",(0,l.jsx)(t.p,{children:"The Delta Lake connector allows a stream to read existing data & changes from a delta lake table."}),"\n",(0,l.jsx)(t.p,{children:"The nuget package for the connector is:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"FlowtideDotNet.Connector.DeltaLake"}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["The easiest way to get started with both the source and the sink is to use the ",(0,l.jsx)(t.code,{children:"AddDeltaLakeCatalog"})," method that registers them both under a catalog name."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-csharp",children:'connectorManager.AddDeltaLakeCatalog("my_catalog", new DeltaLakeOptions() {\n    // Connect to local disk, azure, AWS etc here, add the directory beneath the actual table you want to query (table name and folders are selected in the query)\n    StorageLocation = Files.Of.LocalDisk("./testdata")\n});\n'})}),"\n",(0,l.jsx)(t.p,{children:"This then allows you to both read and write in sql:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-sql",children:"INSERT INTO my_catalog.{optional_directory_name}.my_table_name\nSELECT ... FROM my_catalog.{optional_directory_name}.my_table_name\n"})}),"\n",(0,l.jsx)(t.p,{children:"As with all other connectors you can ofcourse read and write from and to any other connector."}),"\n",(0,l.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,l.jsx)(t.p,{children:"These are the options that can be configured when adding the delta lake connector:"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{children:"Name"}),(0,l.jsx)(t.th,{children:"Description"}),(0,l.jsx)(t.th,{children:"Default"}),(0,l.jsx)(t.th,{children:"Required"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"StorageLocation"}),(0,l.jsx)(t.td,{children:"Connection where the tables are located"}),(0,l.jsx)(t.td,{children:"Null"}),(0,l.jsx)(t.td,{children:"Yes"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"OneVersionPerCheckpoint"}),(0,l.jsx)(t.td,{children:"Only used for reading, it then makes sure that each commit is sent once per checkpoint"}),(0,l.jsx)(t.td,{children:"False"}),(0,l.jsx)(t.td,{children:"No"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"DeltaCheckInterval"}),(0,l.jsx)(t.td,{children:"Only used for reading, how often it should be checked if a new commit exists"}),(0,l.jsx)(t.td,{children:"10 seconds"}),(0,l.jsx)(t.td,{children:"No"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"WriteChangeDataOnNewTables"}),(0,l.jsx)(t.td,{children:"If new tables created by the connector should enable change feed"}),(0,l.jsx)(t.td,{children:"False"}),(0,l.jsx)(t.td,{children:"No"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"EnableDeletionVectorsOnNewTables"}),(0,l.jsx)(t.td,{children:"If new tables created by the connector should enable deletion vectors"}),(0,l.jsx)(t.td,{children:"True"}),(0,l.jsx)(t.td,{children:"No"})]})]})]}),"\n",(0,l.jsx)(t.h2,{id:"delta-lake-source",children:"Delta Lake Source"}),"\n",(0,l.jsxs)(t.p,{children:["The delta lake source allows ingesting data from a delta lake table. To connect to a delta lake table, use ",(0,l.jsx)(t.code,{children:"AddDeltaLake"})," method on the connector manager."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-csharp",children:'connectorManager.AddDeltaLakeSource(new DeltaLakeOptions() {\n    // Connect to local disk, azure, AWS etc here, add the directory beneath the actual table you want to query (table name and folders are selected in the query)\n    StorageLocation = Files.Of.LocalDisk("./testdata")\n});\n'})}),"\n",(0,l.jsxs)(t.p,{children:["The delta lake connector uses ",(0,l.jsx)(t.a,{href:"https://github.com/aloneguid/stowage",children:"Stowage"})," to allow connection to different cloud storage solutions, please visit that link to\ncheck possible connections."]}),"\n",(0,l.jsx)(t.p,{children:"Important to note is that the directory of storage location should be beneath the actual table you want to query. The actual table is selected in the query. Example:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-sql",children:"INSERT INTO output\nSELECT * FROM my_delta_lake_table\n"})}),"\n",(0,l.jsxs)(t.p,{children:["In combination with the connector manager addition above, this will use the path ",(0,l.jsx)(t.code,{children:"./testdata/my_delta_lake_table"}),"."]}),"\n",(0,l.jsx)(t.p,{children:"If you instead would write:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-sql",children:"INSERT INTO output\nSELECT * FROM my_folder.my_delta_lake_table\n"})}),"\n",(0,l.jsxs)(t.p,{children:["It becomes: ",(0,l.jsx)(t.code,{children:"./testdata/my_fylder/mmy_delta_lake_table"}),"."]}),"\n",(0,l.jsx)(t.p,{children:"The delta lake source can calculate all the changes from the table, so no additional state is stored in the stream of the data to correctly calculate changes."}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.strong,{children:"Supported features"})}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Calculate change data from add/remove actions"}),"\n",(0,l.jsx)(t.li,{children:"Use cdc files if they exist for change data"}),"\n",(0,l.jsx)(t.li,{children:"Deletion vectors"}),"\n",(0,l.jsx)(t.li,{children:"Partitioned data"}),"\n",(0,l.jsx)(t.li,{children:"Column mapping"}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"replaying-delta-changes",children:"Replaying delta changes"}),"\n",(0,l.jsx)(t.p,{children:"One feature of the delta lake source is the possibility to replay the log where each commit to the delta table is sent separately once per checkpoint.\nThis can be useful in unit tests, but also if one wants to send historic data to a destination system such as a time-series database and not skip over a commit."}),"\n",(0,l.jsx)(t.p,{children:"To use the replay functionality use the following setting in options:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-csharp",children:'connectorManager.AddDeltaLakeSource(new DeltaLakeOptions() {\n    StorageLocation = Files.Of.LocalDisk("./testdata"),\n    OneVersionPerCheckpoint = true\n});\n'})}),"\n",(0,l.jsx)(t.h3,{id:"sample",children:"Sample"}),"\n",(0,l.jsxs)(t.p,{children:["There is an example in the samples folder that uses the Delta Lake Source to read data from an azure blob storage.\nTo run the example, start the ",(0,l.jsx)(t.code,{children:"AspireSamples"})," project and select one of:"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"DeltaLake-Source"}),"\n",(0,l.jsx)(t.li,{children:"DeltaLake-Source, Replay history"}),"\n"]}),"\n",(0,l.jsx)(t.p,{children:"After the project has started, inspect the console log of the application to see a log output of the rows."}),"\n",(0,l.jsx)(t.h3,{id:"azure-blob-storage-configuration-example",children:"Azure Blob Storage Configuration Example"}),"\n",(0,l.jsx)(t.p,{children:"When using Azure Blob Storage you would configure the storage example like this example:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-csharp",children:"connectors.AddDeltaLakeSource(new DeltaLakeOptions()\n{\n    StorageLocation = Files.Of.AzureBlobStorage(accountName, accountKey)\n});\n"})}),"\n",(0,l.jsx)(t.p,{children:"This connects the source to the root of the blob storage, to then query a table you must include the container name and all subfolders to the table location:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-sql",children:"SELECT * FROM my_container.my_optional_parent_folder.my_table\n"})}),"\n",(0,l.jsx)(t.h2,{id:"delta-lake-sink",children:"Delta Lake Sink"}),"\n",(0,l.jsx)(t.p,{children:"The delta lake sink allows to materialize/denormalize queries as a delta lake table. The connector will continuously update the table on each checkpoint.\nIt does not write on each watermark update, this is done to reduce the amount of files that are written and try to only write consistent updates.\nThis means that the write frequency can be modified by changing how often a checkpoint is taken."}),"\n",(0,l.jsx)(t.p,{children:"To add the delta lake sink, write the following to the connector manager:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-csharp",children:'connectors.AddDeltaLakeSink(new DeltaLakeOptions()\n{\n    StorageLocation = Files.Of.LocalDisk("./testdata")\n});\n'})}),"\n",(0,l.jsx)(t.p,{children:"Delta Lake Features:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Deletion vectors"}),"\n",(0,l.jsx)(t.li,{children:"Statistics output"}),"\n",(0,l.jsx)(t.li,{children:"Data file skipping"}),"\n",(0,l.jsx)(t.li,{children:"Change data files"}),"\n"]}),"\n",(0,l.jsx)(t.admonition,{type:"warning",children:(0,l.jsx)(t.p,{children:"The delta lake sink does not yet support partitioned tables."})}),"\n",(0,l.jsx)(t.h3,{id:"change-data-feed",children:"Change data feed"}),"\n",(0,l.jsxs)(t.p,{children:["It is possible to enable flowtide to write change data files which can help speed up change data readers.\nThis is done by setting the flag ",(0,l.jsx)(t.code,{children:"WriteChangeDataOnNewTables"})," to ",(0,l.jsx)(t.code,{children:"true"})," in the options when configuring the delta lake connector.\nIf it is an existing table, the writerFeatures in protocol must contain ",(0,l.jsx)(t.code,{children:"changeDataFeed"})," and the metadata configuration must contain ",(0,l.jsx)(t.code,{children:"delta.enableChangeDataFeed"}),"\nset to ",(0,l.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,l.jsxs)(t.p,{children:["This creates new files in a ",(0,l.jsx)(t.code,{children:"_change_data"})," folder and adds the corresponding actions in the delta log.\nChange data files are only added if there are deletes on existing rows, since the ",(0,l.jsx)(t.code,{children:"add"})," action gives the same performance\nto read change data if there are no deletes. This also saves on storage space."]}),"\n",(0,l.jsx)(t.p,{children:"To be able to reduce memory usage, Flowtide writes the change data files as it creates a commit, but they can then be deleted\nbefore completing the commit."}),"\n",(0,l.jsxs)(t.p,{children:["Since this connector writes the exact result set in the query, it does not have the concept of primary keys and rows can be duplicated if that is the result\nof the query. This means that the change data feed only contains ",(0,l.jsx)(t.code,{children:"delete"})," and ",(0,l.jsx)(t.code,{children:"insert"})," operations."]}),"\n",(0,l.jsx)(t.h3,{id:"supported-data-types",children:"Supported data types"}),"\n",(0,l.jsx)(t.p,{children:"Flowtide can write the following data types to a delta lake table:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Array"}),"\n",(0,l.jsx)(t.li,{children:"Binary"}),"\n",(0,l.jsx)(t.li,{children:"Boolean"}),"\n",(0,l.jsx)(t.li,{children:"Date"}),"\n",(0,l.jsx)(t.li,{children:"Decimal"}),"\n",(0,l.jsx)(t.li,{children:"Float"}),"\n",(0,l.jsx)(t.li,{children:"Double"}),"\n",(0,l.jsx)(t.li,{children:"Byte"}),"\n",(0,l.jsx)(t.li,{children:"Short"}),"\n",(0,l.jsx)(t.li,{children:"Integer"}),"\n",(0,l.jsx)(t.li,{children:"Long"}),"\n",(0,l.jsx)(t.li,{children:"String"}),"\n",(0,l.jsx)(t.li,{children:"Timestamp"}),"\n",(0,l.jsx)(t.li,{children:"Struct"}),"\n",(0,l.jsx)(t.li,{children:"Map"}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"creating-a-new-table",children:"Creating a new table"}),"\n",(0,l.jsxs)(t.p,{children:["It is possible to create a new delta lake table if it does not exist. This is done by using the ",(0,l.jsx)(t.code,{children:"CREATE TABLE"})," syntax to\nclearly set the data types for each column."]}),"\n",(0,l.jsxs)(t.p,{children:["Not all delta lake data types are supported in Flowtide SQL, so for full type support please create an empty table manually.\nThe data types that are supported with ",(0,l.jsx)(t.code,{children:"CREATE TABLE"})," and how they are mapped are:"]}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{children:"Flowtide SQL name"}),(0,l.jsx)(t.th,{children:"Flowtide Internal Type"}),(0,l.jsx)(t.th,{children:"Delta Lake name"}),(0,l.jsx)(t.th,{children:"Comment"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"int"}),(0,l.jsx)(t.td,{children:"Integer"}),(0,l.jsx)(t.td,{children:"long"}),(0,l.jsx)(t.td,{children:"In flowtide integers are treated as the same type, the size is dynamically increased."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"binary"}),(0,l.jsx)(t.td,{children:"binary"}),(0,l.jsx)(t.td,{children:"binary"}),(0,l.jsx)(t.td,{})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"boolean"}),(0,l.jsx)(t.td,{children:"boolean"}),(0,l.jsx)(t.td,{children:"boolean"}),(0,l.jsx)(t.td,{})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"date"}),(0,l.jsx)(t.td,{children:"timestamp"}),(0,l.jsx)(t.td,{children:"date"}),(0,l.jsx)(t.td,{})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"decimal"}),(0,l.jsx)(t.td,{children:"decimal"}),(0,l.jsx)(t.td,{children:"decimal"}),(0,l.jsx)(t.td,{children:"Flowtide uses C# decimal format, this then gets converted into a decimal with precision and scale."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"double"}),(0,l.jsx)(t.td,{children:"double"}),(0,l.jsx)(t.td,{children:"double"}),(0,l.jsx)(t.td,{children:"Flowtide only manages double precision floating point numbers."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"timestamp"}),(0,l.jsx)(t.td,{children:"timestamp"}),(0,l.jsx)(t.td,{children:"timestamp"}),(0,l.jsx)(t.td,{})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"struct"}),(0,l.jsx)(t.td,{children:"map"}),(0,l.jsx)(t.td,{children:"struct"}),(0,l.jsx)(t.td,{children:"Map should be used to create struct values at this point."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"map"}),(0,l.jsx)(t.td,{children:"map"}),(0,l.jsx)(t.td,{children:"map"}),(0,l.jsx)(t.td,{})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"list"}),(0,l.jsx)(t.td,{children:"list"}),(0,l.jsx)(t.td,{children:"array"}),(0,l.jsx)(t.td,{})]})]})]}),"\n",(0,l.jsx)(t.h4,{id:"sql-example",children:"Sql example"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE test (\n  intval INT,\n  binval BINARY,\n  boolval BOOLEAN,\n  dateval DATE,\n  decimalVal DECIMAL(19, 3),\n  doubleVal DOUBLE,\n  timeVal TIMESTAMP, \n  structVal STRUCT<firstName STRING, lastName STRING>,\n  mapVal MAP<STRING, STRING>,\n  listVal LIST<STRING>\n);\n\nINSERT INTO test\nSELECT \n  intval, \n  binval, \n  boolval, \n  dateval, \n  decimalVal, \n  doubleVal, \n  timeVal, \n  MAP('firstName', firstName, 'lastName', lastName) as structVal,\n  MAP('firstName', firstName, 'lastName', lastName) as mapVal,\n  list(firstName, lastName) as listVal\nFROM my_source_table;\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var a=n(6540);const l={},s=a.createContext(l);function i(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);