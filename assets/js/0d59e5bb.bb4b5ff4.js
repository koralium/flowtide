"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6434],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>c});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),p=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},_="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),_=p(r),d=n,c=_["".concat(l,".").concat(d)]||_[d]||m[d]||a;return r?o.createElement(c,i(i({ref:t},u),{},{components:r})):o.createElement(c,i({ref:t},u))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[_]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2724:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_position:2},i="Prometheus",s={unversionedId:"Monitoring/prometheus",id:"Monitoring/prometheus",title:"Prometheus",description:"It is possible to export the stream metrics to Prometheus using OpenTelemetry.",source:"@site/docs/Monitoring/prometheus.md",sourceDirName:"Monitoring",slug:"/Monitoring/prometheus",permalink:"/flowtide/docs/Monitoring/prometheus",draft:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/Monitoring/prometheus.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Health checks",permalink:"/flowtide/docs/Monitoring/healthchecks"},next:{title:"Operators",permalink:"/flowtide/docs/category/operators"}},l={},p=[{value:"Sample",id:"sample",level:2}],u={toc:p},_="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(_,(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"prometheus"},"Prometheus"),(0,n.kt)("p",null,"It is possible to export the stream metrics to ",(0,n.kt)("em",{parentName:"p"},"Prometheus")," using ",(0,n.kt)("em",{parentName:"p"},"OpenTelemetry"),".\nThe prometheus exporter is right now in preview, but it can be used to set up an exporter if you ran an .ASPNetCore project."),(0,n.kt)("p",null,"To setup the exporter, install the following nuget packages:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"OpenTelemetry.Exporter.Prometheus.AspNetCore"),(0,n.kt)("li",{parentName:"ul"},"OpenTelemetry.Extensions.Hosting")),(0,n.kt)("p",null,"Add the following code to your ",(0,n.kt)("em",{parentName:"p"},"Program.cs")," if you run minimal API:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'builder.Services.AddOpenTelemetry()\n    .WithMetrics(builder =>\n    {\n        builder.AddPrometheusExporter();\n\n        // Configure a view to get unique names for each metric\n        builder.AddView((instrument) =>\n        {\n            return new MetricStreamConfiguration()\n            {\n                Name = $"{instrument.Meter.Name}.{instrument.Name}"\n            };\n        });\n        // Add all flowtide metrics\n        builder.AddMeter("flowtide.*");\n    });\n\n...\n\n// Adds the scraping endpoint\napp.UseOpenTelemetryPrometheusScrapingEndpoint();\n')),(0,n.kt)("p",null,"If you dont add the view, you will get multiple instruments with the same name in the export.\nNow if you visit '/metrics' when you run your app, you should see something similar to this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"# TYPE flowtide_stream_health gauge\nflowtide_stream_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_3_busy gauge\nflowtide_stream_operator_3_busy 0.9800000190734863 1698504668714\n\n# TYPE flowtide_stream_operator_3_backpressure gauge\nflowtide_stream_operator_3_backpressure 0 1698504668714\n\n# TYPE flowtide_stream_operator_3_health gauge\nflowtide_stream_operator_3_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_3_events_total counter\nflowtide_stream_operator_3_events_total 691000 1698504668714\n\n# TYPE flowtide_stream_operator_2_busy gauge\nflowtide_stream_operator_2_busy 0 1698504668714\n\n# TYPE flowtide_stream_operator_2_backpressure gauge\nflowtide_stream_operator_2_backpressure 0 1698504668714\n\n# TYPE flowtide_stream_operator_2_health gauge\nflowtide_stream_operator_2_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_1_events_total counter\nflowtide_stream_operator_1_events_total 691000 1698504668714\n\n# TYPE flowtide_stream_operator_1_busy gauge\nflowtide_stream_operator_1_busy 0 1698504668714\n\n# TYPE flowtide_stream_operator_1_backpressure gauge\nflowtide_stream_operator_1_backpressure 0 1698504668714\n\n# TYPE flowtide_stream_operator_1_health gauge\nflowtide_stream_operator_1_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_0_busy gauge\nflowtide_stream_operator_0_busy 0 1698504668714\n\n# TYPE flowtide_stream_operator_0_InputQueue gauge\nflowtide_stream_operator_0_InputQueue 0 1698504668714\n\n# TYPE flowtide_stream_operator_0_health gauge\nflowtide_stream_operator_0_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_4_backpressure gauge\nflowtide_stream_operator_4_backpressure 1 1698504668714\n\n# TYPE flowtide_stream_operator_4_busy gauge\nflowtide_stream_operator_4_busy 0 1698504668714\n\n# TYPE flowtide_stream_operator_4_health gauge\nflowtide_stream_operator_4_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_5_backpressure gauge\nflowtide_stream_operator_5_backpressure 1 1698504668714\n\n# TYPE flowtide_stream_operator_5_busy gauge\nflowtide_stream_operator_5_busy 0 1698504668714\n\n# TYPE flowtide_stream_operator_5_health gauge\nflowtide_stream_operator_5_health 1 1698504668714\n\n# EOF\n")),(0,n.kt)("h2",{id:"sample"},"Sample"),(0,n.kt)("p",null,"You can find a sample in ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/koralium/flowtide/tree/main/samples/MonitoringPrometheus"},"github")," to see how it can be setup."))}m.isMDXComponent=!0}}]);