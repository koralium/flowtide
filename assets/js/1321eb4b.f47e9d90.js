"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5618],{1723:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var i=t(5893),s=t(1151);const o={sidebar_position:3},c="Elasticsearch Connector",r={id:"connectors/elasticsearch",title:"Elasticsearch Connector",description:"The ElasticsSarch connector allows you to insert data into ElasticSearch.",source:"@site/docs/connectors/elasticsearch.md",sourceDirName:"connectors",slug:"/connectors/elasticsearch",permalink:"/flowtide/docs/connectors/elasticsearch",draft:!1,unlisted:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/connectors/elasticsearch.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"CosmosDB Connector",permalink:"/flowtide/docs/connectors/cosmosdb"},next:{title:"Monitoring",permalink:"/flowtide/docs/category/monitoring"}},a={},l=[{value:"Sink",id:"sink",level:2},{value:"Example",id:"example",level:3}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"elasticsearch-connector",children:"Elasticsearch Connector"}),"\n",(0,i.jsx)(n.p,{children:"The ElasticsSarch connector allows you to insert data into ElasticSearch.\nThere is only a sink operator implemented, and there is no plans yet to support a source."}),"\n",(0,i.jsx)(n.h2,{id:"sink",children:"Sink"}),"\n",(0,i.jsx)(n.p,{children:"The ElasticSearch sink allows insertion into an index."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"All ElasticSearch insertions must contain a column called '_id' this column is the unique identifier in the elasticsearch index.\nThis field will not be added to the source fields."})}),"\n",(0,i.jsxs)(n.p,{children:["To use the ",(0,i.jsx)(n.em,{children:"ElasticSearch Sink"})," add the following line to the ",(0,i.jsx)(n.em,{children:"ReadWriteFactory"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'factory.AddElasticsearchSink("*", elasticSearchConnectionSettings);\n'})}),"\n",(0,i.jsx)(n.p,{children:"The table name in the write relation becomes the index the sink writes to."}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Having a column named '_id' is required for the sink to function."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'sqlBuilder.Sql(@"\n    INSERT into elastic_index_name\n    SELECT userKey as _id, userKey, companyId, firstName, lastName \n    FROM users\n");\n\nfactory.AddElasticsearchSink("*", elasticSearchConnectionSettings);\n\n...\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>c});var i=t(7294);const s={},o=i.createContext(s);function c(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);