"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3518],{5392:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=r(5893),n=r(1151);const s={sidebar_position:1},i="Projection Operator",a={id:"operators/projection",title:"Projection Operator",description:"The Projection Operator implements the Project relation defined in substrait. The Projection operator is stateless and does not need to store any state.",source:"@site/docs/operators/projection.md",sourceDirName:"operators",slug:"/operators/projection",permalink:"/flowtide/docs/operators/projection",draft:!1,unlisted:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/operators/projection.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Operators",permalink:"/flowtide/docs/category/operators"},next:{title:"Filter Operator",permalink:"/flowtide/docs/operators/filter"}},d={},c=[{value:"Metrics",id:"metrics",level:2}];function h(e){const t={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"projection-operator",children:"Projection Operator"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.em,{children:"Projection Operator"})," implements the ",(0,o.jsx)(t.em,{children:"Project relation"})," defined in ",(0,o.jsx)(t.a,{href:"https://substrait.io/relations/logical_relations/#project-operation",children:"substrait"}),". The ",(0,o.jsx)(t.em,{children:"Projection operator"})," is stateless and does not need to store any state."]}),"\n",(0,o.jsxs)(t.p,{children:["As defined in substrait, it takes in two properties, ",(0,o.jsx)(t.em,{children:"input"})," which is the operator that feeds the projection, and an array of expressions which defines\nhow data should be projected. It also implements the common ",(0,o.jsx)(t.em,{children:"Emit"})," field which allows a user to reduce the amount of data outputted by the operator.\nAll expressions defined in the array will have an emit index offset by the input length."]}),"\n",(0,o.jsx)(t.h2,{id:"metrics",children:"Metrics"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.em,{children:"Projection Operator"})," has the following metrics:"]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Metric Name"}),(0,o.jsx)(t.th,{children:"Type"}),(0,o.jsx)(t.th,{children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"busy"}),(0,o.jsx)(t.td,{children:"Gauge"}),(0,o.jsx)(t.td,{children:"Value 0-1 on how busy the operator is."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"backpressure"}),(0,o.jsx)(t.td,{children:"Gauge"}),(0,o.jsx)(t.td,{children:"Value 0-1 on how much backpressure the operator has."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"health"}),(0,o.jsx)(t.td,{children:"Gauge"}),(0,o.jsx)(t.td,{children:"Value 0 or 1, if the operator is healthy or not."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"events"}),(0,o.jsx)(t.td,{children:"Counter"}),(0,o.jsx)(t.td,{children:"How many events that pass through the operator."})]})]})]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsx)(t.p,{children:"At this point, a projection operator will never be unhealthy."})})]})}function l(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>a,a:()=>i});var o=r(7294);const n={},s=o.createContext(n);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);