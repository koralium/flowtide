"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(n),g=a,h=p["".concat(s,".").concat(g)]||p[g]||c[g]||i;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:1},o="Getting started",l={unversionedId:"intro",id:"intro",title:"Getting started",description:"To get started with Flowtide, the easiest way is to create a new C# project.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/flowtide/docs/intro",draft:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Health checks",permalink:"/flowtide/docs/Monitoring/healthchecks"}},s={},u=[{value:"Creating a plan",id:"creating-a-plan",level:2},{value:"Setting up a read and write factory",id:"setting-up-a-read-and-write-factory",level:2},{value:"Running the stream",id:"running-the-stream",level:2},{value:"Persistent storage",id:"persistent-storage",level:3},{value:"Adding the UI",id:"adding-the-ui",level:2},{value:"Full example",id:"full-example",level:2}],d={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting started"),(0,a.kt)("p",null,"To get started with Flowtide, the easiest way is to create a new C# project."),(0,a.kt)("p",null,"Create a minimal API AspNetCore application and install the following nuget package:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"FlowtideDotNet.AspNetCore")),(0,a.kt)("h2",{id:"creating-a-plan"},"Creating a plan"),(0,a.kt)("p",null,"The first step is to create an execution plan, this can be be done with any substrait plan creator.\nBut it is also possible to do it with SQL inside flowtide. This tutorial will only show how to create a plan with SQL."),(0,a.kt)("p",null,"Add the following to your ",(0,a.kt)("em",{parentName:"p"},"Program.cs"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'\nvar sqlBuilder = new SqlPlanBuilder();\n\nsqlBuilder.Sql(@"\nCREATE TABLE testtable (\n  val any\n);\n\nCREATE TABLE other (\n  val any\n);\n\nINSERT INTO output\nSELECT t.val FROM testtable t\nLEFT JOIN other o\nON t.val = o.val\nWHERE t.val = 123;\n");\n\nvar plan = sqlBuilder.GetPlan();\n')),(0,a.kt)("h2",{id:"setting-up-a-read-and-write-factory"},"Setting up a read and write factory"),(0,a.kt)("p",null,"Each stream requires a factory that provides it with source and sink operators. These provide the actual implementation when talking with other sources."),(0,a.kt)("p",null,"Some examples of sinks and sources are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"MS SQL"),(0,a.kt)("li",{parentName:"ul"},"Kafka"),(0,a.kt)("li",{parentName:"ul"},"Postgres")),(0,a.kt)("p",null,"This example will add a connection for SQL Server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'var factory = new ReadWriteFactory();\n// Wildcard that all sources should use the following configuration\nfactory.AddSqlServerSource("*", () => "Server={your server};Database={your database};Trusted_Connection=True;");\n// Wildcard that all sinks will use this configuration\nfactory.AddSqlServerSink("*", () => "Server={your server};Database={your database};Trusted_Connection=True;");\n')),(0,a.kt)("h2",{id:"running-the-stream"},"Running the stream"),(0,a.kt)("p",null,"Finally to run the stream we add the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"builder.Services.AddFlowtideStream(b =>\n{\n    b.AddPlan(plan)\n    .AddReadWriteFactory(factory)\n    .WithStateOptions(new StateManagerOptions()\n    {\n        // This is non persistent storage, use FasterKV persistence storage instead if you want persistent storage\n        PersistentStorage = new FileCachePersistentStorage(new FlowtideDotNet.Storage.FileCacheOptions()\n        {\n        })\n    });\n});\n")),(0,a.kt)("h3",{id:"persistent-storage"},"Persistent storage"),(0,a.kt)("p",null,"The previous example does not use persistent storage, to use persistent storage, you can instead use the FasterKV storage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'PersistentStorage = new FasterKvPersistentStorage(new FasterKVSettings<long, SpanByte>()\n{\n    RemoveOutdatedCheckpoints = true,\n    MemorySize = 1024 * 1024 * 128,\n    PageSize = 1024 * 1024 * 16,\n    LogDevice = Devices.CreateLogDevice("./data/persistent/log"),\n    CheckpointDir = "./data/checkpoints"\n})\n')),(0,a.kt)("p",null,"The stream will then be persistent between checkpoints."),(0,a.kt)("h2",{id:"adding-the-ui"},"Adding the UI"),(0,a.kt)("p",null,'If you want to add the UI to visualize the progress of the stream, add the following code after "var app = builder.Build();".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'app.UseFlowtideUI("/stream");\n')),(0,a.kt)("h2",{id:"full-example"},"Full example"),(0,a.kt)("p",null,"Here is the full code example to get started:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'\nvar builder = WebApplication.CreateBuilder(args);\n\nvar sqlBuilder = new SqlPlanBuilder();\n\nsqlBuilder.Sql(@"\nCREATE TABLE testtable (\n  val any\n);\n\nCREATE TABLE other (\n  val any\n);\n\nINSERT INTO output\nSELECT t.val FROM testtable t\nLEFT JOIN other o\nON t.val = o.val\nWHERE t.val = 123;\n");\n\nvar plan = sqlBuilder.GetPlan();\n\nvar factory = new ReadWriteFactory();\n// Wildcard that all sources should use the following configuration\nfactory.AddSqlServerSource("*", () => "Server={your server};Database={your database};Trusted_Connection=True;");\n// Wildcard that all sinks will use this configuration\nfactory.AddSqlServerSink("*", () => "Server={your server};Database={your database};Trusted_Connection=True;");\n\nbuilder.Services.AddFlowtideStream(b =>\n{\n    b.AddPlan(plan)\n    .AddReadWriteFactory(factory)\n    .WithStateOptions(new StateManagerOptions()\n    {\n        // This is non persistent storage, use FasterKV persistence storage instead if you want persistent storage\n        PersistentStorage = new FileCachePersistentStorage(new FlowtideDotNet.Storage.FileCacheOptions()\n        {\n        })\n    });\n});\n\nvar app = builder.Build();\napp.UseFlowtideUI("/stream");\n\napp.Run();\n')))}c.isMDXComponent=!0}}]);