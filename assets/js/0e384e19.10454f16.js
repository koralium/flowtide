"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[3976],{2053:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"intro","title":"Getting started","description":"To get started with Flowtide, the easiest way is to create a new C# project. This guide will show an example with SQL Server, but you can change","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/flowtide/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"State Persistence","permalink":"/flowtide/docs/statepersistence"}}');var r=t(4848),s=t(8453);const o={sidebar_position:1},i="Getting started",d={},l=[{value:"Writing the SQL code",id:"writing-the-sql-code",level:2},{value:"Configure the stream",id:"configure-the-stream",level:2},{value:"Add connectors",id:"add-connectors",level:2},{value:"Configuring state storage",id:"configuring-state-storage",level:2},{value:"Adding the UI",id:"adding-the-ui",level:2},{value:"Full example",id:"full-example",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getting-started",children:"Getting started"})}),"\n",(0,r.jsx)(n.p,{children:"To get started with Flowtide, the easiest way is to create a new C# project. This guide will show an example with SQL Server, but you can change\nto another connector as well."}),"\n",(0,r.jsx)(n.p,{children:"Create a minimal API AspNetCore application and install the following nuget package:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"FlowtideDotNet.AspNetCore"}),"\n",(0,r.jsx)(n.li,{children:"FlowtideDotNet.Connector.SqlServer"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"writing-the-sql-code",children:"Writing the SQL code"}),"\n",(0,r.jsx)(n.p,{children:"The first step is to create an execution plan, this can be be done with any substrait plan creator.\nBut it is also possible to do it with SQL inside flowtide. This tutorial will show you how to create a plan with SQL."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var sqlText = @"\nINSERT INTO {sqlserver database name}.{schema name}.{destinationname}\nSELECT t.val FROM {sqlserver database name}.{schema name}.{tablename} t\nLEFT JOIN {sqlserver database name}.{schema name}.{othertablename} o\nON t.val = o.val\nWHERE t.val = 123;\n";\n'})}),"\n",(0,r.jsx)(n.p,{children:"Replace all values with that are between { } with your own table names in your SQL Server."}),"\n",(0,r.jsx)(n.h2,{id:"configure-the-stream",children:"Configure the stream"}),"\n",(0,r.jsx)(n.p,{children:"Next we will add a Flowtide stream to the service collection and add our SQL text as a execution plan:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'builder.Services.AddFlowtideStream("myStream)\n  .AddSqlTextAsPlan(sqlText)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The stream name is added on all logs and metrics, so keeping it unique in your environment can help when setting up monitoring."}),"\n",(0,r.jsx)(n.h2,{id:"add-connectors",children:"Add connectors"}),"\n",(0,r.jsx)(n.p,{children:"So far we have written SQL code and started configuring the stream. But we have not yet instructed Flowtide what it should connect to.\nSome examples of sinks and sources are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"MS SQL"}),"\n",(0,r.jsx)(n.li,{children:"Kafka"}),"\n",(0,r.jsx)(n.li,{children:"Elasticsearch"}),"\n",(0,r.jsx)(n.li,{children:"And more"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This is done by using the ",(0,r.jsx)(n.em,{children:"AddConnectors"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'builder.Services.AddFlowtideStream("myStream)\n  ...\n  .AddConnectors(connectorManager => {\n    // Add a SQL Server database as an available source\n    connectorManager.AddSqlServerSource(() => "Server={your server};Database={your database};Trusted_Connection=True;");\n    // Add another SQL Server database as a sink\n    connectorManager.AddSqlServerSink(() => "Server={your server};Database={your database};Trusted_Connection=True;");\n  })\n'})}),"\n",(0,r.jsx)(n.h2,{id:"configuring-state-storage",children:"Configuring state storage"}),"\n",(0,r.jsx)(n.p,{children:"A Flowtide stream requires state storage to function. This can be stored on a file system or on a cloud storage solution."}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial we will use a local development storage. This storage gets cleared between each test run which make it good for development."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'builder.Services.AddFlowtideStream("myStream)\n  ...\n  .AddStorage(storage => {\n    storage.AddTemporaryDevelopmentStorage();\n  });\n'})}),"\n",(0,r.jsx)(n.p,{children:"If you want to use persistent storage on the local file system, you can instead use:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'.AddStorage(storage => {\n  storage.AddFasterKVFileSystemStorage("./stateData");\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"adding-the-ui",children:"Adding the UI"}),"\n",(0,r.jsx)(n.p,{children:'If you want to add the UI to visualize the progress of the stream, add the following code after "var app = builder.Build();".'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'app.UseFlowtideUI("/stream");\n'})}),"\n",(0,r.jsx)(n.h2,{id:"full-example",children:"Full example"}),"\n",(0,r.jsx)(n.p,{children:"Here is the full code example to get started:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var builder = WebApplication.CreateBuilder(args);\n\nvar sqlText = @"\nINSERT INTO {sqlserver database name}.{schema name}.{destinationname}\nSELECT t.val FROM {sqlserver database name}.{schema name}.{tablename} t\nLEFT JOIN {sqlserver database name}.{schema name}.{othertablename} o\nON t.val = o.val\nWHERE t.val = 123;\n";\n\nbuilder.Services.AddFlowtideStream("myStream)\n  .AddSqlTextAsPlan(sqlText)\n  .AddConnectors(connectorManager => {\n    // Add a SQL Server database as an available source\n    connectorManager.AddSqlServerSource(() => "Server={your server};Database={your database};Trusted_Connection=True;");\n    // Add another SQL Server database as a sink\n    connectorManager.AddSqlServerSink(() => "Server={your server};Database={your database};Trusted_Connection=True;");\n  })\n  .AddStorage(storage => {\n    storage.AddTemporaryDevelopmentStorage();\n  });\n\nvar app = builder.Build();\napp.UseFlowtideUI("/stream");\n\napp.Run();\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(6540);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);