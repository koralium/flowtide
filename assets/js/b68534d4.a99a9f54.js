"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8247],{5456:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var s=t(5893),o=t(1151);const i={sidebar_position:7},r="Sharepoint Connector",a={id:"connectors/sharepoint",title:"Sharepoint Connector",description:"The Sharepoint Connector at this time only supports a sink where data can be stored into a sharepoint list.",source:"@site/docs/connectors/sharepoint.md",sourceDirName:"connectors",slug:"/connectors/sharepoint",permalink:"/flowtide/docs/connectors/sharepoint",draft:!1,unlisted:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/connectors/sharepoint.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Custom Data Source",permalink:"/flowtide/docs/connectors/customdata"},next:{title:"OpenFGA Connector",permalink:"/flowtide/docs/connectors/openfga"}},l={},c=[{value:"List Sink",id:"list-sink",level:2},{value:"Supported column types",id:"supported-column-types",level:3},{value:"Options",id:"options",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"sharepoint-connector",children:"Sharepoint Connector"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"Sharepoint Connector"})," at this time only supports a sink where data can be stored into a sharepoint list."]}),"\n",(0,s.jsx)(n.h2,{id:"list-sink",children:"List Sink"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"List Sink"})," saves result from a stream into a sharepoint list."]}),"\n",(0,s.jsx)(n.p,{children:"To use it, add the following nuget:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"FlowtideDotNet.Connector.Sharepoint"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Add it to the ",(0,s.jsx)(n.em,{children:"ReadWriteFactory"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'factory.AddSharepointListSink("{regexPattern}", (writeRelation) => new SharepointSinkOptions()\n{\n    // Set the primary key in sharepoint, it is the name of the column in sharepoint\n    PrimaryKeyColumnNames = new List<string> { "primaryKeyColumnName" }\n    SharepointUrl = "{your company name}.sharepoint.com",\n    Site = "{Name of sharepoint site}"\n    TokenCredential = yourAzureTokenCredential\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"supported-column-types",children:"Supported column types"}),"\n",(0,s.jsx)(n.p,{children:"The following column types are supported:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Text"})," - Data in should be of data type string"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PersonOrGroup"})," - Data in should be of type string and contain a UPN such as email."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Boolean"})," - Data type should be a boolean (true/false)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DateTime"})," - Data in should be a unix timestamp."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi line"})," - Same as text."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choice"})," - Data in should be of data type string and contain one of the choices."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Number"})," - Data in should be an integer or a float."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Currency"})," - Data in should be an integer or a float."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,s.jsx)(n.p,{children:"The following options can be set on the sink:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PrimaryKeyColumnNames"})," - Required, a list of sharepoint column names that make up the primary key."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SharepointUrl"})," Required, url to the sharepoint tenant, should not contain 'https://'."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Site"})," - Required, name to the site where the list is."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TokenCredential"})," - Required, the token credential that is used to authenticate against sharepoint."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DisableDelete"})," - Disables row deletion."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ThrowOnPersonOrGroupNotFound"})," - Instead of returning null when a person is not found, throw an exception."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PreprocessRow"})," - Action that is called on each upsert, allows addition of metadata columns."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var s=t(7294);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);