"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[7036],{1246:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>_,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"monitoring/prometheus","title":"Prometheus","description":"It is possible to export the stream metrics to Prometheus using OpenTelemetry.","source":"@site/docs/monitoring/prometheus.md","sourceDirName":"monitoring","slug":"/monitoring/prometheus","permalink":"/flowtide/docs/monitoring/prometheus","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/monitoring/prometheus.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Health checks","permalink":"/flowtide/docs/monitoring/healthchecks"},"next":{"title":"Azure Monitor","permalink":"/flowtide/docs/monitoring/azuremonitor"}}');var n=r(4848),s=r(8453);const a={sidebar_position:2},i="Prometheus",_={},l=[{value:"Sample",id:"sample",level:2}];function u(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"prometheus",children:"Prometheus"})}),"\n",(0,n.jsxs)(t.p,{children:["It is possible to export the stream metrics to ",(0,n.jsx)(t.em,{children:"Prometheus"})," using ",(0,n.jsx)(t.em,{children:"OpenTelemetry"}),".\nThe prometheus exporter is right now in preview, but it can be used to set up an exporter if you ran an .ASPNetCore project."]}),"\n",(0,n.jsx)(t.p,{children:"To setup the exporter, install the following nuget packages:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"OpenTelemetry.Exporter.Prometheus.AspNetCore"}),"\n",(0,n.jsx)(t.li,{children:"OpenTelemetry.Extensions.Hosting"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Add the following code to your ",(0,n.jsx)(t.em,{children:"Program.cs"})," if you run minimal API:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'builder.Services.AddOpenTelemetry()\n    .WithMetrics(builder =>\n    {\n        builder.AddPrometheusExporter();\n\n        // Configure a view to get unique names for each metric\n        builder.AddView((instrument) =>\n        {\n            return new MetricStreamConfiguration()\n            {\n                Name = $"{instrument.Meter.Name}.{instrument.Name}"\n            };\n        });\n        // Add all flowtide metrics\n        builder.AddMeter("flowtide.*");\n    });\n\n...\n\n// Adds the scraping endpoint\napp.UseOpenTelemetryPrometheusScrapingEndpoint();\n'})}),"\n",(0,n.jsx)(t.p,{children:"If you dont add the view, you will get multiple instruments with the same name in the export.\nNow if you visit '/metrics' when you run your app, you should see something similar to this:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"# TYPE flowtide_stream_health gauge\nflowtide_stream_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_3_busy gauge\nflowtide_stream_operator_3_busy 0.9800000190734863 1698504668714\n\n# TYPE flowtide_stream_operator_3_backpressure gauge\nflowtide_stream_operator_3_backpressure 0 1698504668714\n\n# TYPE flowtide_stream_operator_3_health gauge\nflowtide_stream_operator_3_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_3_events_total counter\nflowtide_stream_operator_3_events_total 691000 1698504668714\n\n# TYPE flowtide_stream_operator_2_busy gauge\nflowtide_stream_operator_2_busy 0 1698504668714\n\n# TYPE flowtide_stream_operator_2_backpressure gauge\nflowtide_stream_operator_2_backpressure 0 1698504668714\n\n# TYPE flowtide_stream_operator_2_health gauge\nflowtide_stream_operator_2_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_1_events_total counter\nflowtide_stream_operator_1_events_total 691000 1698504668714\n\n# TYPE flowtide_stream_operator_1_busy gauge\nflowtide_stream_operator_1_busy 0 1698504668714\n\n# TYPE flowtide_stream_operator_1_backpressure gauge\nflowtide_stream_operator_1_backpressure 0 1698504668714\n\n# TYPE flowtide_stream_operator_1_health gauge\nflowtide_stream_operator_1_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_0_busy gauge\nflowtide_stream_operator_0_busy 0 1698504668714\n\n# TYPE flowtide_stream_operator_0_InputQueue gauge\nflowtide_stream_operator_0_InputQueue 0 1698504668714\n\n# TYPE flowtide_stream_operator_0_health gauge\nflowtide_stream_operator_0_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_4_backpressure gauge\nflowtide_stream_operator_4_backpressure 1 1698504668714\n\n# TYPE flowtide_stream_operator_4_busy gauge\nflowtide_stream_operator_4_busy 0 1698504668714\n\n# TYPE flowtide_stream_operator_4_health gauge\nflowtide_stream_operator_4_health 1 1698504668714\n\n# TYPE flowtide_stream_operator_5_backpressure gauge\nflowtide_stream_operator_5_backpressure 1 1698504668714\n\n# TYPE flowtide_stream_operator_5_busy gauge\nflowtide_stream_operator_5_busy 0 1698504668714\n\n# TYPE flowtide_stream_operator_5_health gauge\nflowtide_stream_operator_5_health 1 1698504668714\n\n# EOF\n"})}),"\n",(0,n.jsx)(t.h2,{id:"sample",children:"Sample"}),"\n",(0,n.jsxs)(t.p,{children:["You can find a sample in ",(0,n.jsx)(t.a,{href:"https://github.com/koralium/flowtide/tree/main/samples/MonitoringPrometheus",children:"github"})," to see how it can be setup."]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var o=r(6540);const n={},s=o.createContext(n);function a(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);