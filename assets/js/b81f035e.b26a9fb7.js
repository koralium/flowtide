"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7381],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(r),d=a,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8598:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:1},i="Projection Operator",p={unversionedId:"Operators/projection",id:"Operators/projection",title:"Projection Operator",description:"The Projection Operator implements the Project relation defined in substrait. The Projection operator is stateless and does not need to store any state.",source:"@site/docs/Operators/projection.md",sourceDirName:"Operators",slug:"/Operators/projection",permalink:"/flowtide/docs/Operators/projection",draft:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/Operators/projection.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Operators",permalink:"/flowtide/docs/category/operators"},next:{title:"Filter Operator",permalink:"/flowtide/docs/Operators/filter"}},l={},s=[{value:"Metrics",id:"metrics",level:2}],c={toc:s},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"projection-operator"},"Projection Operator"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"Projection Operator")," implements the ",(0,a.kt)("em",{parentName:"p"},"Project relation")," defined in ",(0,a.kt)("a",{parentName:"p",href:"https://substrait.io/relations/logical_relations/#project-operation"},"substrait"),". The ",(0,a.kt)("em",{parentName:"p"},"Projection operator")," is stateless and does not need to store any state."),(0,a.kt)("p",null,"As defined in substrait, it takes in two properties, ",(0,a.kt)("em",{parentName:"p"},"input")," which is the operator that feeds the projection, and an array of expressions which defines\nhow data should be projected. It also implements the common ",(0,a.kt)("em",{parentName:"p"},"Emit")," field which allows a user to reduce the amount of data outputted by the operator.\nAll expressions defined in the array will have an emit index offset by the input length."),(0,a.kt)("h2",{id:"metrics"},"Metrics"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"Projection Operator")," has the following metrics:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Metric Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"busy"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0-1 on how busy the operator is.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"backpressure"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0-1 on how much backpressure the operator has.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"health"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0 or 1, if the operator is healthy or not.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"events"),(0,a.kt)("td",{parentName:"tr",align:null},"Counter"),(0,a.kt)("td",{parentName:"tr",align:null},"How many events that pass through the operator.")))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"At this point, a projection operator will never be unhealthy.")))}m.isMDXComponent=!0}}]);