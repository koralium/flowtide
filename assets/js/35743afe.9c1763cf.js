"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[8377],{4276:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"connectors/deltalake","title":"Delta Lake Connector","description":"The Delta Lake connector allows a stream to read existing data & changes from a delta lake table.","source":"@site/docs/connectors/deltalake.md","sourceDirName":"connectors","slug":"/connectors/deltalake","permalink":"/flowtide/docs/connectors/deltalake","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/connectors/deltalake.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"SQL Server Connector","permalink":"/flowtide/docs/connectors/sqlserver"},"next":{"title":"MongoDB Connector","permalink":"/flowtide/docs/connectors/mongodb"}}');var o=a(4848),l=a(8453);const s={sidebar_position:2},r="Delta Lake Connector",c={},i=[{value:"Delta Lake Source",id:"delta-lake-source",level:2},{value:"Replaying delta changes",id:"replaying-delta-changes",level:3},{value:"Sample",id:"sample",level:3},{value:"Azure Blob Storage Configuration Example",id:"azure-blob-storage-configuration-example",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"delta-lake-connector",children:"Delta Lake Connector"})}),"\n",(0,o.jsx)(t.p,{children:"The Delta Lake connector allows a stream to read existing data & changes from a delta lake table."}),"\n",(0,o.jsx)(t.p,{children:"The nuget package for the connector is:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"FlowtideDotNet.Connector.DeltaLake"}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"delta-lake-source",children:"Delta Lake Source"}),"\n",(0,o.jsxs)(t.p,{children:["The delta lake source allows ingesting data from a delta lake table. To connect to a delta lake table, use ",(0,o.jsx)(t.code,{children:"AddDeltaLake"})," method on the connector manager."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:'connectorManager.AddDeltaLake(new DeltaLakeOptions() {\n    // Connect to local disk, azure, AWS etc here, add the directory beneath the actual table you want to query (table name and folders are selected in the query)\n    StorageLocation = Files.Of.LocalDisk("./testdata")\n});\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The delta lake connector uses ",(0,o.jsx)(t.a,{href:"https://github.com/aloneguid/stowage",children:"Stowage"})," to allow connection to different cloud storage solutions, please visit that link to\ncheck possible connections."]}),"\n",(0,o.jsx)(t.p,{children:"Important to note is that the directory of storage location should be beneath the actual table you want to query. The actual table is selected in the query. Example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:"INSERT INTO output\nSELECT * FROM my_delta_lake_table\n"})}),"\n",(0,o.jsxs)(t.p,{children:["In combination with the connector manager addition above, this will use the path ",(0,o.jsx)(t.code,{children:"./testdata/my_delta_lake_table"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"If you instead would write:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:"INSERT INTO output\nSELECT * FROM my_folder.my_delta_lake_table\n"})}),"\n",(0,o.jsxs)(t.p,{children:["It becomes: ",(0,o.jsx)(t.code,{children:"./testdata/my_fylder/mmy_delta_lake_table"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"The delta lake source can calculate all the changes from the table, so no additional state is stored in the stream of the data to correctly calculate changes."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Supported features"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Calculate change data from add/remove actions"}),"\n",(0,o.jsx)(t.li,{children:"Use cdc files if they exist for change data"}),"\n",(0,o.jsx)(t.li,{children:"Deletion vectors"}),"\n",(0,o.jsx)(t.li,{children:"Partitioned data"}),"\n",(0,o.jsx)(t.li,{children:"Column mapping"}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"replaying-delta-changes",children:"Replaying delta changes"}),"\n",(0,o.jsx)(t.p,{children:"One feature of the delta lake source is the possibility to replay the log where each commit to the delta table is sent separately once per checkpoint.\nThis can be useful in unit tests, but also if one wants to send historic data to a destination system such as a time-series database and not skip over a commit."}),"\n",(0,o.jsx)(t.p,{children:"To use the replay functionality use the following setting in options:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:'connectorManager.AddDeltaLake(new DeltaLakeOptions() {\n    StorageLocation = Files.Of.LocalDisk("./testdata"),\n    OneVersionPerCheckpoint = true\n});\n'})}),"\n",(0,o.jsx)(t.h3,{id:"sample",children:"Sample"}),"\n",(0,o.jsxs)(t.p,{children:["There is an example in the samples folder that uses the Delta Lake Source to read data from an azure blob storage.\nTo run the example, start the ",(0,o.jsx)(t.code,{children:"AspireSamples"})," project and select one of:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"DeltaLake-Source"}),"\n",(0,o.jsx)(t.li,{children:"DeltaLake-Source, Replay history"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"After the project has started, inspect the console log of the application to see a log output of the rows."}),"\n",(0,o.jsx)(t.h3,{id:"azure-blob-storage-configuration-example",children:"Azure Blob Storage Configuration Example"}),"\n",(0,o.jsx)(t.p,{children:"When using Azure Blob Storage you would configure the storage example like this example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:"connectors.AddDeltaLake(new DeltaLakeOptions()\n{\n    StorageLocation = Files.Of.AzureBlobStorage(accountName, accountKey)\n});\n"})}),"\n",(0,o.jsx)(t.p,{children:"This connects the source to the root of the blob storage, to then query a table you must include the container name and all subfolders to the table location:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:"SELECT * FROM my_container.my_optional_parent_folder.my_table\n"})})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>r});var n=a(6540);const o={},l=n.createContext(o);function s(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);