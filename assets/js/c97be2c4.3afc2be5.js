"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[3048],{5520:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"connectors/configurationdata","title":"Configuration Data","description":"It is possible to use data from IConfiguration as a data source, this can be useful if one wants to use configuration inside the stream, for instance to","source":"@site/docs/connectors/configurationdata.md","sourceDirName":"connectors","slug":"/connectors/configurationdata","permalink":"/flowtide/docs/connectors/configurationdata","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/connectors/configurationdata.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Catalogs","permalink":"/flowtide/docs/connectors/catalogs"},"next":{"title":"SQL Server Connector","permalink":"/flowtide/docs/connectors/sqlserver"}}');var s=t(4848),i=t(8453);const a={sidebar_position:1},r="Configuration Data",c={},d=[{value:"Options Data Source",id:"options-data-source",level:2},{value:"Example using options data source as an exclude filter",id:"example-using-options-data-source-as-an-exclude-filter",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"configuration-data",children:"Configuration Data"})}),"\n",(0,s.jsx)(n.p,{children:"It is possible to use data from IConfiguration as a data source, this can be useful if one wants to use configuration inside the stream, for instance to\nfilter out rows that do not exist in the configuration."}),"\n",(0,s.jsx)(n.h2,{id:"options-data-source",children:"Options Data Source"}),"\n",(0,s.jsxs)(n.p,{children:["The options data source uses ",(0,s.jsx)(n.code,{children:"IOptionsMonitor<TOptions>"})," to listen to changes and to get the configuration settings."]}),"\n",(0,s.jsxs)(n.p,{children:["The Options data source is built-in as a default connector when installing FlowtideDotNet, so no extra nuget package is required.\nOptions are added with the ",(0,s.jsx)(n.code,{children:"AddOptionsSource<TOptions>"})," method on the connector manager.\nOne of the main benefits of this connector comes if you have a configuration provider that allows reloading, then data can be updated\nwithout restarting the stream."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'internal class TestOptions\n{\n    public string? Name { get; set; }\n}\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOptions<TestConfig>()\n    .Bind(builder.Configuration.GetSection("config"));\n\nbuilder.Services.AddFlowtideStream("test")\n    .AddConnectors((connectorManager) =>\n    {\n        connectorManager.AddOptionsSource<TestConfig>("config");\n\n        ...\n})\n\n...\n'})}),"\n",(0,s.jsx)(n.p,{children:"Configuration settings:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "config": {\n        "name": "hello"\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"SQL statement:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INSERT INTO output\nSELECT name FROM config\n"})}),"\n",(0,s.jsx)(n.p,{children:"This stream would result in the following data:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{children:"name"})})}),(0,s.jsx)(n.tbody,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{children:"hello"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"example-using-options-data-source-as-an-exclude-filter",children:"Example using options data source as an exclude filter"}),"\n",(0,s.jsx)(n.p,{children:"One scenario where this might be useful is to handle exclusions, say a specific row should not be sent to a destination."}),"\n",(0,s.jsx)(n.p,{children:"You could then have an options class similar to:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"internal class TestOptions\n{\n    public List<string>? ExcludedIds { get; set; }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"And an sql that looks the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE VIEW excluded_ids WITH (BUFFERED = true) AS\nselect excludedId FROM config c\nINNER JOIN UNNEST(c.excludedIds) excludedId;\n\nINSERT INTO my_destination\nSELECT m.id, m.other FROM my_table m\nLEFT JOIN excluded_ids e ON m.id = e.excludedId\nWHERE e.excludedId is null;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The buffered view helps with performance where it buffers the changes from the ",(0,s.jsx)(n.code,{children:"UNNEST"})," statement so only changing rows are returned.\nWe can then do a left join to match with the excluded ids but only return rows where there was no match."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(6540);const s={},i=o.createContext(s);function a(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);