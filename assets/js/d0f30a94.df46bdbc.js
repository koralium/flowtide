"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[9496],{1579:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"testing/integrationtests","title":"Integration Testing","description":"This section assumes that the Flowtide stream is implemented as a webapplication with minimal API.","source":"@site/docs/testing/integrationtests.md","sourceDirName":"testing","slug":"/testing/integrationtests","permalink":"/flowtide/docs/testing/integrationtests","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/testing/integrationtests.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Testing","permalink":"/flowtide/docs/testing/"},"next":{"title":".NET Aspire Testing","permalink":"/flowtide/docs/testing/aspiretesting"}}');var s=t(4848),r=t(8453);const i={sidebar_position:1},o="Integration Testing",c={},l=[{value:"Configure WebApplicationFactory",id:"configure-webapplicationfactory",level:2},{value:"Add a test table as a source",id:"add-a-test-table-as-a-source",level:2},{value:"Add a test data sink",id:"add-a-test-data-sink",level:2},{value:"Creating a test",id:"creating-a-test",level:2},{value:"Full example",id:"full-example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"integration-testing",children:"Integration Testing"})}),"\n",(0,s.jsx)(n.p,{children:"This section assumes that the Flowtide stream is implemented as a webapplication with minimal API."}),"\n",(0,s.jsx)(n.p,{children:"Given a stream that is configured in a similar matter to this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddFlowtideStream("stream")\n    .AddSqlFileAsPlan("stream.sql")\n    .AddConnectors(c =>\n    {\n        // Add empty sql server sinks that will be overridden by the tests\n        c.AddSqlServerSource(() => "");\n        c.AddSqlServerSink(() => "");\n    })\n    .AddStorage(storage =>\n    {\n        storage.AddFasterKVAzureStorage("", "", "");\n    });\n\nvar app = builder.Build();\n\napp.Run();\n\npublic partial class Program { }\n'})}),"\n",(0,s.jsx)(n.p,{children:"Create an XUnit test project and install the following nuget packages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"FlowtideDotNet.TestFramework"}),"\n",(0,s.jsx)(n.li,{children:"Microsoft.AspNetCore.Mvc.Testing"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configure-webapplicationfactory",children:"Configure WebApplicationFactory"}),"\n",(0,s.jsx)(n.p,{children:"Create a class for your integration tests and configure a WebApplicationFactory."}),"\n",(0,s.jsx)(n.p,{children:"With the WebApplicationFactory it is possible to override connectors and storage to allow\nusing different connectors for the test."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class IntegrationTests : IDisposable\n{\n    private readonly WebApplicationFactory<Program> _factory;\n    private readonly StreamTestMonitor _inProcessMonitor;\n\n    public IntegrationTests() \n    {\n        _factory = new WebApplicationFactory<Program>().WithWebHostBuilder(b =>\n        {\n            b.ConfigureTestServices(services =>\n            {\n                services.AddFlowtideStream("stream")\n                // Add to override connectors\n                .AddConnectors(c =>\n                {\n                    // Add new connectors here\n                })\n                .AddStorage(storage =>\n                {\n                    // Change to temporary storage for testing\n                    storage.AddTemporaryDevelopmentStorage();\n                })\n                // Add a test monitor that can be used to check for checkpoints (which ensures data updates)\n                .AddStreamTestMonitor(_inProcessMonitor);\n            });\n        });\n    }\n\n    public void Dispose()\n    {\n        _factory.Dispose();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"add-a-test-table-as-a-source",children:"Add a test table as a source"}),"\n",(0,s.jsx)(n.p,{children:"It is possible to create a test table where you can create mock data used for the tests."}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class IntegrationTests : IDisposable\n{\n    private TestDataTable _source;\n    ...\n\n    public IntegrationTests()\n    {\n        _source = TestDataTable.Create(new[]\n        {\n            new { val = 0 },\n            new { val = 1 },\n            new { val = 2 },\n            new { val = 3 },\n            new { val = 4 }\n        });\n\n        _factory = new WebApplicationFactory<Program>().WithWebHostBuilder(b =>\n        {\n            b.ConfigureTestServices(services =>\n            {\n                services.AddFlowtideStream("stream")\n                // Add to override connectors\n                .AddConnectors(c =>\n                {\n                    c.AddTestDataTable("testtable", _source);\n                })\n                ...\n            });\n        });\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["A test data table can be added under ",(0,s.jsx)(n.code,{children:"AddConnectors"})," with the specific table name it should be registered under."]}),"\n",(0,s.jsx)(n.h2,{id:"add-a-test-data-sink",children:"Add a test data sink"}),"\n",(0,s.jsx)(n.p,{children:"It may be useful to add a test data sink which allows evaluating the output of the stream.\nThis can be used to evaluate that the query plan actually results with the expected data."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class IntegrationTests : IDisposable\n{\n    private TestDataSink _sink;\n    ...\n\n    public IntegrationTests()\n    {\n        _sink = new TestDataSink();\n\n        _factory = new WebApplicationFactory<Program>().WithWebHostBuilder(b =>\n        {\n            b.ConfigureTestServices(services =>\n            {\n                services.AddFlowtideStream("stream")\n                // Add to override connectors\n                .AddConnectors(c =>\n                {\n                    ...\n                    // Test data sink is added using a regexp expression that matches destination names\n                    c.AddTestDataSink(".*", _sink);\n                })\n                ...\n            });\n        });\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-test",children:"Creating a test"}),"\n",(0,s.jsx)(n.p,{children:"The next step is to create the actual test case to test the stream."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"[Fact]\npublic async Task TestStreamOutput()\n{\n    _factory.CreateClient(); //Create a client to start the stream\n\n    // Wait for the stream to checkpoint before asserting the resulting data\n    await _inProcessMonitor.WaitForCheckpoint();\n\n    Assert.True(_sink.IsCurrentDataEqual(new[] \n    { \n        new { val = 0 },\n        new { val = 1 },\n        new { val = 2 },\n        new { val = 3 },\n        new { val = 4 }\n    }));\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"full-example",children:"Full example"}),"\n",(0,s.jsx)(n.p,{children:"Here is the full example of the test class:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class IntegrationTests : IDisposable\n{\n    private readonly WebApplicationFactory<Program> _factory;\n    private TestDataSink _sink;\n    private TestDataTable _source;\n    private StreamTestMonitor _inProcessMonitor;\n\n    public IntegrationTests()\n    {\n        _source = TestDataTable.Create(new[]\n        {\n            new { val = 0 },\n            new { val = 1 },\n            new { val = 2 },\n            new { val = 3 },\n            new { val = 4 }\n        });\n\n        _sink = new TestDataSink();\n        _inProcessMonitor = new StreamTestMonitor();\n        _factory = new WebApplicationFactory<Program>().WithWebHostBuilder(b =>\n        {\n            b.ConfigureTestServices(services =>\n            {\n                services.AddFlowtideStream("stream")\n                .AddConnectors(c =>\n                {\n                    // Override connectors\n                    c.AddTestDataTable("testtable", _source);\n                    c.AddTestDataSink(".*", _sink);\n                })\n                .AddStorage(storage =>\n                {\n                    // Change to temporary storage for unit tests\n                    storage.AddTemporaryDevelopmentStorage();\n                })\n                .AddStreamTestMonitor(_inProcessMonitor);\n            });\n        });\n    }\n\n    public void Dispose()\n    {\n        _factory.Dispose();\n    }\n\n    [Fact]\n    public async Task TestStreamOutput()\n    {\n        _factory.CreateClient(); //Create a client to start the stream\n\n        await _inProcessMonitor.WaitForCheckpoint();\n\n        Assert.True(_sink.IsCurrentDataEqual(new[] \n        { \n            new { val = 0 },\n            new { val = 1 },\n            new { val = 2 },\n            new { val = 3 },\n            new { val = 4 }\n        }));\n\n        // Add a new row\n        _source.AddRows(new { val = 5 });\n\n        // Remove a row\n        _source.RemoveRows(new { val = 3 });\n\n        await _inProcessMonitor.WaitForCheckpoint();\n\n        Assert.True(_sink.IsCurrentDataEqual(new[]\n        {\n            new { val = 0 },\n            new { val = 1 },\n            new { val = 2 },\n            new { val = 4 },\n            new { val = 5 }\n        }));\n    }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);