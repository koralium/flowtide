"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[695],{8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>l});var i=r(6540);const n={},o=i.createContext(n);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(o.Provider,{value:t},e.children)}},9392:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"operators/join","title":"Join Operators","description":"Join in Flowtide is implemented with two different operators, a block-nested join operator, and a merge-join operator.","source":"@site/docs/operators/join.md","sourceDirName":"operators","slug":"/operators/join","permalink":"/flowtide/docs/operators/join","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/operators/join.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Filter Operator","permalink":"/flowtide/docs/operators/filter"},"next":{"title":"Normalization Operator","permalink":"/flowtide/docs/operators/normalization"}}');var n=r(4848),o=r(8453);const s={sidebar_position:3},l="Join Operators",a={},d=[{value:"Merge-Join Operator",id:"merge-join-operator",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Block-Nested Join Operator",id:"block-nested-join-operator",level:2},{value:"Metrics",id:"metrics-1",level:3}];function h(e){const t={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"join-operators",children:"Join Operators"})}),"\n",(0,n.jsxs)(t.p,{children:["Join in Flowtide is implemented with two different operators, a ",(0,n.jsx)(t.em,{children:"block-nested join operator"}),", and a ",(0,n.jsx)(t.em,{children:"merge-join operator"}),".\nBoth operators can be in use, by using the generic ",(0,n.jsx)(t.a,{href:"https://substrait.io/relations/logical_relations/#join-operation",children:"substrait join relation"}),".\nThe plan optimizer will select which operator should be in use based on the join condition. It is also possible to use the ",(0,n.jsx)(t.a,{href:"https://substrait.io/relations/physical_relations/#merge-equijoin-operator",children:"merge-equijoin-operator"})," defined in substrait, and the merge join operator will be in use without any optmization."]}),"\n",(0,n.jsxs)(t.p,{children:["At this point, the ",(0,n.jsx)(t.em,{children:"merge-join operator"})," will only be used if the condition contains a condition that defines an equality between the two inputs. Example:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"left.col1 = right.col2"})," - Will result in a merge-join."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"left.col1 = right.col2 AND left.col2 < right.col3"})," - Will result in a merge-join."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"left.col1 = right.col2 OR left.col2 < right.col3"})," - Will result in a block-nested join."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"left.col2 < right.col3"})," - Will result in a block-nested join."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.em,{children:"merge-join"})," is highly efficient if compared to the ",(0,n.jsx)(t.em,{children:"block-nested join"}),", so it is advicable to always try to have a join condition with an equality expression."]}),"\n",(0,n.jsx)(t.h2,{id:"merge-join-operator",children:"Merge-Join Operator"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.em,{children:"merge-join operator"})," is a stateful operator that is implemented by two different B+ trees, one for each input source.\nThe trees are sorted based on the keys used in the equality condition."]}),"\n",(0,n.jsx)(t.h3,{id:"metrics",children:"Metrics"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Metric Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"busy"}),(0,n.jsx)(t.td,{children:"Gauge"}),(0,n.jsx)(t.td,{children:"Value 0-1 on how busy the operator is."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backpressure"}),(0,n.jsx)(t.td,{children:"Gauge"}),(0,n.jsx)(t.td,{children:"Value 0-1 on how much backpressure the operator has."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"health"}),(0,n.jsx)(t.td,{children:"Gauge"}),(0,n.jsx)(t.td,{children:"Value 0 or 1, if the operator is healthy or not."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"events"}),(0,n.jsx)(t.td,{children:"Counter"}),(0,n.jsx)(t.td,{children:"How many events that pass through the operator."})]})]})]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:"At this point, a merge-join operator will never be unhealthy."})}),"\n",(0,n.jsx)(t.h2,{id:"block-nested-join-operator",children:"Block-Nested Join Operator"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.em,{children:"block-nested join operator"})," is a stateful operator that is implemented using 2 persistent B+ trees, and two temporary B+ trees.\nThe temporary trees fill up with data until a watermark is recieved in which they it performs the join operations.\nIt does this to reduce the amount of I/O that has to be made when reading through the entire persisted dataset."]}),"\n",(0,n.jsx)(t.h3,{id:"metrics-1",children:"Metrics"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Metric Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"busy"}),(0,n.jsx)(t.td,{children:"Gauge"}),(0,n.jsx)(t.td,{children:"Value 0-1 on how busy the operator is."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backpressure"}),(0,n.jsx)(t.td,{children:"Gauge"}),(0,n.jsx)(t.td,{children:"Value 0-1 on how much backpressure the operator has."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"health"}),(0,n.jsx)(t.td,{children:"Gauge"}),(0,n.jsx)(t.td,{children:"Value 0 or 1, if the operator is healthy or not."})]})]})]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:"At this point, a block-nested join operator will never be unhealthy.\nIf there is a failure against the state, the stream will instead restart."})})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);