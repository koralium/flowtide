"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3109],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(r),c=a,h=m["".concat(p,".").concat(c)]||m[c]||d[c]||o;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},5414:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:3},i="Join Operators",l={unversionedId:"operators/join",id:"operators/join",title:"Join Operators",description:"Join in Flowtide is implemented with two different operators, a block-nested join operator, and a merge-join operator.",source:"@site/docs/operators/join.md",sourceDirName:"operators",slug:"/operators/join",permalink:"/flowtide/docs/operators/join",draft:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/operators/join.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Filter Operator",permalink:"/flowtide/docs/operators/filter"},next:{title:"Normalization Operator",permalink:"/flowtide/docs/operators/normalization"}},p={},s=[{value:"Merge-Join Operator",id:"merge-join-operator",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Block-Nested Join Operator",id:"block-nested-join-operator",level:2},{value:"Metrics",id:"metrics-1",level:3}],u={toc:s},m="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"join-operators"},"Join Operators"),(0,a.kt)("p",null,"Join in Flowtide is implemented with two different operators, a ",(0,a.kt)("em",{parentName:"p"},"block-nested join operator"),", and a ",(0,a.kt)("em",{parentName:"p"},"merge-join operator"),".\nBoth operators can be in use, by using the generic ",(0,a.kt)("a",{parentName:"p",href:"https://substrait.io/relations/logical_relations/#join-operation"},"substrait join relation"),".\nThe plan optimizer will select which operator should be in use based on the join condition. It is also possible to use the ",(0,a.kt)("a",{parentName:"p",href:"https://substrait.io/relations/physical_relations/#merge-equijoin-operator"},"merge-equijoin-operator")," defined in substrait, and the merge join operator will be in use without any optmization."),(0,a.kt)("p",null,"At this point, the ",(0,a.kt)("em",{parentName:"p"},"merge-join operator")," will only be used if the condition contains a condition that defines an equality between the two inputs. Example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"left.col1 = right.col2")," - Will result in a merge-join."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"left.col1 = right.col2 AND left.col2 < right.col3")," - Will result in a merge-join."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"left.col1 = right.col2 OR left.col2 < right.col3")," - Will result in a block-nested join."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"left.col2 < right.col3")," - Will result in a block-nested join.")),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"merge-join")," is highly efficient if compared to the ",(0,a.kt)("em",{parentName:"p"},"block-nested join"),", so it is advicable to always try to have a join condition with an equality expression."),(0,a.kt)("h2",{id:"merge-join-operator"},"Merge-Join Operator"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"merge-join operator")," is a stateful operator that is implemented by two different B+ trees, one for each input source.\nThe trees are sorted based on the keys used in the equality condition."),(0,a.kt)("h3",{id:"metrics"},"Metrics"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Metric Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"busy"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0-1 on how busy the operator is.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"backpressure"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0-1 on how much backpressure the operator has.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"health"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0 or 1, if the operator is healthy or not.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"events"),(0,a.kt)("td",{parentName:"tr",align:null},"Counter"),(0,a.kt)("td",{parentName:"tr",align:null},"How many events that pass through the operator.")))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"At this point, a merge-join operator will never be unhealthy.")),(0,a.kt)("h2",{id:"block-nested-join-operator"},"Block-Nested Join Operator"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"block-nested join operator")," is a stateful operator that is implemented using 2 persistent B+ trees, and two temporary B+ trees.\nThe temporary trees fill up with data until a watermark is recieved in which they it performs the join operations.\nIt does this to reduce the amount of I/O that has to be made when reading through the entire persisted dataset."),(0,a.kt)("h3",{id:"metrics-1"},"Metrics"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Metric Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"busy"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0-1 on how busy the operator is.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"backpressure"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0-1 on how much backpressure the operator has.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"health"),(0,a.kt)("td",{parentName:"tr",align:null},"Gauge"),(0,a.kt)("td",{parentName:"tr",align:null},"Value 0 or 1, if the operator is healthy or not.")))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"At this point, a block-nested join operator will never be unhealthy.\nIf there is a failure against the state, the stream will instead restart.")))}d.isMDXComponent=!0}}]);