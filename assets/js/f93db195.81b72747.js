"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[3612],{8482:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"operators/set","title":"Set Operator","description":"The Set Operator can take in 2->N inputs and will perform a set operation on the inputs. At this point only UNION ALL is supported by the set operator.","source":"@site/docs/operators/set.md","sourceDirName":"operators","slug":"/operators/set","permalink":"/flowtide/docs/operators/set","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/operators/set.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Normalization Operator","permalink":"/flowtide/docs/operators/normalization"},"next":{"title":"Aggregate Operator","permalink":"/flowtide/docs/operators/aggregate"}}');var n=r(4848),o=r(8453);const i={sidebar_position:5},a="Set Operator",d={},h=[{value:"Metrics",id:"metrics",level:2}];function l(e){const t={admonition:"admonition",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"set-operator",children:"Set Operator"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.em,{children:"Set Operator"})," can take in 2->N inputs and will perform a set operation on the inputs. At this point only ",(0,n.jsx)(t.em,{children:"UNION ALL"})," is supported by the set operator.\nIt is a stateful operator and has one B+ tree for each input."]}),"\n",(0,n.jsx)(t.h2,{id:"metrics",children:"Metrics"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.em,{children:"Set Operator"})," has the following metrics:"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Metric Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"busy"}),(0,n.jsx)(t.td,{children:"Gauge"}),(0,n.jsx)(t.td,{children:"Value 0-1 on how busy the operator is."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"backpressure"}),(0,n.jsx)(t.td,{children:"Gauge"}),(0,n.jsx)(t.td,{children:"Value 0-1 on how much backpressure the operator has."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"health"}),(0,n.jsx)(t.td,{children:"Gauge"}),(0,n.jsx)(t.td,{children:"Value 0 or 1, if the operator is healthy or not."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"events"}),(0,n.jsx)(t.td,{children:"Counter"}),(0,n.jsx)(t.td,{children:"How many events that pass through the operator."})]})]})]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:"At this point, a set operator will never be unhealthy.\nIf there is a failure against the state, the stream will instead restart."})})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var s=r(6540);const n={},o=s.createContext(n);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);