"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[5840],{9391:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"connectors/cosmosdb","title":"CosmosDB Connector","description":"The CosmosDB connector allows you to insert data into a CosmosDB container.","source":"@site/docs/connectors/cosmosdb.md","sourceDirName":"connectors","slug":"/connectors/cosmosdb","permalink":"/flowtide/docs/connectors/cosmosdb","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/connectors/cosmosdb.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"SQL Server Connector","permalink":"/flowtide/docs/connectors/sqlserver"},"next":{"title":"MongoDB Connector","permalink":"/flowtide/docs/connectors/mongodb"}}');var s=o(4848),a=o(8453);const i={sidebar_position:2},r="CosmosDB Connector",c={},d=[{value:"Sink",id:"sink",level:2},{value:"Example",id:"example",level:3}];function l(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"cosmosdb-connector",children:"CosmosDB Connector"})}),"\n",(0,s.jsx)(n.p,{children:"The CosmosDB connector allows you to insert data into a CosmosDB container.\nAt this time only a sink is implemented, there is no support yet to have CosmosDB as a source."}),"\n",(0,s.jsx)(n.h2,{id:"sink",children:"Sink"}),"\n",(0,s.jsx)(n.p,{children:"The CosmosDB sink allows the insertion of data into a CosmosDB container."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"All CosmosDB insertions must contain a column called 'id' and also a column that matches the configured partition key on the CosmosDB container."})}),"\n",(0,s.jsx)(n.p,{children:"Its implementation waits fully until the stream has reached a steady state at a time T until it writes data to the container.\nThis means that its table output can always be traced back to a state from the source systems."}),"\n",(0,s.jsxs)(n.p,{children:["To use the ",(0,s.jsx)(n.em,{children:"CosmosDB Sink"})," add the following line to the ",(0,s.jsx)(n.em,{children:"IConnectorManager"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'connectorManager.AddCosmosDbSink("your regexp on table names", connectionString, databaseName, containerName);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"Having a column named 'id' and also a column matching the configured primary key is required for the sink to function."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'sqlBuilder.Sql(@"\n    INSERT into cosmos\n    SELECT userKey as id, companyId as pk, firstName, lastName \n    FROM users\n");\n\nconnectorManager.AddCosmosDbSink("cosmos", connectionString, databaseName, containerName);\n\n...\n'})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>r});var t=o(6540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);