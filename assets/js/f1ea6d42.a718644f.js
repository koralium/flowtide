"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4470],{8058:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>x,frontMatter:()=>t,metadata:()=>r,toc:()=>a});var l=n(5893),i=n(1151);const t={sidebar_position:3},d="Specialized Expressions",r={id:"expressions/specializedexpressions",title:"Specialized Expressions",description:"Cast Expression",source:"@site/docs/expressions/specializedexpressions.md",sourceDirName:"expressions",slug:"/expressions/specializedexpressions",permalink:"/flowtide/docs/expressions/specializedexpressions",draft:!1,unlisted:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/expressions/specializedexpressions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"String functions",permalink:"/flowtide/docs/expressions/aggregatefunctions/string"},next:{title:"SQL",permalink:"/flowtide/docs/sql/"}},c={},a=[{value:"Cast Expression",id:"cast-expression",level:2},{value:"Cast to string",id:"cast-to-string",level:3},{value:"SQL Usage",id:"sql-usage",level:4},{value:"Cast to boolean",id:"cast-to-boolean",level:3},{value:"SQL Usage",id:"sql-usage-1",level:4},{value:"Cast to integer",id:"cast-to-integer",level:3},{value:"SQL Usage",id:"sql-usage-2",level:4},{value:"Cast to double",id:"cast-to-double",level:3},{value:"SQL Usage",id:"sql-usage-3",level:4},{value:"Cast to decimal",id:"cast-to-decimal",level:3},{value:"SQL Usage",id:"sql-usage-4",level:4},{value:"Nested Type Constructor Expressions",id:"nested-type-constructor-expressions",level:2},{value:"List",id:"list",level:3},{value:"SQL Usage",id:"sql-usage-5",level:4},{value:"Map",id:"map",level:3},{value:"SQL Usage",id:"sql-usage-6",level:4},{value:"If Expression",id:"if-expression",level:2},{value:"SQL Usage",id:"sql-usage-7",level:3},{value:"Or List Expression",id:"or-list-expression",level:2},{value:"SQL Usage",id:"sql-usage-8",level:3}];function h(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.h1,{id:"specialized-expressions",children:"Specialized Expressions"}),"\n",(0,l.jsx)(s.h2,{id:"cast-expression",children:"Cast Expression"}),"\n",(0,l.jsx)(s.p,{children:"The cast expression allows conversion between data types.\nThe supported data types at this point are:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"String"}),"\n",(0,l.jsx)(s.li,{children:"Boolean"}),"\n",(0,l.jsx)(s.li,{children:"Int"}),"\n",(0,l.jsx)(s.li,{children:"Double"}),"\n",(0,l.jsx)(s.li,{children:"Decimal"}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"If it is not possible to cast a value, null will be returned."}),"\n",(0,l.jsx)(s.h3,{id:"cast-to-string",children:"Cast to string"}),"\n",(0,l.jsxs)(s.table,{children:[(0,l.jsx)(s.thead,{children:(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.th,{children:"Data Type"}),(0,l.jsx)(s.th,{children:"Value"}),(0,l.jsx)(s.th,{children:"Output"})]})}),(0,l.jsxs)(s.tbody,{children:[(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Integer"}),(0,l.jsx)(s.td,{children:"3"}),(0,l.jsx)(s.td,{children:"'3'"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Float"}),(0,l.jsx)(s.td,{children:"3.1"}),(0,l.jsx)(s.td,{children:"'3.1'"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Decimal"}),(0,l.jsx)(s.td,{children:"3.1"}),(0,l.jsx)(s.td,{children:"'3.1'"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Boolean"}),(0,l.jsx)(s.td,{children:"True"}),(0,l.jsx)(s.td,{children:"'true'"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Boolean"}),(0,l.jsx)(s.td,{children:"False"}),(0,l.jsx)(s.td,{children:"'false'"})]})]})]}),"\n",(0,l.jsx)(s.h4,{id:"sql-usage",children:"SQL Usage"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-sql",children:"CAST(column1 AS string)\n"})}),"\n",(0,l.jsx)(s.h3,{id:"cast-to-boolean",children:"Cast to boolean"}),"\n",(0,l.jsx)(s.p,{children:"For numeric types, any value except 0 becomes true, and 0 becomes false."}),"\n",(0,l.jsxs)(s.table,{children:[(0,l.jsx)(s.thead,{children:(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.th,{children:"Data Type"}),(0,l.jsx)(s.th,{children:"Value"}),(0,l.jsx)(s.th,{children:"Output"})]})}),(0,l.jsxs)(s.tbody,{children:[(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Integer"}),(0,l.jsx)(s.td,{children:"3"}),(0,l.jsx)(s.td,{children:"true"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Integer"}),(0,l.jsx)(s.td,{children:"0"}),(0,l.jsx)(s.td,{children:"false"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Float"}),(0,l.jsx)(s.td,{children:"3.1"}),(0,l.jsx)(s.td,{children:"true"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Float"}),(0,l.jsx)(s.td,{children:"0.0"}),(0,l.jsx)(s.td,{children:"false"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Decimal"}),(0,l.jsx)(s.td,{children:"3.1"}),(0,l.jsx)(s.td,{children:"true"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Decimal"}),(0,l.jsx)(s.td,{children:"0.0"}),(0,l.jsx)(s.td,{children:"false"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"String"}),(0,l.jsx)(s.td,{children:"'true'"}),(0,l.jsx)(s.td,{children:"true"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"String"}),(0,l.jsx)(s.td,{children:"'false'"}),(0,l.jsx)(s.td,{children:"false"})]})]})]}),"\n",(0,l.jsx)(s.h4,{id:"sql-usage-1",children:"SQL Usage"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-sql",children:"CAST(column1 AS boolean)\n"})}),"\n",(0,l.jsx)(s.h3,{id:"cast-to-integer",children:"Cast to integer"}),"\n",(0,l.jsx)(s.p,{children:"For any numeric type with decimals, the value will be floored."}),"\n",(0,l.jsxs)(s.table,{children:[(0,l.jsx)(s.thead,{children:(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.th,{children:"Data Type"}),(0,l.jsx)(s.th,{children:"Value"}),(0,l.jsx)(s.th,{children:"Output"})]})}),(0,l.jsxs)(s.tbody,{children:[(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Float"}),(0,l.jsx)(s.td,{children:"3.1"}),(0,l.jsx)(s.td,{children:"3"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Decimal"}),(0,l.jsx)(s.td,{children:"3.1"}),(0,l.jsx)(s.td,{children:"3"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Boolean"}),(0,l.jsx)(s.td,{children:"True"}),(0,l.jsx)(s.td,{children:"1"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Boolean"}),(0,l.jsx)(s.td,{children:"False"}),(0,l.jsx)(s.td,{children:"0"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"String"}),(0,l.jsx)(s.td,{children:"'1'"}),(0,l.jsx)(s.td,{children:"1"})]})]})]}),"\n",(0,l.jsx)(s.h4,{id:"sql-usage-2",children:"SQL Usage"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-sql",children:"CAST(column1 AS int)\n"})}),"\n",(0,l.jsx)(s.h3,{id:"cast-to-double",children:"Cast to double"}),"\n",(0,l.jsxs)(s.table,{children:[(0,l.jsx)(s.thead,{children:(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.th,{children:"Data Type"}),(0,l.jsx)(s.th,{children:"Value"}),(0,l.jsx)(s.th,{children:"Output"})]})}),(0,l.jsxs)(s.tbody,{children:[(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Int"}),(0,l.jsx)(s.td,{children:"3"}),(0,l.jsx)(s.td,{children:"3"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Decimal"}),(0,l.jsx)(s.td,{children:"3.1"}),(0,l.jsx)(s.td,{children:"3.1"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Boolean"}),(0,l.jsx)(s.td,{children:"True"}),(0,l.jsx)(s.td,{children:"1.0"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Boolean"}),(0,l.jsx)(s.td,{children:"False"}),(0,l.jsx)(s.td,{children:"0.0"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"String"}),(0,l.jsx)(s.td,{children:"'1.3'"}),(0,l.jsx)(s.td,{children:"1.3"})]})]})]}),"\n",(0,l.jsx)(s.h4,{id:"sql-usage-3",children:"SQL Usage"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-sql",children:"CAST(column1 AS double)\n"})}),"\n",(0,l.jsx)(s.h3,{id:"cast-to-decimal",children:"Cast to decimal"}),"\n",(0,l.jsxs)(s.table,{children:[(0,l.jsx)(s.thead,{children:(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.th,{children:"Data Type"}),(0,l.jsx)(s.th,{children:"Value"}),(0,l.jsx)(s.th,{children:"Output"})]})}),(0,l.jsxs)(s.tbody,{children:[(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Int"}),(0,l.jsx)(s.td,{children:"3"}),(0,l.jsx)(s.td,{children:"3"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Float"}),(0,l.jsx)(s.td,{children:"3.1"}),(0,l.jsx)(s.td,{children:"3.1"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Boolean"}),(0,l.jsx)(s.td,{children:"True"}),(0,l.jsx)(s.td,{children:"1.0"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"Boolean"}),(0,l.jsx)(s.td,{children:"False"}),(0,l.jsx)(s.td,{children:"0.0"})]}),(0,l.jsxs)(s.tr,{children:[(0,l.jsx)(s.td,{children:"String"}),(0,l.jsx)(s.td,{children:"'1.3'"}),(0,l.jsx)(s.td,{children:"1.3"})]})]})]}),"\n",(0,l.jsx)(s.h4,{id:"sql-usage-4",children:"SQL Usage"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-sql",children:"CAST(column1 AS decimal)\n"})}),"\n",(0,l.jsx)(s.h2,{id:"nested-type-constructor-expressions",children:"Nested Type Constructor Expressions"}),"\n",(0,l.jsx)(s.h3,{id:"list",children:"List"}),"\n",(0,l.jsx)(s.p,{children:"Allows the creation of a list object."}),"\n",(0,l.jsx)(s.h4,{id:"sql-usage-5",children:"SQL Usage"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-sql",children:"SELECT list(col1, col2) FROM ...\n"})}),"\n",(0,l.jsx)(s.h3,{id:"map",children:"Map"}),"\n",(0,l.jsxs)(s.p,{children:["Allows the creation of a ",(0,l.jsx)(s.em,{children:"map"})," object type. A map is a typical 'json' object with property names and values.\nThe map function consists of a list of key value pairs."]}),"\n",(0,l.jsx)(s.h4,{id:"sql-usage-6",children:"SQL Usage"}),"\n",(0,l.jsx)(s.p,{children:"The SQL function expects an even number of arguments, the first argument is the key and the second the value for the first key value pair.\nThe third argument is the second pairs key, etc."}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-sql",children:"SELECT map('keyvalue', col1) FROM ...\nSELECT map(col2, col1) FROM ...\n"})}),"\n",(0,l.jsx)(s.p,{children:"The keys will be converted into string. A null value will result in 'null' as the key."}),"\n",(0,l.jsx)(s.h2,{id:"if-expression",children:"If Expression"}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.a,{href:"https://substrait.io/expressions/specialized_record_expressions/#if-expression",children:"Substrait definition"})}),"\n",(0,l.jsx)(s.p,{children:"An if statement, or in SQL language a case statement."}),"\n",(0,l.jsx)(s.h3,{id:"sql-usage-7",children:"SQL Usage"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-sql",children:"SELECT\n    CASE\n        WHEN c1 = 'hello' THEN 1\n        WHEN c1 = 'world' THEN 2\n        ELSE 3\n    END\nFROM ...\n"})}),"\n",(0,l.jsx)(s.h2,{id:"or-list-expression",children:"Or List Expression"}),"\n",(0,l.jsx)(s.p,{children:(0,l.jsx)(s.a,{href:"https://substrait.io/expressions/specialized_record_expressions/#or-list-equality-expression",children:"Substrait definition"})}),"\n",(0,l.jsx)(s.p,{children:"Checks if a value is equal to any value in a list. This uses Kleene logic for equality."}),"\n",(0,l.jsx)(s.h3,{id:"sql-usage-8",children:"SQL Usage"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-sql",children:"... WHERE column1 IN (1, 5, 17)\n"})})]})}function x(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>r,a:()=>d});var l=n(7294);const i={},t=l.createContext(i);function d(e){const s=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),l.createElement(t.Provider,{value:s},e.children)}}}]);