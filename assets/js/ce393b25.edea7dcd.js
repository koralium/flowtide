"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[1175],{4162:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"operators/iteration","title":"Iteration Operator","description":"The iteration operator allows a user to do to iterative streams, such as a recursive join in a tree structure.","source":"@site/docs/operators/iteration.md","sourceDirName":"operators","slug":"/operators/iteration","permalink":"/flowtide/docs/operators/iteration","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/operators/iteration.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Aggregate Operator","permalink":"/flowtide/docs/operators/aggregate"},"next":{"title":"Buffer Operator","permalink":"/flowtide/docs/operators/buffer"}}');var r=n(4848),o=n(8453);const s={sidebar_position:6},a="Iteration Operator",l={},d=[{value:"Iteration Relation",id:"iteration-relation",level:2},{value:"Iteration Reference Read Relation",id:"iteration-reference-read-relation",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Metrics",id:"metrics",level:2}];function h(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"iteration-operator",children:"Iteration Operator"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.em,{children:"iteration operator"})," allows a user to do to iterative streams, such as a recursive join in a tree structure.\nThe operator is not defined as a standard operator in substrait. So this uses custom relations."]}),"\n",(0,r.jsx)(t.p,{children:"It is defined by two different relations:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"IterationRelation"}),"\n",(0,r.jsx)(t.li,{children:"IterationReferenceReadRelation"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"iteration-relation",children:"Iteration Relation"}),"\n",(0,r.jsx)(t.p,{children:"The iteration relation uses ExtensionMultiRel in substrait and is defined as follows in protobuf:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"message IterationRelation {\n    string iterationName = 1;\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"The first input in ExtensionMultiRel is the loop relation, the second input is input to the iteration itself.\nThe second input is optional."}),"\n",(0,r.jsx)(t.p,{children:"IterationName exist since there can be multiple nested iterations."}),"\n",(0,r.jsx)(t.h2,{id:"iteration-reference-read-relation",children:"Iteration Reference Read Relation"}),"\n",(0,r.jsx)(t.p,{children:"This relation is used to tell where the data from the iteration operator should be sent to inside of the loop.\nThis relation should only be used inside the loop relation."}),"\n",(0,r.jsx)(t.p,{children:"It is defined by ExtensionLeafRel and has the following message:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"message IterationReferenceReadRelation {\n    // Name of the iteration to get data from\n    string iterationName = 1;\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(t.p,{children:"The iteration operator differs a bit from the other operators in how it does checkpointing.\nTo make sure a checkpoint contains all processed data before comitting to a checkpoint it follows these steps:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"If there is no input to the operator, a dummy read operator is created that only sends checkpoint events."}),"\n",(0,r.jsx)(t.li,{children:"On checkpoint send a LockingEventPrepare to the loop."}),"\n",(0,r.jsx)(t.li,{children:"All operators in loop adds information if they have another dependency that is not yet in checkpoint."}),"\n",(0,r.jsx)(t.li,{children:"If any message was recieved before the iteration operator recieves the LockingEventPrepare message, or a dependency is not in checkpoint, the message is resent."}),"\n",(0,r.jsx)(t.li,{children:"When all conditions above are met, the checkpoint is sent throught the loop."}),"\n",(0,r.jsx)(t.li,{children:"When the operator recieves the checkpoint from the loop, it first sends out watermark information, and then the checkpoint to the rest of the stream."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"metrics",children:"Metrics"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.em,{children:"Iteration Operator"})," has the following metrics:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Metric Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"busy"}),(0,r.jsx)(t.td,{children:"Gauge"}),(0,r.jsx)(t.td,{children:"Value 0-1 on how busy the operator is."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"backpressure"}),(0,r.jsx)(t.td,{children:"Gauge"}),(0,r.jsx)(t.td,{children:"Value 0-1 on how much backpressure the operator has."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"health"}),(0,r.jsx)(t.td,{children:"Gauge"}),(0,r.jsx)(t.td,{children:"Value 0 or 1, if the operator is healthy or not."})]})]})]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"At this point, an iteration operator will never be unhealthy.\nIf there is a failure against the state, the stream will instead restart."})})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(6540);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);