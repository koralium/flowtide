"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2319],{7979:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>u});var i=n(5893),l=n(1151);const a={sidebar_position:3},t="Comparison Functions",r={id:"expressions/scalarfunctions/comparison",title:"Comparison Functions",description:"Equal",source:"@site/docs/expressions/scalarfunctions/comparison.md",sourceDirName:"expressions/scalarfunctions",slug:"/expressions/scalarfunctions/comparison",permalink:"/flowtide/docs/expressions/scalarfunctions/comparison",draft:!1,unlisted:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/expressions/scalarfunctions/comparison.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Boolean Functions",permalink:"/flowtide/docs/expressions/scalarfunctions/boolean"},next:{title:"String Functions",permalink:"/flowtide/docs/expressions/scalarfunctions/string"}},o={},u=[{value:"Equal",id:"equal",level:2},{value:"SQL Usage",id:"sql-usage",level:3},{value:"Not equal",id:"not-equal",level:2},{value:"SQL Usage",id:"sql-usage-1",level:3},{value:"Greater than",id:"greater-than",level:2},{value:"SQL Usage",id:"sql-usage-2",level:3},{value:"Greater than or equal",id:"greater-than-or-equal",level:2},{value:"SQL Usage",id:"sql-usage-3",level:3},{value:"Less than",id:"less-than",level:2},{value:"SQL Usage",id:"sql-usage-4",level:3},{value:"Less than or equal",id:"less-than-or-equal",level:2},{value:"SQL Usage",id:"sql-usage-5",level:3},{value:"Between",id:"between",level:2},{value:"SQL Usage",id:"sql-usage-6",level:3},{value:"Is not null",id:"is-not-null",level:2},{value:"SQL Usage",id:"sql-usage-7",level:3},{value:"Is Null",id:"is-null",level:2},{value:"SQL Usage",id:"sql-usage-8",level:3},{value:"Coalesce",id:"coalesce",level:2},{value:"SQL Usage",id:"sql-usage-9",level:3},{value:"Is Infinite",id:"is-infinite",level:2},{value:"SQL Usage",id:"sql-usage-10",level:3},{value:"Is Finite",id:"is-finite",level:2},{value:"SQL Usage",id:"sql-usage-11",level:3},{value:"Is NaN",id:"is-nan",level:2},{value:"SQL Usage",id:"sql-usage-12",level:3}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"comparison-functions",children:"Comparison Functions"}),"\n",(0,i.jsx)(s.h2,{id:"equal",children:"Equal"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#equal",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Compares equality of two values.\nIf the two values have different types they are not considered equal, so a float with value 1 will not equal an integer with value 1.\nIf any argument is null, the result is null."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"... WHERE c1 = 'hello'\n"})}),"\n",(0,i.jsx)(s.h2,{id:"not-equal",children:"Not equal"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#not_equal",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks two values for non equality.\nDifferent types will immedietly return true, that the values are not equal.\nIf any argument is null, the result is null."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-1",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"... WHERE c1 != 'hello'\n"})}),"\n",(0,i.jsx)(s.h2,{id:"greater-than",children:"Greater than"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#gt",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if the left value is greater than the right value.\nIf any argument is null, the result is null."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-2",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"... WHERE c1 > 1\n"})}),"\n",(0,i.jsx)(s.h2,{id:"greater-than-or-equal",children:"Greater than or equal"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#gte",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if the left value is greater than or equal to the right value.\nIf any argument is null, the result is null."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-3",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"... WHERE c1 >= 1\n"})}),"\n",(0,i.jsx)(s.h2,{id:"less-than",children:"Less than"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#lt",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if the left value is less than the right value.\nIf any argument is null, the result is null."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-4",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"... WHERE c1 < 1\n"})}),"\n",(0,i.jsx)(s.h2,{id:"less-than-or-equal",children:"Less than or equal"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#lte",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if the left value is less than or equal to the right value.\nIf any argument is null, the result is null."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-5",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"... WHERE c1 <= 1\n"})}),"\n",(0,i.jsx)(s.h2,{id:"between",children:"Between"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#between",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if an expression is between two values."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-6",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"... WHERE c1 BETWEEN 100 AND 200\n"})}),"\n",(0,i.jsx)(s.h2,{id:"is-not-null",children:"Is not null"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#is_not_null",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if a single argument is not equal to null."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-7",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"... WHERE c1 is not null\n"})}),"\n",(0,i.jsx)(s.h2,{id:"is-null",children:"Is Null"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#is_null",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if a signle argument is null."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-8",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"... WHERE c1 is null\n"})}),"\n",(0,i.jsx)(s.h2,{id:"coalesce",children:"Coalesce"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#coalesce",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Returns the first value, left to right that is not equal to null. If all values are null, a null value is returned."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-9",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"SELECT coalesce(column1, column2) FROM ...\n"})}),"\n",(0,i.jsx)(s.h2,{id:"is-infinite",children:"Is Infinite"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#is_infinite",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if a numeric value is positive or negative infinite. If the value is NaN (0 / 0), or another type, it returns false."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-10",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"SELECT is_infinite(column1) FROM ...\n"})}),"\n",(0,i.jsx)(s.h2,{id:"is-finite",children:"Is Finite"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#is_finite",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if a numeric value is not positive or negative infinite or NaN. If the value is not numeric it returns false."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-11",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"SELECT is_finite(column1) FROM ...\n"})}),"\n",(0,i.jsx)(s.h2,{id:"is-nan",children:"Is NaN"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://substrait.io/extensions/functions_comparison/#is_nan",children:"Substrait definition"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if an exprssion is not a numeric value. A null value returns null as in the substrait definition."}),"\n",(0,i.jsx)(s.h3,{id:"sql-usage-12",children:"SQL Usage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"SELECT is_nan(column1) FROM ...\n"})})]})}function h(e={}){const{wrapper:s}={...(0,l.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>r,a:()=>t});var i=n(7294);const l={},a=i.createContext(l);function t(e){const s=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(a.Provider,{value:s},e.children)}}}]);