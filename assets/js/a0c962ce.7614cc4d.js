"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[2792],{1749:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"expressions/scalarfunctions/string","title":"String Functions","description":"Concat","source":"@site/docs/expressions/scalarfunctions/string.md","sourceDirName":"expressions/scalarfunctions","slug":"/expressions/scalarfunctions/string","permalink":"/flowtide/docs/expressions/scalarfunctions/string","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/expressions/scalarfunctions/string.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Comparison Functions","permalink":"/flowtide/docs/expressions/scalarfunctions/comparison"},"next":{"title":"Rounding Functions","permalink":"/flowtide/docs/expressions/scalarfunctions/rounding"}}');var t=n(4848),r=n(8453);const l={sidebar_position:4},a="String Functions",d={},c=[{value:"Concat",id:"concat",level:2},{value:"SQL Usage",id:"sql-usage",level:3},{value:"Lower",id:"lower",level:2},{value:"SQL Usage",id:"sql-usage-1",level:3},{value:"Upper",id:"upper",level:2},{value:"SQL Usage",id:"sql-usage-2",level:3},{value:"Trim",id:"trim",level:2},{value:"SQL Usage",id:"sql-usage-3",level:3},{value:"LTrim",id:"ltrim",level:2},{value:"SQL Usage",id:"sql-usage-4",level:3},{value:"RTrim",id:"rtrim",level:2},{value:"SQL Usage",id:"sql-usage-5",level:3},{value:"To String",id:"to-string",level:2},{value:"SQL Usage",id:"sql-usage-6",level:3},{value:"Starts with",id:"starts-with",level:2},{value:"SQL Usage",id:"sql-usage-7",level:3},{value:"Substring",id:"substring",level:2},{value:"SQL Usage",id:"sql-usage-8",level:3},{value:"Like",id:"like",level:2},{value:"SQL Usage",id:"sql-usage-9",level:3},{value:"Replace",id:"replace",level:2},{value:"SQL Usage",id:"sql-usage-10",level:3},{value:"String Base64 Encode",id:"string-base64-encode",level:2},{value:"SQL Usage",id:"sql-usage-11",level:3},{value:"String Base64 Decode",id:"string-base64-decode",level:2},{value:"SQL Usage",id:"sql-usage-12",level:3},{value:"Char Length",id:"char-length",level:2},{value:"SQL Usage",id:"sql-usage-13",level:3},{value:"Strpos",id:"strpos",level:2},{value:"SQL Usage",id:"sql-usage-14",level:3},{value:"String split",id:"string-split",level:2},{value:"SQL Usage",id:"sql-usage-15",level:3},{value:"Regexp string split",id:"regexp-string-split",level:2},{value:"SQL Usage",id:"sql-usage-16",level:3},{value:"To Json",id:"to-json",level:2},{value:"SQL Usage",id:"sql-usage-17",level:3},{value:"From Json",id:"from-json",level:2},{value:"SQL Usage",id:"sql-usage-18",level:3},{value:"String Join",id:"string-join",level:2},{value:"SQL Usage",id:"sql-usage-19",level:3}];function h(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"string-functions",children:"String Functions"})}),"\n",(0,t.jsx)(s.h2,{id:"concat",children:"Concat"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#concat",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Concatinates two or more string values together."}),"\n",(0,t.jsx)(s.p,{children:"This function tries and convert non string values into the string type, example:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Input"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Output"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"'hello'"}),(0,t.jsx)(s.td,{children:"String"}),(0,t.jsx)(s.td,{children:"'hello'"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"13"}),(0,t.jsx)(s.td,{children:"Int"}),(0,t.jsx)(s.td,{children:"'13'"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"13.4"}),(0,t.jsx)(s.td,{children:"Float"}),(0,t.jsx)(s.td,{children:"'13.4'"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"Bool"}),(0,t.jsx)(s.td,{children:"'true'"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"If any argument is null, the return value will always be null."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT c1 || ' hello ' || c2 FROM ... \n"})}),"\n",(0,t.jsx)(s.h2,{id:"lower",children:"Lower"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#lower",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the input string in all lowercase characters. If any other type than string is entered, the function will return 'null'."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-1",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT lower(c1) FROM ... \n"})}),"\n",(0,t.jsx)(s.h2,{id:"upper",children:"Upper"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#upper",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the input string in all uppercase characters. If any other type than string is entered, the function will return 'null'."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-2",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT upper(c1) FROM ... \n"})}),"\n",(0,t.jsx)(s.h2,{id:"trim",children:"Trim"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#trim",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Remove whitespaces from both sides of a string"}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-3",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT trim(c1) FROM ... \n"})}),"\n",(0,t.jsx)(s.h2,{id:"ltrim",children:"LTrim"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#ltrim",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Remove whitespaces from the start of a string"}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-4",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT ltrim(c1) FROM ... \n"})}),"\n",(0,t.jsx)(s.h2,{id:"rtrim",children:"RTrim"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#rtrim",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Remove whitespaces from the end of a string"}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-5",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT rtrim(c1) FROM ... \n"})}),"\n",(0,t.jsx)(s.h2,{id:"to-string",children:"To String"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"No substrait definition exists for this function"})}),"\n",(0,t.jsx)(s.p,{children:"Converts different types to a string type."}),"\n",(0,t.jsx)(s.p,{children:"Example output:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Input"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Output"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"'hello'"}),(0,t.jsx)(s.td,{children:"String"}),(0,t.jsx)(s.td,{children:"'hello'"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"13"}),(0,t.jsx)(s.td,{children:"Int"}),(0,t.jsx)(s.td,{children:"'13'"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"13.4"}),(0,t.jsx)(s.td,{children:"Float"}),(0,t.jsx)(s.td,{children:"'13.4'"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"Bool"}),(0,t.jsx)(s.td,{children:"'true'"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-6",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT to_string(c1) FROM ... \n"})}),"\n",(0,t.jsx)(s.h2,{id:"starts-with",children:"Starts with"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#starts_with",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Returns true or false if a string starts with another string.\nIf the data type of either argument is not string, false will be returned."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-7",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT starts_with(c1, 'text') FROM ... \n"})}),"\n",(0,t.jsx)(s.h2,{id:"substring",children:"Substring"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#substring",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Returns a substring where the first argument is the input.\nThe second argument is the start index, and an optional third argument is the length of the substring."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-8",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT substring(c1, 1) FROM ...\nSELECT substring(c1, 1, 5) FROM ...\n"})}),"\n",(0,t.jsx)(s.h2,{id:"like",children:"Like"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#like",children:"Substrait definition"})}),"\n",(0,t.jsxs)(s.p,{children:["Implements sql like expression. This follows SQL Servers implementation of like:\n",(0,t.jsx)(s.a,{href:"https://learn.microsoft.com/en-us/sql/t-sql/language-elements/like-transact-sql?view=sql-server-ver16",children:"SQL Server Like"}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-9",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"... WHERE c1 LIKE '%te' -- starts with\n... WHERE c1 LIKE 'te%' -- ends with\n... WHERE c1 LIKE '%te%' -- contains\n... WHERE c1 LIKE '_te' -- any character\n... WHERE c1 LIKE '!_te' ESCAPE '!' -- set escape character, _ is escaped.\n... WHERE c1 LIKE '[ab]te' -- match character a or b.\n"})}),"\n",(0,t.jsx)(s.h2,{id:"replace",children:"Replace"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#replace",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Replaces all occurences of the substring defined in the second variable with the value defined in the third argument for the string in the first argument."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-10",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"--- Replaces the word 'hello' with the word 'world' in the string c1. \nSELECT replace(c1, 'hello', 'world') FROM ...\n"})}),"\n",(0,t.jsx)(s.h2,{id:"string-base64-encode",children:"String Base64 Encode"}),"\n",(0,t.jsx)(s.p,{children:"Accepts a string as a parameter and will return the base64 encoding as a string."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-11",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT string_base64_encode(c1) FROM ...\n"})}),"\n",(0,t.jsx)(s.h2,{id:"string-base64-decode",children:"String Base64 Decode"}),"\n",(0,t.jsx)(s.p,{children:"Accepts a string in base64 encoding and will return a decoded string."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-12",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT string_base64_decode(c1) FROM ...\n"})}),"\n",(0,t.jsx)(s.h2,{id:"char-length",children:"Char Length"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#char_length",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the number of characters in a string, if the input is not a string or null, a null value is returned."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-13",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT LEN(c1) FROM ...\n"})}),"\n",(0,t.jsx)(s.h2,{id:"strpos",children:"Strpos"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#strpos",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Finds the index of a substring in another string. This function follows the substrait implementation and returns\nindex 1 for the first character."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-14",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT strpos(c1, 'abc') FROM ...\n"})}),"\n",(0,t.jsx)(s.h2,{id:"string-split",children:"String split"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#string_split",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Splits a string into a collection of substrings based on the specified delimiter character."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"If the provided delimiter character is null, the original string will be returned as the only element in the resulting collection."})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"If the provided delimiter character is not a string, null will be returned."})}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-15",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT string_split('a b', ' ') ...\n"})}),"\n",(0,t.jsx)(s.h2,{id:"regexp-string-split",children:"Regexp string split"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://substrait.io/extensions/functions_string/#regexp_string_split",children:"Substrait definition"})}),"\n",(0,t.jsx)(s.p,{children:"Splits a string into a collection of substrings based on the specified pattern."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"If any of the arguments is not string, null will be returned."})}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-16",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT regexp_string_split('a b', '\\s') ...\n"})}),"\n",(0,t.jsx)(s.h2,{id:"to-json",children:"To Json"}),"\n",(0,t.jsx)(s.p,{children:"This function does not have a substrait definition."}),"\n",(0,t.jsx)(s.p,{children:"Converts an object into json stored as a string."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-17",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT to_json(column1) ...\n"})}),"\n",(0,t.jsx)(s.h2,{id:"from-json",children:"From Json"}),"\n",(0,t.jsx)(s.p,{children:"This function does not have a substrait definition."}),"\n",(0,t.jsx)(s.p,{children:"Converts a JSON string to flowtide data objects. It is also possible to use a binary value in utf8 encoding as the input."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-18",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT from_json(myjsoncolumn) ...\n"})}),"\n",(0,t.jsx)(s.h2,{id:"string-join",children:"String Join"}),"\n",(0,t.jsxs)(s.p,{children:["Joins the elements of a list into a single string, using the specified separator between each element. The function ignores any ",(0,t.jsx)(s.code,{children:"NULL"})," values in the list\u2014only non-",(0,t.jsx)(s.code,{children:"NULL"})," elements are included in the final string."]}),"\n",(0,t.jsxs)(s.p,{children:["If the list is ",(0,t.jsx)(s.code,{children:"NULL"}),", the function returns ",(0,t.jsx)(s.code,{children:"NULL"}),". If the list is empty or contains only ",(0,t.jsx)(s.code,{children:"NULL"})," values, the result is an empty string."]}),"\n",(0,t.jsx)(s.p,{children:"This function is useful for concatenating list values (e.g., strings or numbers) into a readable or formatted output."}),"\n",(0,t.jsx)(s.h3,{id:"sql-usage-19",children:"SQL Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT string_join(', ', list_column) FROM ...\n"})})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var i=n(6540);const t={},r=i.createContext(t);function l(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);