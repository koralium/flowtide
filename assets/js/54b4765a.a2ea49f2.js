"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[491],{1448:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"testing/aspiretesting","title":".NET Aspire Testing","description":"If you run your stream with the help of .NET Aspire it may be beneficial to run the tests using the Aspire test framework.","source":"@site/docs/testing/aspiretesting.md","sourceDirName":"testing","slug":"/testing/aspiretesting","permalink":"/flowtide/docs/testing/aspiretesting","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/testing/aspiretesting.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Integration Testing","permalink":"/flowtide/docs/testing/integrationtests"},"next":{"title":"Internal","permalink":"/flowtide/docs/category/internal"}}');var s=n(4848),o=n(8453);const a={sidebar_position:2},r=".NET Aspire Testing",c={},d=[{value:"Add the test information HTTP endpoint",id:"add-the-test-information-http-endpoint",level:2},{value:"Enable the test mode configuration in the Aspire configuration",id:"enable-the-test-mode-configuration-in-the-aspire-configuration",level:2},{value:"Wait for checkpoints in the integration test",id:"wait-for-checkpoints-in-the-integration-test",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"net-aspire-testing",children:".NET Aspire Testing"})}),"\n",(0,s.jsxs)(t.p,{children:["If you run your stream with the help of .NET Aspire it may be beneficial to run the tests using the Aspire test framework.\nThis page describes how ",(0,s.jsx)(t.code,{children:"FlowtideDotNet.TestFramework"})," can help you test your stream more easily."]}),"\n",(0,s.jsx)(t.p,{children:"Testing an aspire project requires using HTTP calls to check the stream status, instead of injecting other type of monitors\nto the stream to check the status. Since this endpoint can contain exception information, this means that the test endpoint could cause a security issue and should only be mapped during tests."}),"\n",(0,s.jsx)(t.h2,{id:"add-the-test-information-http-endpoint",children:"Add the test information HTTP endpoint"}),"\n",(0,s.jsxs)(t.p,{children:["To be able to get information about the stream status such as checkpoint information, you must map\na helper endpoint in your stream application. This is done by calling ",(0,s.jsx)(t.code,{children:"MapFlowtideTestInformation"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'if (builder.Configuration.GetValue<bool>("TEST_MODE"))\n{\n    // If we are in test mode, map the test endpoint\n    app.MapFlowtideTestInformation();\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"enable-the-test-mode-configuration-in-the-aspire-configuration",children:"Enable the test mode configuration in the Aspire configuration"}),"\n",(0,s.jsx)(t.p,{children:"The next step is to add in .NET Aspire configuration that the test mode configuration is enabled:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'var project = builder.AddProject<MyStreamProject>("stream");\n\n...\n\nif (builder.Configuration.GetValue<bool>("test_mode"))\n{\n    project = project.WithEnvironment("TEST_MODE", "true");\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"This enables turning on test mode from the integration tests."}),"\n",(0,s.jsx)(t.h2,{id:"wait-for-checkpoints-in-the-integration-test",children:"Wait for checkpoints in the integration test"}),"\n",(0,s.jsx)(t.p,{children:"The final step is to start checking for checkpoints in the integration tests.\nSince a checkpoint happens after a data change and is considered a stable state, it is best\nto run assertions first after a checkpoint has happened."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'[Fact]\npublic async Task MyTest()\n{\n    var appHost = await DistributedApplicationTestingBuilder.CreateAsync<Projects.MyAspire>([\n        "test_mode=true"\n    ]);\n\n    await using var app = await appHost.BuildAsync();\n    var resourceNotificationService = app.Services.GetRequiredService<ResourceNotificationService>();\n    await app.StartAsync();\n\n    var httpClient = app.CreateHttpClient("my_project_resource_name");\n\n    await resourceNotificationService.WaitForResourceAsync("my_project_resource_name", KnownResourceStates.Running).WaitAsync(TimeSpan.FromSeconds(30));\n\n    // Create the stream http monitor\n    var streamMonitor = new StreamTestHttpMonitor(httpClient, "my_stream_name");\n\n    // Wait for a checkpoint to occur\n    await streamMonitor.WaitForCheckpoint();\n\n    // Assert here against your destination\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you want to test modifying data while the stream is running, it may be beneficial to pause and resume it.\nTo do that, also add ",(0,s.jsx)(t.code,{children:"UseFlowtidePauseResumeEndpoints"})," to the exposed endpoints when testing. Please read ",(0,s.jsx)(t.a,{href:"/flowtide/docs/deployment/pauseresume#pause-and-stop-using-api-endpoint",children:"Pause And Resume"})," for more information."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(6540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);