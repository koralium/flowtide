"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[1329],{8453:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>a});var i=r(6540);const o={},s=i.createContext(o);function n(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),i.createElement(s.Provider,{value:t},e.children)}},9367:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>n,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"operators/filter","title":"Filter Operator","description":"The Filter Operator implements the Filter relation defined in substrait. The Filter operator is stateless and does not need to store any state.","source":"@site/docs/operators/filter.md","sourceDirName":"operators","slug":"/operators/filter","permalink":"/flowtide/docs/operators/filter","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/operators/filter.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Projection Operator","permalink":"/flowtide/docs/operators/projection"},"next":{"title":"Join Operators","permalink":"/flowtide/docs/operators/join"}}');var o=r(4848),s=r(8453);const n={sidebar_position:2},a="Filter Operator",l={},d=[{value:"Metrics",id:"metrics",level:2}];function h(e){const t={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"filter-operator",children:"Filter Operator"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.em,{children:"Filter Operator"})," implements the ",(0,o.jsx)(t.em,{children:"Filter relation"})," defined in ",(0,o.jsx)(t.a,{href:"https://substrait.io/relations/logical_relations/#filter-operation",children:"substrait"}),". The ",(0,o.jsx)(t.em,{children:"Filter operator"})," is stateless and does not need to store any state."]}),"\n",(0,o.jsxs)(t.p,{children:["As defined in substrait, it takes in two properties, ",(0,o.jsx)(t.em,{children:"input"})," which is the operator that feeds the filter with data, and a filter expression that will filter events\nout from the stream. It also implements the common ",(0,o.jsx)(t.em,{children:"Emit"})," field which allows a user to reduce the amount of data outputted by the operator."]}),"\n",(0,o.jsx)(t.h2,{id:"metrics",children:"Metrics"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.em,{children:"Projection Operator"})," has the following metrics:"]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Metric Name"}),(0,o.jsx)(t.th,{children:"Type"}),(0,o.jsx)(t.th,{children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"busy"}),(0,o.jsx)(t.td,{children:"Gauge"}),(0,o.jsx)(t.td,{children:"Value 0-1 on how busy the operator is."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"backpressure"}),(0,o.jsx)(t.td,{children:"Gauge"}),(0,o.jsx)(t.td,{children:"Value 0-1 on how much backpressure the operator has."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"health"}),(0,o.jsx)(t.td,{children:"Gauge"}),(0,o.jsx)(t.td,{children:"Value 0 or 1, if the operator is healthy or not."})]})]})]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsx)(t.p,{children:"At this point, a filter operator will never be unhealthy."})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);