"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[9586],{8124:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"connectors/spicedb","title":"AuthZed/SpiceDB Connector","description":"AuthZed/SpiceDB is an authorization service built on Zanzibar.","source":"@site/docs/connectors/spicedb.md","sourceDirName":"connectors","slug":"/connectors/spicedb","permalink":"/flowtide/docs/connectors/spicedb","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/connectors/spicedb.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"OpenFGA Connector","permalink":"/flowtide/docs/connectors/openfga"},"next":{"title":"Permify Connector","permalink":"/flowtide/docs/connectors/permify"}}');var s=t(4848),r=t(8453);const a={sidebar_position:9},o="AuthZed/SpiceDB Connector",l={},d=[{value:"Sink",id:"sink",level:2},{value:"Events",id:"events",level:3},{value:"Delete existing data if not updated",id:"delete-existing-data-if-not-updated",level:3},{value:"Source",id:"source",level:2},{value:"Materialize/Denormalize Permissions",id:"materializedenormalize-permissions",level:2},{value:"Stop at types",id:"stop-at-types",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"authzedspicedb-connector",children:"AuthZed/SpiceDB Connector"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://authzed.com/",children:"AuthZed"}),"/",(0,s.jsx)(n.a,{href:"https://github.com/authzed/spicedb",children:"SpiceDB"})," is an authorization service built on Zanzibar.\nThis connector allows writing, reading and materializing/denormalizing permissions from SpiceDB."]}),"\n",(0,s.jsx)(n.h2,{id:"sink",children:"Sink"}),"\n",(0,s.jsx)(n.p,{children:"The sink allows inserting data from other sources into SpiceDB."}),"\n",(0,s.jsx)(n.p,{children:"These columns are required to insert data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"subject_type"})," - subject type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"subject_id"})," - identifier of the subject"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"relation"})," - relation name"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"resource_type"})," - resource type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"resource_id"})," - identifier of the resource."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Optional:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"subject_relation"})," - optional subject relation."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To use the ",(0,s.jsx)(n.em,{children:"SpiceDB Sink"})," add the following line to the ",(0,s.jsx)(n.em,{children:"ConnectorManager"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'connectorManager.AddSpiceDbSink("regex pattern for tablename", new SpiceDbSinkOptions\n{\n    Channel = grpcChannel, // Grpc channel used to connect to SpiceDB\n    GetMetadata = () =>\n    {\n        var metadata = new Metadata();\n        // Add any headers etc here.\n        metadata.Add("Authorization", "Bearer {token}");\n        return metadata;\n    }\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"Sql example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INSERT INTO spicedb\nSELECT \n    'user' as subject_type,\n    o.userkey as subject_id,\n    'reader' as relation,\n    'document' as resource_type,\n    o.orderkey as resource_id\nFROM orders o\n"})}),"\n",(0,s.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,s.jsx)(n.p,{children:"The following event listeners exist that can be used to modify or get the current watermark of the stream that has been sent to SpiceDB:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"BeforeWriteRequestFunc"})," - Called before each write, its possible to modify the data before it gets sent here."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"OnWatermarkFunc"})," - Called after a watermark is recieved and the data has been added to SpiceDB, also contains the last recieved zedtoken from SpiceDB."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"OnInitialDataSentFunc"})," - Called the first time data has been written to SpiceDB."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"delete-existing-data-if-not-updated",children:"Delete existing data if not updated"}),"\n",(0,s.jsxs)(n.p,{children:["It is possible to delete existing data in SpiceDB if it is not in the result set of the stream.\nThis is done by passing in the property ",(0,s.jsx)(n.em,{children:"DeleteExistingDataFilter"})," which is the filter of what data to fetch.\nIf your stream say updates resource type ",(0,s.jsx)(n.em,{children:"document"})," and relation ",(0,s.jsx)(n.em,{children:"reader"})," you should pass that in as the filter if you wish\nto delete existing data that is not from the current stream."]}),"\n",(0,s.jsx)(n.p,{children:"This will cause all data to be downloaded into the stream which will cause a slower performance to read the initial data."}),"\n",(0,s.jsx)(n.h2,{id:"source",children:"Source"}),"\n",(0,s.jsx)(n.p,{children:"The source allows reading data from SpiceDB. The following columns are returned:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"subject_type"})," - subject type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"subject_id"})," - identifier of the subject"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"relation"})," - relation name"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"resource_type"})," - resource type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"resource_id"})," - identifier of the resource."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"subject_relation"})," - optional subject relation."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Filter conditions on resource type, relation and subject type will tried to be pushed down in the query to SpiceDB if possible."}),"\n",(0,s.jsx)(n.p,{children:"Example on using the spicedb source:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'connectorManager.AddSpiceDbSource("regex pattern for tablename", new SpiceDbSourceOptions\n{\n    Channel = grpcChannel,\n    GetMetadata = () =>\n    {\n        var metadata = new Metadata();\n        // Add any headers etc here.\n        metadata.Add("Authorization", "Bearer {token}");\n        return metadata;\n    }\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"materializedenormalize-permissions",children:"Materialize/Denormalize Permissions"}),"\n",(0,s.jsx)(n.p,{children:"It is possible to denormalize the relations in a SpiceDB schema based on a permission in a type.\nThis can be useful to add permissions into a search engine or similar where searching should be done based on the users permissions."}),"\n",(0,s.jsx)(n.p,{children:"First a plan must be created:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var viewPermissionPlan = SpiceDbToFlowtide.Convert(schemaText, "document", "view", "spicedb");\n'})}),"\n",(0,s.jsxs)(n.p,{children:["It requires the schema, which can be fetched from the schema service, or loaded for a file.\nThe second argument is the type, and the third is the permission/relation to denormalize.\nThe last argument is which table name should be used, and should be matched in the ",(0,s.jsx)(n.em,{children:"ReadWriteFactory"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Add the plan as a view for sql \nsqlPlanBuilder.AddPlanAsView("authdata", viewPermissionPlan);\n\n// use the view in a query\nsqlPlanBuilder.Sql(@"\nINSERT INTO outputtable\nSELECT \n  subject_type,\n  subject_id,\n  relation,\n  resource_type,\n  resource_id\nFROM authdata\n");\n'})}),"\n",(0,s.jsx)(n.h3,{id:"stop-at-types",children:"Stop at types"}),"\n",(0,s.jsx)(n.p,{children:"It is possible to send in an array of type names where the search should end.\nThis can be useful in scenarios where say an entire company has access to a resource, it can be better to add the company identifier instead of every single user in the company."}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var modelPlan = SpiceDbToFlowtide.Convert(schemaText, "{type name}", "{relation name}", "{input table name}", false, "company");\n'})}),"\n",(0,s.jsx)(n.p,{children:"The relation name will still be the relation name you are filtering on but instead with the object type company and its identifier."}),"\n",(0,s.jsx)(n.p,{children:"It is also possible to allow recursions at stop types to create a flat list. This is useful in scenarios such as a folder\nstructure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"definition folder {\n  relation user: user\n  relation parent: folder\n\n  permission can_view = user + parent->can_view \n}\n\ndefinition file {\n    relation user: user\n    relation folder: folder\n\n    permission can_view = user + folder->can_view\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If one would use ",(0,s.jsx)(n.code,{children:"folder"})," as a stop type at a folder structure like this: ",(0,s.jsx)(n.code,{children:"/folder1/folder2/folder3/file.txt"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"With the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var modelPlan = SpiceDbToFlowtide.Convert(schemaText, "file", "can_view", "{input table name}", true, "folder");\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The result for ",(0,s.jsx)(n.code,{children:"file.txt"})," would become:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"/folder1\n/folder1/folder2\n/folder1/folder2/folder3\n+ any users that have file access\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);