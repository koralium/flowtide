"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[418],{5662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"operators/window","title":"Window Operator","description":"The Window Operator implements the Consistent Partition Window relation defined in Substrait.","source":"@site/docs/operators/window.md","sourceDirName":"operators","slug":"/operators/window","permalink":"/flowtide/docs/operators/window","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/operators/window.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Table Function Operator","permalink":"/flowtide/docs/operators/tablefunction"},"next":{"title":"Expressions","permalink":"/flowtide/docs/category/expressions"}}');var i=n(4848),s=n(8453);const o={sidebar_position:9},d="Window Operator",l={},a=[{value:"Behavior",id:"behavior",level:2},{value:"Metrics",id:"metrics",level:2}];function c(e){const t={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"window-operator",children:"Window Operator"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"Window Operator"})," implements the ",(0,i.jsx)(t.em,{children:"Consistent Partition Window"})," relation defined in ",(0,i.jsx)(t.a,{href:"https://substrait.io/relations/physical_relations/#consistent-partition-window-operation",children:"Substrait"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["This operator supports ",(0,i.jsx)(t.strong,{children:"only one window function per instance"}),". To apply multiple window functions, chain multiple Window Operators sequentially."]}),"\n",(0,i.jsxs)(t.p,{children:["The operator is ",(0,i.jsx)(t.strong,{children:"stateful"})," and relies on two B+ trees:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Persistent Tree"})," \u2013 Stores all rows in the dataset, ordered by partition columns followed by order-by columns."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Temporary Partition Tree"})," \u2013 Tracks which partitions have been updated (not persisted)."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsx)(t.p,{children:"When events are received:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Rows are inserted into the Persistent Tree."}),"\n",(0,i.jsx)(t.li,{children:"If a row is deleted (i.e., an event with negative weight), that row's negative output is sent downstream immediately."}),"\n",(0,i.jsx)(t.li,{children:"The partition key is calculated and recorded in the Temporary Partition Tree."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["For ",(0,i.jsx)(t.strong,{children:"upsert operations"}),", the row is held until a watermark is received, at which point the final calculation is performed."]}),"\n",(0,i.jsxs)(t.p,{children:["When a ",(0,i.jsx)(t.strong,{children:"watermark event"})," is received, the operator:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Iterates over all changed partitions."}),"\n",(0,i.jsx)(t.li,{children:"Applies the configured window function."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The logic for how values are calculated within a partition is delegated to the specific window function implementation."}),"\n",(0,i.jsx)(t.h2,{id:"metrics",children:"Metrics"}),"\n",(0,i.jsx)(t.p,{children:"The Window Operator exposes the following metrics:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Metric Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"busy"}),(0,i.jsx)(t.td,{children:"Gauge"}),(0,i.jsx)(t.td,{children:"Value 0-1 on how busy the operator is."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"backpressure"}),(0,i.jsx)(t.td,{children:"Gauge"}),(0,i.jsx)(t.td,{children:"Value 0-1 on how much backpressure the operator has."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"health"}),(0,i.jsx)(t.td,{children:"Gauge"}),(0,i.jsx)(t.td,{children:"Value 0 or 1, if the operator is healthy or not."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"events"}),(0,i.jsx)(t.td,{children:"Counter"}),(0,i.jsx)(t.td,{children:"How many events the operator outputs."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"events_processed"}),(0,i.jsx)(t.td,{children:"Counter"}),(0,i.jsx)(t.td,{children:"How many events the operator recieves."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>d});var r=n(6540);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);