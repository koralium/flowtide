"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4470],{3905:(e,t,s)=>{s.d(t,{Zo:()=>c,kt:()=>m});var n=s(7294);function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function i(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function a(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?i(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function o(e,t){if(null==e)return{};var s,n,r=function(e,t){if(null==e)return{};var s,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)s=i[n],t.indexOf(s)>=0||(r[s]=e[s]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)s=i[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):a(a({},t),e)),s},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var s=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(s),f=r,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||i;return s?n.createElement(m,a(a({ref:t},c),{},{components:s})):n.createElement(m,a({ref:t},c))}));function m(e,t){var s=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=s.length,a=new Array(i);a[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,a[1]=o;for(var p=2;p<i;p++)a[p]=s[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,s)}f.displayName="MDXCreateElement"},857:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=s(7462),r=(s(7294),s(3905));const i={sidebar_position:3},a="Specialized Expressions",o={unversionedId:"expressions/specializedexpressions",id:"expressions/specializedexpressions",title:"Specialized Expressions",description:"Nested Type Constructor Expressions",source:"@site/docs/expressions/specializedexpressions.md",sourceDirName:"expressions",slug:"/expressions/specializedexpressions",permalink:"/flowtide/docs/expressions/specializedexpressions",draft:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/expressions/specializedexpressions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"List Functions",permalink:"/flowtide/docs/expressions/aggregatefunctions/list"},next:{title:"SQL",permalink:"/flowtide/docs/sql/"}},l={},p=[{value:"Nested Type Constructor Expressions",id:"nested-type-constructor-expressions",level:2},{value:"List",id:"list",level:3},{value:"SQL Usage",id:"sql-usage",level:4},{value:"Map",id:"map",level:3},{value:"SQL Usage",id:"sql-usage-1",level:4},{value:"If Expression",id:"if-expression",level:2},{value:"SQL Usage",id:"sql-usage-2",level:3},{value:"Or List Expression",id:"or-list-expression",level:2},{value:"SQL Usage",id:"sql-usage-3",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...s}=e;return(0,r.kt)(u,(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"specialized-expressions"},"Specialized Expressions"),(0,r.kt)("h2",{id:"nested-type-constructor-expressions"},"Nested Type Constructor Expressions"),(0,r.kt)("h3",{id:"list"},"List"),(0,r.kt)("p",null,"Allows the creation of a list object."),(0,r.kt)("h4",{id:"sql-usage"},"SQL Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT list(col1, col2) FROM ...\n")),(0,r.kt)("h3",{id:"map"},"Map"),(0,r.kt)("p",null,"Allows the creation of a ",(0,r.kt)("em",{parentName:"p"},"map")," object type. A map is a typical 'json' object with property names and values.\nThe map function consists of a list of key value pairs."),(0,r.kt)("h4",{id:"sql-usage-1"},"SQL Usage"),(0,r.kt)("p",null,"The SQL function expects an even number of arguments, the first argument is the key and the second the value for the first key value pair.\nThe third argument is the second pairs key, etc."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT map('keyvalue', col1) FROM ...\nSELECT map(col2, col1) FROM ...\n")),(0,r.kt)("p",null,"The keys will be converted into string. A null value will result in 'null' as the key."),(0,r.kt)("h2",{id:"if-expression"},"If Expression"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://substrait.io/expressions/specialized_record_expressions/#if-expression"},"Substrait definition")),(0,r.kt)("p",null,"An if statement, or in SQL language a case statement."),(0,r.kt)("h3",{id:"sql-usage-2"},"SQL Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    CASE\n        WHEN c1 = 'hello' THEN 1\n        WHEN c1 = 'world' THEN 2\n        ELSE 3\n    END\nFROM ...\n")),(0,r.kt)("h2",{id:"or-list-expression"},"Or List Expression"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://substrait.io/expressions/specialized_record_expressions/#or-list-equality-expression"},"Substrait definition")),(0,r.kt)("p",null,"Checks if a value is equal to any value in a list. This uses Kleene logic for equality."),(0,r.kt)("h3",{id:"sql-usage-3"},"SQL Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"... WHERE column1 IN (1, 5, 17)\n")))}d.isMDXComponent=!0}}]);