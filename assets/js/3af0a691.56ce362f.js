"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[830],{5768:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>a,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"connectors/files","title":"Files Connector","description":"The files connector is experimental and may be subject to change.","source":"@site/docs/connectors/files.md","sourceDirName":"connectors","slug":"/connectors/files","permalink":"/flowtide/docs/connectors/files","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/connectors/files.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Permify Connector","permalink":"/flowtide/docs/connectors/permify"},"next":{"title":"Qdrant connector","permalink":"/flowtide/docs/connectors/qdrant"}}');var l=t(4848),s=t(8453);const d={sidebar_position:11},r="Files Connector",c={},o=[{value:"CSV Files",id:"csv-files",level:2},{value:"Adding the CSV File Source",id:"adding-the-csv-file-source",level:3},{value:"Options",id:"options",level:3},{value:"XML Files",id:"xml-files",level:2},{value:"Adding the Connector",id:"adding-the-connector",level:3},{value:"Options",id:"options-1",level:3},{value:"Text Lines File Source",id:"text-lines-file-source",level:2},{value:"Adding the connector",id:"adding-the-connector-1",level:3},{value:"Options",id:"options-2",level:3}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"files-connector",children:"Files Connector"})}),"\n",(0,l.jsx)(n.admonition,{type:"warning",children:(0,l.jsx)(n.p,{children:"The files connector is experimental and may be subject to change."})}),"\n",(0,l.jsx)(n.p,{children:"The files connector allows a stream to read files from local disk or from a cloud solution into the stream. At this point it is only supported as data sources."}),"\n",(0,l.jsx)(n.p,{children:"To use this connector, you need to install:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"FlowtideDotNet.Connector.Files"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"csv-files",children:"CSV Files"}),"\n",(0,l.jsx)(n.p,{children:"The CSV File connector allows ingesting structured data from CSV files into a Flowtide stream. It\u2019s ideal for batch-style file processing and can be configured to read static files or continuously monitor for new deltas."}),"\n",(0,l.jsx)(n.h3,{id:"adding-the-csv-file-source",children:"Adding the CSV File Source"}),"\n",(0,l.jsxs)(n.p,{children:["Use the ",(0,l.jsx)(n.code,{children:"AddCsvFileSource"})," method to register the connector as a source with a specific table name."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:'connectorManager.AddCsvFileSource("my_csv_table", new CsvFileOptions\n{\n    FileStorage = Files.Of.LocalDisk("./csvdata"),\n    CsvColumns = new List<string> { "id", "name", "email" },\n    GetInitialFiles = async () => new[] { "data.csv" }\n});\n'})}),"\n",(0,l.jsx)(n.p,{children:"You can now query your CSV file directly:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM my_csv_table\n"})}),"\n",(0,l.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Name"}),(0,l.jsx)(n.th,{children:"Description"}),(0,l.jsx)(n.th,{children:"Required"}),(0,l.jsx)(n.th,{children:"Default"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"FileStorage"}),(0,l.jsx)(n.td,{children:"Storage backend to use (e.g., local disk, Azure Blob, etc.)."}),(0,l.jsx)(n.td,{children:"Yes"}),(0,l.jsx)(n.td,{children:"-"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"CsvColumns"}),(0,l.jsx)(n.td,{children:"List of column names in the CSV files."}),(0,l.jsx)(n.td,{children:"Yes"}),(0,l.jsx)(n.td,{children:"-"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Delimiter"}),(0,l.jsx)(n.td,{children:"Delimiter used in the CSV files."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"','"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"GetInitialFiles"}),(0,l.jsx)(n.td,{children:"Function that returns the initial list of files to load."}),(0,l.jsx)(n.td,{children:"Yes"}),(0,l.jsx)(n.td,{children:"-"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"OutputSchema"}),(0,l.jsxs)(n.td,{children:["Optional schema for output columns and types. If not set, it is inferred from ",(0,l.jsx)(n.code,{children:"CsvColumns"}),"."]}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"BeforeReadFile"}),(0,l.jsx)(n.td,{children:"Hook to execute before reading each file. Allows custom state preperation."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"BeforeBatch"}),(0,l.jsx)(n.td,{children:"Hook before reading a batch of files. Useful for shared setup per batch."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"ModifyRow"}),(0,l.jsx)(n.td,{children:"Hook to modify row content before transformation."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"InitialWeightFunction"}),(0,l.jsx)(n.td,{children:"Optional weight function for initial files (used to mark deletes, default is 1)."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"DeltaCsvColumns"}),(0,l.jsx)(n.td,{children:"Used in delta mode. List of column names in the delta csv files."}),(0,l.jsx)(n.td,{children:"If Delta"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"DeltaWeightFunction"}),(0,l.jsx)(n.td,{children:"Weight function for delta files."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"DeltaGetNextFile"}),(0,l.jsx)(n.td,{children:"Function to fetch the next delta file. Enables incremental data loading."}),(0,l.jsx)(n.td,{children:"If Delta"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"DeltaInterval"}),(0,l.jsx)(n.td,{children:"Interval for polling new delta files."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"FilesHaveHeader"}),(0,l.jsx)(n.td,{children:"Whether the CSV files include a header row."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"false"})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"xml-files",children:"XML Files"}),"\n",(0,l.jsx)(n.p,{children:"The XML File Source Connector allows you to ingest structured data from XML files using a defined XML schema (XSD). Each XML file is parsed using the provided schema, and a specific element is used to represent rows of data."}),"\n",(0,l.jsx)(n.h3,{id:"adding-the-connector",children:"Adding the Connector"}),"\n",(0,l.jsxs)(n.p,{children:["To add the XML file source connector to the ",(0,l.jsx)(n.code,{children:"ConnectorManager"}),", use the ",(0,l.jsx)(n.code,{children:"AddXmlFileSource"})," method:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:'connectorManager.AddXmlFileSource("my_xml_table", new XmlFileOptions()\n{\n    FileStorage = Files.Of.LocalDisk("./xmldata"),\n    XmlSchema = File.ReadAllText("schemas/invoice.xsd"),\n    ElementName = "Invoice",\n    GetInitialFiles = async (storage, state) => new[] { "invoices1.xml", "invoices2.xml" }\n});\n'})}),"\n",(0,l.jsx)(n.p,{children:"Once registered, the connector can be queried like any other source in Flowtide:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM my_xml_table\n"})}),"\n",(0,l.jsx)(n.h3,{id:"options-1",children:"Options"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Name"}),(0,l.jsx)(n.th,{children:"Description"}),(0,l.jsx)(n.th,{children:"Required"}),(0,l.jsx)(n.th,{children:"Default"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"FileStorage"}),(0,l.jsx)(n.td,{children:"Storage backend where XML files are located (e.g., local disk, Azure Blob, S3)."}),(0,l.jsx)(n.td,{children:"Yes"}),(0,l.jsx)(n.td,{children:"-"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"XmlSchema"}),(0,l.jsx)(n.td,{children:"The XML Schema Definition (XSD) that describes the structure of the XML data."}),(0,l.jsx)(n.td,{children:"Yes"}),(0,l.jsx)(n.td,{children:"-"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"ElementName"}),(0,l.jsx)(n.td,{children:"The name of the XML element to treat as a row in the result set."}),(0,l.jsx)(n.td,{children:"Yes"}),(0,l.jsx)(n.td,{children:"-"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"GetInitialFiles"}),(0,l.jsx)(n.td,{children:"Function that returns a list of XML file paths to load on startup."}),(0,l.jsx)(n.td,{children:"Yes"}),(0,l.jsx)(n.td,{children:"-"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"BeforeBatch"}),(0,l.jsx)(n.td,{children:"Optional hook to run before each batch is processed."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"DeltaGetNextFiles"}),(0,l.jsx)(n.td,{children:"Function to fetch the next delta files. Enables incremental data loading."}),(0,l.jsx)(n.td,{children:"If Delta"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"DeltaInterval"}),(0,l.jsx)(n.td,{children:"Interval for polling new delta files."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"ExtraColumns"}),(0,l.jsx)(n.td,{children:"Optional list of extra columns"}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"text-lines-file-source",children:"Text Lines File Source"}),"\n",(0,l.jsx)(n.p,{children:"The Text Lines File Source allows you to ingest line-based files into a Flowtide stream. Each line in the file is treated as an individual row, and metadata such as the file name is also made available as a column. This connector is useful for processing logs, newline-delimited JSON, or simple flat text files."}),"\n",(0,l.jsx)(n.h3,{id:"adding-the-connector-1",children:"Adding the connector"}),"\n",(0,l.jsxs)(n.p,{children:["To register the connector in your ",(0,l.jsx)(n.code,{children:"ConnectorManager"}),", use the ",(0,l.jsx)(n.code,{children:"AddTextLinesFileSource"})," extension method:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:'connectorManager.AddTextLinesFileSource("my_text_lines", new TextLinesFileOptions()\n{\n    FileStorage = Files.Of.LocalDisk("./logdata"),\n    GetInitialFiles = async (fs, state) => new[] { "events.log" }\n});\n'})}),"\n",(0,l.jsx)(n.p,{children:"Once registered, you can query it using Flowtide:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT fileName, value FROM my_text_lines\n"})}),"\n",(0,l.jsx)(n.p,{children:"This will return each line in the file as a row with two columns:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"fileName"}),": The name of the file that the line came from."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"value"}),": The content of the line."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"options-2",children:"Options"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Name"}),(0,l.jsx)(n.th,{children:"Description"}),(0,l.jsx)(n.th,{children:"Required"}),(0,l.jsx)(n.th,{children:"Default"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"FileStorage"}),(0,l.jsx)(n.td,{children:"Storage backend to read files from (e.g., local disk, Azure Blob, S3)."}),(0,l.jsx)(n.td,{children:"Yes"}),(0,l.jsx)(n.td,{children:"-"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"GetInitialFiles"}),(0,l.jsx)(n.td,{children:"Function returning initial set of files to read during startup."}),(0,l.jsx)(n.td,{children:"Yes"}),(0,l.jsx)(n.td,{children:"-"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"DeltaGetNextFiles"}),(0,l.jsx)(n.td,{children:"Optional function to return new files to ingest over time."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"DeltaInterval"}),(0,l.jsx)(n.td,{children:"Optional interval for polling for new files."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"BeforeBatch"}),(0,l.jsx)(n.td,{children:"Hook to run before each batch. Can be used to prepare state."}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"ExtraColumns"}),(0,l.jsx)(n.td,{children:"Optional list of extra columns"}),(0,l.jsx)(n.td,{children:"No"}),(0,l.jsx)(n.td,{children:"null"})]})]})]})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var i=t(6540);const l={},s=i.createContext(l);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);