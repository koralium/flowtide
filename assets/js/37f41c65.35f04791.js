"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8573],{5691:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=a(5893),s=a(1151);const i={sidebar_position:3},r="Create View",o={id:"sql/createview",title:"Create View",description:"The create view command allows you to define a reusable sub-plan.",source:"@site/docs/sql/createview.md",sourceDirName:"sql",slug:"/sql/createview",permalink:"/flowtide/docs/sql/createview",draft:!1,unlisted:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/sql/createview.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Create Table",permalink:"/flowtide/docs/sql/createtable"},next:{title:"Select",permalink:"/flowtide/docs/sql/select/"}},l={},c=[{value:"Buffered view",id:"buffered-view",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"create-view",children:"Create View"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.em,{children:"create view"})," command allows you to define a reusable sub-plan.\nWhen the SQL is converted into substrait, the view plan is added as a relation, and any usage of the view results in a ",(0,n.jsx)(t.a,{href:"https://substrait.io/relations/logical_relations/#reference-operator",children:"Reference Relation"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"If the same data should be accessable in multiple parts in a stream, creating a view is helpful to reduce having to redo the computation."}),"\n",(0,n.jsx)(t.p,{children:"Example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"CREATE VIEW testview AS\nSELECT c1 + 1 as column FROM testtable;\n\nINSERT INTO outputtable\nSELECT column FROM testview;\n"})}),"\n",(0,n.jsx)(t.h2,{id:"buffered-view",children:"Buffered view"}),"\n",(0,n.jsx)(t.p,{children:"It is possible to create a buffered view.\nIt is a view that collects all the output from the view in to temporary storage and waits for a watermark."}),"\n",(0,n.jsxs)(t.p,{children:["This can reduce the output from the view in situations where data is updated regularly but gives the same output value.\nOne example is when a column value is based on ",(0,n.jsx)(t.em,{children:"gettimestamp"})," such as ",(0,n.jsx)(t.em,{children:"gettimestamp() > date"})," which will give the same output\nthe majority of the time. The buffered view will then only give out the changed rows, and can reduce computational load in the result of the stream."]}),"\n",(0,n.jsxs)(t.p,{children:["It adds a ",(0,n.jsx)(t.a,{href:"/docs/operators/buffer",children:"buffer operator"})," at the end of the view."]}),"\n",(0,n.jsx)(t.p,{children:"Example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"CREATE VIEW buffered WITH (BUFFERED = true) AS\nSELECT\n    CASE WHEN orderdate < gettimestamp() THEN true ELSE false END as active\nFROM orders;\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>o,a:()=>r});var n=a(7294);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);