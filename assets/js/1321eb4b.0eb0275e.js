"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5618],{1723:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var i=t(5893),a=t(1151);const s={sidebar_position:3},o="Elasticsearch Connector",c={id:"connectors/elasticsearch",title:"Elasticsearch Connector",description:"The ElasticsSarch connector allows you to insert data into ElasticSearch.",source:"@site/docs/connectors/elasticsearch.md",sourceDirName:"connectors",slug:"/connectors/elasticsearch",permalink:"/flowtide/docs/connectors/elasticsearch",draft:!1,unlisted:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/connectors/elasticsearch.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"MongoDB Connector",permalink:"/flowtide/docs/connectors/mongodb"},next:{title:"Kafka Connector",permalink:"/flowtide/docs/connectors/kafka"}},r={},l=[{value:"Sink",id:"sink",level:2},{value:"Example",id:"example",level:3},{value:"Set alias on initial data completion",id:"set-alias-on-initial-data-completion",level:3}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"elasticsearch-connector",children:"Elasticsearch Connector"}),"\n",(0,i.jsx)(n.p,{children:"The ElasticsSarch connector allows you to insert data into ElasticSearch.\nThere is only a sink operator implemented, and there is no plans yet to support a source."}),"\n",(0,i.jsx)(n.h2,{id:"sink",children:"Sink"}),"\n",(0,i.jsx)(n.p,{children:"The ElasticSearch sink allows insertion into an index."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"All ElasticSearch insertions must contain a column called '_id' this column is the unique identifier in the elasticsearch index.\nThis field will not be added to the source fields."})}),"\n",(0,i.jsxs)(n.p,{children:["To use the ",(0,i.jsx)(n.em,{children:"ElasticSearch Sink"})," add the following line to the ",(0,i.jsx)(n.em,{children:"ConnectorManager"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'connectorManager.AddElasticsearchSink("*", elasticSearchConnectionSettings);\n'})}),"\n",(0,i.jsx)(n.p,{children:"The table name in the write relation becomes the index the sink writes to."}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Having a column named '_id' is required for the sink to function."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'sqlBuilder.Sql(@"\n    INSERT into elastic_index_name\n    SELECT userKey as _id, userKey, companyId, firstName, lastName \n    FROM users\n");\n\nconnectorManager.AddElasticsearchSink("*", elasticSearchConnectionSettings);\n\n...\n'})}),"\n",(0,i.jsx)(n.h3,{id:"set-alias-on-initial-data-completion",children:"Set alias on initial data completion"}),"\n",(0,i.jsxs)(n.p,{children:["One way to integrate with elasticsearch is to create a new index for each new stream version and change an alias to point to the new index.\nThis is possible by using the ",(0,i.jsx)(n.em,{children:"GetIndexNameFunc"})," and ",(0,i.jsx)(n.em,{children:"OnInitialDataSent"})," functions in the options."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'connectorManager.AddElasticsearchSink("*", new FlowtideDotNet.Connector.ElasticSearch.FlowtideElasticsearchOptions()\n{\n    ConnectionSettings = connectionSettings,\n    CustomMappings = (props) =>\n    {\n        // Add cusotm mappings\n    },\n    GetIndexNameFunc = (writeRelation) =>\n    {\n        // Set an index name that will be unique for this run\n        // The index name must be possible to be recovered between crashes to write to the same index\n        return $"{writeRelation.NamedObject.DotSeperated}-{tagVersion}";\n    },\n    OnInitialDataSent = async (client, writeRelation, indexName) =>\n    {\n        var aliasName = writeRelation.NamedObject.DotSeperated;\n        // Get indices that the alias already points to.\n        var oldIndices = await client.GetIndicesPointingToAliasAsync(aliasName);\n        // Add the index to the alias\n        var putAliasResponse = await client.Indices.PutAliasAsync(indexName, aliasName);\n        \n        if (putAliasResponse.IsValid)\n        {\n            // Remove all old indices that existed on the alias\n            foreach (var oldIndex in oldIndices)\n            {\n                await client.Indices.DeleteAsync(oldIndex);\n            }\n        }\n        else\n        {\n            throw new InvalidOperationException(putAliasResponse.ServerError.Error.StackTrace);\n        }\n    },\n});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>o});var i=t(7294);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);