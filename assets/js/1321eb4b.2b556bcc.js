"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[5567],{4187:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"connectors/elasticsearch","title":"Elasticsearch Connector","description":"The ElasticsSarch connector allows you to insert data into ElasticSearch.","source":"@site/docs/connectors/elasticsearch.md","sourceDirName":"connectors","slug":"/connectors/elasticsearch","permalink":"/flowtide/docs/connectors/elasticsearch","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/connectors/elasticsearch.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"CosmosDB Connector","permalink":"/flowtide/docs/connectors/cosmosdb"},"next":{"title":"Kafka Connector","permalink":"/flowtide/docs/connectors/kafka"}}');var s=t(4848),a=t(8453);const o={sidebar_position:3},c="Elasticsearch Connector",r={},l=[{value:"Sink",id:"sink",level:2},{value:"Example",id:"example",level:3},{value:"Set alias on initial data completion",id:"set-alias-on-initial-data-completion",level:3}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"elasticsearch-connector",children:"Elasticsearch Connector"})}),"\n",(0,s.jsx)(n.p,{children:"The ElasticsSarch connector allows you to insert data into ElasticSearch.\nThere is only a sink operator implemented, and there is no plans yet to support a source."}),"\n",(0,s.jsx)(n.h2,{id:"sink",children:"Sink"}),"\n",(0,s.jsx)(n.p,{children:"The ElasticSearch sink allows insertion into an index."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"All ElasticSearch insertions must contain a column called '_id' this column is the unique identifier in the elasticsearch index.\nThis field will not be added to the source fields."})}),"\n",(0,s.jsxs)(n.p,{children:["To use the ",(0,s.jsx)(n.em,{children:"ElasticSearch Sink"})," add the following line to the ",(0,s.jsx)(n.em,{children:"ConnectorManager"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'connectorManager.AddElasticsearchSink("*", new FlowtideElasticsearchOptions()\n{\n    ConnectionSettings = () => new ElasticsearchClientSettings(new Uri(...))\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"The table name in the write relation becomes the index the sink writes to. The connection settings are a function to allow the usage of rolling passwords when connecting to elasticsearch."}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"Having a column named '_id' is required for the sink to function."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'sqlBuilder.Sql(@"\n    INSERT into elastic_index_name\n    SELECT userKey as _id, userKey, companyId, firstName, lastName \n    FROM users\n");\n\nconnectorManager.AddElasticsearchSink("*", new FlowtideElasticsearchOptions()\n{\n    ConnectionSettings = () => new ElasticsearchClientSettings(new Uri(...))\n});\n\n...\n'})}),"\n",(0,s.jsx)(n.h3,{id:"set-alias-on-initial-data-completion",children:"Set alias on initial data completion"}),"\n",(0,s.jsxs)(n.p,{children:["One way to integrate with elasticsearch is to create a new index for each new stream version and change an alias to point to the new index.\nThis is possible by using the ",(0,s.jsx)(n.em,{children:"GetIndexNameFunc"})," and ",(0,s.jsx)(n.em,{children:"OnInitialDataSent"})," functions in the options."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'connectorManager.AddElasticsearchSink("*", new FlowtideElasticsearchOptions()\n{\n    ConnectionSettings = () => connectionSettings,\n    CustomMappings = (props) =>\n    {\n        // Add cusotm mappings\n    },\n    GetIndexNameFunc = (writeRelation) =>\n    {\n        // Set an index name that will be unique for this run\n        // The index name must be possible to be recovered between crashes to write to the same index\n        return $"{writeRelation.NamedObject.DotSeperated}-{tagVersion}";\n    },\n    OnInitialDataSent = async (client, writeRelation, indexName) =>\n    {\n        var aliasName = writeRel.NamedObject.DotSeperated;\n        var getAliasResponse = await client.Indices.GetAliasAsync(new Elastic.Clients.Elasticsearch.IndexManagement.GetAliasRequest(name: aliasName));\n\n        var putAliasResponse = await client.Indices.PutAliasAsync(indexName, writeRel.NamedObject.DotSeperated);\n\n        var oldIndices = getAliasResponse.Aliases.Keys.ToList();\n        if (putAliasResponse.IsSuccess())\n        {\n            foreach (var oldIndex in oldIndices)\n            {\n                if (oldIndex != indexName)\n                {\n                    await client.Indices.DeleteAsync(oldIndex);\n                }\n            }\n        }\n        else\n        {\n            throw new InvalidOperationException(putAliasResponse.ElasticsearchServerError!.Error.StackTrace);\n        }\n    },\n});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(6540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);