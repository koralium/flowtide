"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[3678],{2959:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"expressions/tablefunctions/generic","title":"Generic Functions","description":"Unnest","source":"@site/docs/expressions/tablefunctions/generic.md","sourceDirName":"expressions/tablefunctions","slug":"/expressions/tablefunctions/generic","permalink":"/flowtide/docs/expressions/tablefunctions/generic","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/expressions/tablefunctions/generic.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Table Functions","permalink":"/flowtide/docs/expressions/tablefunctions/"},"next":{"title":"Specialized Expressions","permalink":"/flowtide/docs/expressions/specializedexpressions"}}');var s=t(4848),l=t(8453);const r={sidebar_position:1},o="Generic Functions",d={},a=[{value:"Unnest",id:"unnest",level:2},{value:"SQL Usage",id:"sql-usage",level:3},{value:"In a <em>FROM</em> statement",id:"in-a-from-statement",level:4},{value:"With a left join",id:"with-a-left-join",level:4},{value:"Left join with a condition",id:"left-join-with-a-condition",level:4},{value:"Inner join",id:"inner-join",level:4}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"generic-functions",children:"Generic Functions"})}),"\n",(0,s.jsx)(n.h2,{id:"unnest",children:"Unnest"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"There is not substrait definition for unnest"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extension URI:"})," /functions_table_generic.yaml"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extension Name:"})," unnest"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Unnest is a table function which takes in one argument that can be a list of element or a map.\nIf it is a list then it returns one row for each entry in the list.\nIf it is a map, it will return an object with that looks as the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{ key: "fieldName", value: fieldValue }\n'})}),"\n",(0,s.jsx)(n.p,{children:"If it is a list, it will return the element as it was in the list."}),"\n",(0,s.jsx)(n.p,{children:'An example with a list would be the list [1, "test", 3] returns three rows with values:'}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{children:"Value"})})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{children:"1"})}),(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{children:'"test"'})}),(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{children:"3"})})]})]}),"\n",(0,s.jsxs)(n.p,{children:["In the case of an object ",(0,s.jsx)(n.em,{children:'{ field1: "test", field2: "test2" }'})," it would return:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{children:"Value"})})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{children:'{ key: "field1", value: "test" }'})}),(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{children:'{ key: "field2", value: "test2" }'})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"sql-usage",children:"SQL Usage"}),"\n",(0,s.jsxs)(n.h4,{id:"in-a-from-statement",children:["In a ",(0,s.jsx)(n.em,{children:"FROM"})," statement"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"--- Returns three rows with 1, 2, 3 as val\nSELECT val FROM UNNEST(list(1,2,3)) val\n"})}),"\n",(0,s.jsx)(n.h4,{id:"with-a-left-join",children:"With a left join"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \n  id, \n  element_value \nFROM documents d\nLEFT JOIN UNNEST(d.list) element_value\n"})}),"\n",(0,s.jsx)(n.p,{children:"When used in a LEFT JOIN, rows are still returned even if the list is empty."}),"\n",(0,s.jsx)(n.h4,{id:"left-join-with-a-condition",children:"Left join with a condition"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \n  id, \n  element_value \nFROM documents d\nLEFT JOIN UNNEST(d.list) element_value ON element_value = 123\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the above example all rows are returned but ",(0,s.jsx)(n.em,{children:"element_value"})," is only set if it is equal to ",(0,s.jsx)(n.em,{children:"123"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"inner-join",children:"Inner join"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \n  id, \n  element_value \nFROM documents d\nINNER JOIN UNNEST(d.list) element_value\n"})}),"\n",(0,s.jsx)(n.p,{children:"When used in an INNER JOIN, only rows that have elements in the list will be returned.\nInner join works the same with conditions as left joins, but rows are not returned with a null value if not matched to the condition."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},l=i.createContext(s);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);