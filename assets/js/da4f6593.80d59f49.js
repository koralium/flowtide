"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3229],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(r),d=o,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return r?n.createElement(h,a(a({ref:t},s),{},{components:r})):n.createElement(h,a({ref:t},s))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4163:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:3},a="Azure Monitor",l={unversionedId:"monitoring/azuremonitor",id:"monitoring/azuremonitor",title:"Azure Monitor",description:"This section describes how to export monitoring data to Azure Monitor. It will show both how to export metrics, and also health check data.",source:"@site/docs/monitoring/azuremonitor.md",sourceDirName:"monitoring",slug:"/monitoring/azuremonitor",permalink:"/flowtide/docs/monitoring/azuremonitor",draft:!1,editUrl:"https://github.com/koralium/flowtide/tree/main/docs/docs/monitoring/azuremonitor.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Prometheus",permalink:"/flowtide/docs/monitoring/prometheus"},next:{title:"Operators",permalink:"/flowtide/docs/category/operators"}},c={},p=[{value:"Metrics export",id:"metrics-export",level:2},{value:"Health check export",id:"health-check-export",level:2},{value:"Sample",id:"sample",level:2}],s={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"azure-monitor"},"Azure Monitor"),(0,o.kt)("p",null,"This section describes how to export monitoring data to ",(0,o.kt)("em",{parentName:"p"},"Azure Monitor"),". It will show both how to export metrics, and also health check data."),(0,o.kt)("h2",{id:"metrics-export"},"Metrics export"),(0,o.kt)("p",null,"To export metrics information, you need to install the following nuget packages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"OpenTelemetry.Extensions.Hosting"),(0,o.kt)("li",{parentName:"ul"},"Azure.Monitor.OpenTelemetry.Exporter")),(0,o.kt)("p",null,"Next in your ",(0,o.kt)("em",{parentName:"p"},"Program.cs")," add the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'builder.Services.AddOpenTelemetry()\n    .WithMetrics(builder =>\n    {\n        builder.AddAzureMonitorMetricExporter(o =>\n        {\n            o.ConnectionString = "{your connection string}";\n        });\n        builder.AddView((instrument) =>\n        {\n            return new MetricStreamConfiguration()\n            {\n                Name = $"{instrument.Meter.Name}.{instrument.Name}"\n            };\n        });\n        builder.AddMeter("flowtide.*");\n    });\n')),(0,o.kt)("p",null,"Replace ",(0,o.kt)("em",{parentName:"p"},"{your connection string}")," with your application insights connection string. This will then start uploading custom metrics to your Application Insights in Azure Monitor."),(0,o.kt)("h2",{id:"health-check-export"},"Health check export"),(0,o.kt)("p",null,"If you want to publish/export health check information, install the following nuget package:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"AspNetCore.HealthChecks.Publisher.ApplicationInsights")),(0,o.kt)("p",null,"Add the following to your ",(0,o.kt)("em",{parentName:"p"},"Program.cs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'builder.Services.AddHealthChecks()\n    .AddFlowtideCheck()\n    .AddApplicationInsightsPublisher("{your connection string}");\n')),(0,o.kt)("p",null,"Replace ",(0,o.kt)("em",{parentName:"p"},"{your connection string}")," with your application insights connection string. You should now see custom events being published to Application Insights\nwith health check information."),(0,o.kt)("h2",{id:"sample"},"Sample"),(0,o.kt)("p",null,"A sample application exist for both setups in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/koralium/flowtide/tree/main/samples/MonitoringAzureMonitor"},"github"),"."))}m.isMDXComponent=!0}}]);