"use strict";(self.webpackChunkflowtide=self.webpackChunkflowtide||[]).push([[9067],{7412:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"internal/storage/bplustree","title":"B+ Tree","description":"The B+ tree is used in almost all operators that require state management of rows, for instance in a join which must keep track of rows from the left input and right input.","source":"@site/docs/internal/storage/bplustree.md","sourceDirName":"internal/storage","slug":"/internal/storage/bplustree","permalink":"/flowtide/docs/internal/storage/bplustree","draft":false,"unlisted":false,"editUrl":"https://github.com/koralium/flowtide/tree/main/docs/docs/internal/storage/bplustree.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Persistent Storage Rules","permalink":"/flowtide/docs/internal/storage/persistentrules"},"next":{"title":"Object State","permalink":"/flowtide/docs/internal/storage/objectstate"}}');var a=r(4848),i=r(8453);const s={sidebar_position:1},o="B+ Tree",l={},c=[{value:"Upsert",id:"upsert",level:2},{value:"Delete",id:"delete",level:2},{value:"Read-Modify-Write (RMW)",id:"read-modify-write-rmw",level:2},{value:"Get Value",id:"get-value",level:2},{value:"Iterating over the values",id:"iterating-over-the-values",level:2},{value:"Commit",id:"commit",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"b-tree",children:"B+ Tree"})}),"\n",(0,a.jsx)(t.p,{children:"The B+ tree is used in almost all operators that require state management of rows, for instance in a join which must keep track of rows from the left input and right input."}),"\n",(0,a.jsxs)(t.p,{children:["A B+ tree can be created in an operator by calling ",(0,a.jsx)(t.code,{children:"GetOrCreateTree"})," from the ",(0,a.jsx)(t.code,{children:"IStateManagerClient"})," during ",(0,a.jsx)(t.code,{children:"InitializeOrRestore"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"Example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'protected override async Task InitializeOrRestore(JoinState? state, IStateManagerClient stateManagerClient)\n{\n    _leftTree = await stateManagerClient.GetOrCreateTree("left",\n        new BPlusTreeOptions<ColumnRowReference, JoinWeights, ColumnKeyStorageContainer, JoinWeightsValueContainer>()\n        {\n            Comparer = _leftInsertComparer,\n            KeySerializer = new ColumnStoreSerializer(_mergeJoinRelation.Left.OutputLength, MemoryAllocator),\n            ValueSerializer = new JoinWeightsSerializer(MemoryAllocator),\n            UseByteBasedPageSizes = true,\n            MemoryAllocator = MemoryAllocator\n        });\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"The tree requires four generic parameters:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["The key type, in the example above it is ",(0,a.jsx)(t.code,{children:"ColumnRowReference"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["Value type, in the example above ",(0,a.jsx)(t.code,{children:"JoinWeights"}),"."]}),"\n",(0,a.jsx)(t.li,{children:"The storage solution for the keys, this allows to optimize the storage of the keys."}),"\n",(0,a.jsx)(t.li,{children:"The storage solution for the values, this allows to optimize the storage of the values."}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"upsert",children:"Upsert"}),"\n",(0,a.jsx)(t.p,{children:"Upsert is used to insert or update data."}),"\n",(0,a.jsx)(t.p,{children:"Example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'// if the tree has int as key, and string as value\nawait tree.Upsert(1, "Hello");\n'})}),"\n",(0,a.jsx)(t.h2,{id:"delete",children:"Delete"}),"\n",(0,a.jsx)(t.p,{children:"Deletes the data for a key."}),"\n",(0,a.jsx)(t.p,{children:"Example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"await tree.Delete(1);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"read-modify-write-rmw",children:"Read-Modify-Write (RMW)"}),"\n",(0,a.jsx)(t.p,{children:"Allows reading and then modifiying the data, this can result in a 'none', 'upsert' or 'delete' operation."}),"\n",(0,a.jsx)(t.p,{children:"Example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'await tree.RMW(1, "hello", (inputValue, currentValue, found) => {\n    if (found && inputValue == null) {\n        return (default, GenericWriteOperation.Delete);\n    }\n    return (inputValue, GenericWriteOperation.Upsert);\n});\n'})}),"\n",(0,a.jsx)(t.h2,{id:"get-value",children:"Get Value"}),"\n",(0,a.jsx)(t.p,{children:"Returns the value for a key."}),"\n",(0,a.jsx)(t.p,{children:"Example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"var (found, value) = await tree.GetValue(1);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"iterating-over-the-values",children:"Iterating over the values"}),"\n",(0,a.jsxs)(t.p,{children:["Since this is a B+ tree, one of the main uses is to iterate over the values in the tree.\nThis is done with the ",(0,a.jsx)(t.code,{children:"CreateIterator"})," method."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"var iterator = tree.CreateIterator();\n"})}),"\n",(0,a.jsxs)(t.p,{children:["There are three methods on the iterator, ",(0,a.jsx)(t.code,{children:"SeekFirst"})," which finds the most left value, ",(0,a.jsx)(t.code,{children:"Seek"})," locates the position of a key, and ",(0,a.jsx)(t.code,{children:"Reset"})," which resets the iterator."]}),"\n",(0,a.jsx)(t.p,{children:"Full example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"var iterator = tree.CreateIterator();\nawait iterator.Seek(3);\n\n// Iterate over each page, this is async since it might fetch data from persistent storage.\nawait foreach(var page in iterator) {\n    // Iterate over the key values in that page\n    foreach (var keyValuePair in page) {\n        \n    }\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"commit",children:"Commit"}),"\n",(0,a.jsxs)(t.p,{children:["When data has been written, it is not yet persisted. To persist the data one must call ",(0,a.jsx)(t.code,{children:"Commit"}),".\nThis is done in the ",(0,a.jsx)(t.code,{children:"OnCheckpoint"})," method in an operator.\nBut if the tree is used to store temporary data, ",(0,a.jsx)(t.code,{children:"Commit"})," should not be called."]}),"\n",(0,a.jsx)(t.p,{children:"Example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"public override async Task<OperatorState> OnCheckpoint()\n{\n    await _tree.Commit();\n    return new OperatorState();\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>o});var n=r(6540);const a={},i=n.createContext(a);function s(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);