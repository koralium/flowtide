{"searchDocs":[{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/flowtide/blog/first-blog-post","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/flowtide/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":"","version":null},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/flowtide/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"Welcome","type":0,"sectionRef":"#","url":"/flowtide/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":"","version":null},{"title":"SQL Server Connector","type":0,"sectionRef":"#","url":"/flowtide/docs/Connectors/sqlserver","content":"","keywords":"","version":"Next"},{"title":"Source​","type":1,"pageTitle":"SQL Server Connector","url":"/flowtide/docs/Connectors/sqlserver#source","content":"The SQL Server Source allows Flowtide to fetch rows and updates from a SQL Server table. There is one prerequisite for this connector to work: info Change tracking must be enabled on the table. Without change tracking, Flowtide wont be able to find updates on the table. There are plans to allow the source to run in batch mode where it computes the delta inside of the connector, but that is not yet available. The SQL Server Source can be added to the 'ReadWriteFactory' with the following line: factory.AddSqlServerSource(&quot;your regexp on table names&quot;, () =&gt; connectionString);  The connection string must be set as a function, since the idea is that the connection string might change, from say a system such asHashicorp Vault. The source uses the following logic to fetch data into the stream:  The source will retry fetching data in-case of a SQL Server error, as long as it can reconnect to the database. It will mark the operator as unhealthy, but it will not trigger a stream restart. If the operator cannot reconnect to the SQL Server, it will trigger a full stream restart. ","version":"Next","tagName":"h2"},{"title":"Sink​","type":1,"pageTitle":"SQL Server Connector","url":"/flowtide/docs/Connectors/sqlserver#sink","content":"The SQL Server Sink implements the grouped write operator. This means that all rows are grouped by a primary key, thus all sink tables must have a primary key defined. info All SQL Server Sink tables must have a primary key defined. The primary key must also be in the query that fills the table. Its implementation waits fully until the stream has reached a steady state at a time T until it writes data to the database. This means that its table output can always be traced back to a state from the source systems. To use the SQL Server Sink add the following line to the ReadWriteFactory: factory.AddSqlServerSink(&quot;your regexp on table names&quot;, () =&gt; connectionString);  As with the SQL Server Source, the connection string is returned by a function to enable dynamic connection strings. The sink inserts data into SQL Server by creating a temporary table, which follows the table structure of the destination with an added operation metadata column. The data is inserted into the temporary table using Bulk Copy. This allows for fast binary insertion into the temporary table. After data has been inserted into the temporary table, a merge into statement is run that merges data into the destination table. After all data has been merged, the temporary table is cleared of all data. danger If there are multiple rows in the result with the same primary key, only the latest seen row will be inserted into the destination table. ","version":"Next","tagName":"h2"},{"title":"SQL Table Provider​","type":1,"pageTitle":"SQL Server Connector","url":"/flowtide/docs/Connectors/sqlserver#sql-table-provider","content":"The SQL table provider is added to the SQL plan builder which will try and look after used tables in its configured SQL Server. It provides metadata information about what the column names are in the table. To use the table provider add the following line to the Sql plan builder: sqlBuilder.AddSqlServerProvider(() =&gt; connectionString);  ","version":"Next","tagName":"h2"},{"title":"Generic Functions","type":0,"sectionRef":"#","url":"/flowtide/docs/Expressions/aggregatefunctions/generic","content":"","keywords":"","version":"Next"},{"title":"Count​","type":1,"pageTitle":"Generic Functions","url":"/flowtide/docs/Expressions/aggregatefunctions/generic#count","content":"Substrait definition Counts all rows in a query. This function takes no parameters, the implementation of count with a column name is not yet implemented. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Generic Functions","url":"/flowtide/docs/Expressions/aggregatefunctions/generic#sql-usage","content":"SELECT count(*) FROM ...  ","version":"Next","tagName":"h3"},{"title":"Arithmatic Functions","type":0,"sectionRef":"#","url":"/flowtide/docs/Expressions/ScalarFunctions/arithmatic","content":"","keywords":"","version":"Next"},{"title":"Add​","type":1,"pageTitle":"Arithmatic Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/arithmatic#add","content":"Substrait definition Add takes two parameters and does an addition of the two values. Add depends on the input types on what result it will give: Left type\tRight type\tOutputInteger\tInteger\tInteger Integer\tFloat\tFloat Float\tFloat\tFloat Non numeric\tInteger\tNull num numeric\tFloat\tNull Non numeric\tNon numeric\tNull Only numeric inputs will return a result, otherwise it will return null. ","version":"Next","tagName":"h2"},{"title":"SQL usage​","type":1,"pageTitle":"Arithmatic Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/arithmatic#sql-usage","content":"In SQL the add function is called using the plus operator: SELECT column1 + 13 FROM ...  ","version":"Next","tagName":"h3"},{"title":"Subtract​","type":1,"pageTitle":"Arithmatic Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/arithmatic#subtract","content":"Substrait definition Subtract takes two parameters and does a subtraction of the two values. Subtract depends on the input types on what result it will give: Left type\tRight type\tOutputInteger\tInteger\tInteger Integer\tFloat\tFloat Float\tFloat\tFloat Non numeric\tInteger\tNull num numeric\tFloat\tNull Non numeric\tNon numeric\tNull Only numeric inputs will return a result, otherwise it will return null. ","version":"Next","tagName":"h2"},{"title":"SQL usage​","type":1,"pageTitle":"Arithmatic Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/arithmatic#sql-usage-1","content":"In SQL the subtract function is called using the minus operator: SELECT column1 - 13 FROM ...  ","version":"Next","tagName":"h3"},{"title":"Comparison Functions","type":0,"sectionRef":"#","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison","content":"","keywords":"","version":"Next"},{"title":"Equal​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#equal","content":"Substrait definition Compares equality of two values. If the two values have different types they are not considered equal, so a float with value 1 will not equal an integer with value 1. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#sql-usage","content":"... WHERE c1 = 'hello'  ","version":"Next","tagName":"h3"},{"title":"Not equal​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#not-equal","content":"Substrait definition Checks two values for non equality. Different types will immedietly return true, that the values are not equal. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#sql-usage-1","content":"... WHERE c1 != 'hello'  ","version":"Next","tagName":"h3"},{"title":"Greater than​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#greater-than","content":"Substrait definition Checks if the left value is greater than the right value. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#sql-usage-2","content":"... WHERE c1 &gt; 1  ","version":"Next","tagName":"h3"},{"title":"Greater than or equal​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#greater-than-or-equal","content":"Substrait definition Checks if the left value is greater than or equal to the right value. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#sql-usage-3","content":"... WHERE c1 &gt;= 1  ","version":"Next","tagName":"h3"},{"title":"Less than​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#less-than","content":"Substrait definition Checks if the left value is less than the right value. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#sql-usage-4","content":"... WHERE c1 &lt; 1  ","version":"Next","tagName":"h3"},{"title":"Less than or equal​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#less-than-or-equal","content":"Substrait definition Checks if the left value is less than or equal to the right value. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#sql-usage-5","content":"... WHERE c1 &lt;= 1  ","version":"Next","tagName":"h3"},{"title":"Is not null​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#is-not-null","content":"Substrait definition Checks if a single argument is not equal to null. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Comparison Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/comparison#sql-usage-6","content":"... WHERE c1 is not null  ","version":"Next","tagName":"h3"},{"title":"Boolean Functions","type":0,"sectionRef":"#","url":"/flowtide/docs/Expressions/ScalarFunctions/boolean","content":"","keywords":"","version":"Next"},{"title":"Or​","type":1,"pageTitle":"Boolean Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/boolean#or","content":"Substrait definition Or implements the boolean logic Or operator. Its return value will always be a boolean. An argument into the Or function that is not a boolean will be the same as the boolean value false. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Boolean Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/boolean#sql-usage","content":"... WHERE c1 = 'hello' OR c2 = 'world'  ","version":"Next","tagName":"h3"},{"title":"And​","type":1,"pageTitle":"Boolean Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/boolean#and","content":"Substrait definition And implements the boolean logic And operator. Its return value will always be a boolean. An argument into the And function that is not a boolean will be the same as the boolean value false. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Boolean Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/boolean#sql-usage-1","content":"... WHERE c1 = 'hello' AND c2 = 'world'  ","version":"Next","tagName":"h3"},{"title":"String Functions","type":0,"sectionRef":"#","url":"/flowtide/docs/Expressions/ScalarFunctions/string","content":"","keywords":"","version":"Next"},{"title":"Concat​","type":1,"pageTitle":"String Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/string#concat","content":"Substrait definition Concatinates two or more string values together. This function tries and convert non string values into the string type, example: Input\tType\tOutput'hello'\tString\t'hello' 13\tInt\t'13' 13.4\tFloat\t'13.4' true\tBool\t'true' If any argument is null, the return value will always be null. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"String Functions","url":"/flowtide/docs/Expressions/ScalarFunctions/string#sql-usage","content":"SELECT c1 || ' hello ' || c2 FROM ...  ","version":"Next","tagName":"h3"},{"title":"Specialized Expressions","type":0,"sectionRef":"#","url":"/flowtide/docs/Expressions/specializedexpressions","content":"","keywords":"","version":"Next"},{"title":"If Expression​","type":1,"pageTitle":"Specialized Expressions","url":"/flowtide/docs/Expressions/specializedexpressions#if-expression","content":"Substrait definition An if statement, or in SQL language a case statement. ","version":"Next","tagName":"h2"},{"title":"SQL Usage​","type":1,"pageTitle":"Specialized Expressions","url":"/flowtide/docs/Expressions/specializedexpressions#sql-usage","content":"SELECT CASE WHEN c1 = 'hello' THEN 1 WHEN c1 = 'world' THEN 2 ELSE 3 END FROM ...  ","version":"Next","tagName":"h3"},{"title":"Azure Monitor","type":0,"sectionRef":"#","url":"/flowtide/docs/Monitoring/azuremonitor","content":"","keywords":"","version":"Next"},{"title":"Metrics export​","type":1,"pageTitle":"Azure Monitor","url":"/flowtide/docs/Monitoring/azuremonitor#metrics-export","content":"To export metrics information, you need to install the following nuget packages: OpenTelemetry.Extensions.HostingAzure.Monitor.OpenTelemetry.Exporter Next in your Program.cs add the following code: builder.Services.AddOpenTelemetry() .WithMetrics(builder =&gt; { builder.AddAzureMonitorMetricExporter(o =&gt; { o.ConnectionString = &quot;{your connection string}&quot;; }); builder.AddView((instrument) =&gt; { return new MetricStreamConfiguration() { Name = $&quot;{instrument.Meter.Name}.{instrument.Name}&quot; }; }); builder.AddMeter(&quot;flowtide.*&quot;); });  Replace {your connection string} with your application insights connection string. This will then start uploading custom metrics to your Application Insights in Azure Monitor. ","version":"Next","tagName":"h2"},{"title":"Health check export​","type":1,"pageTitle":"Azure Monitor","url":"/flowtide/docs/Monitoring/azuremonitor#health-check-export","content":"If you want to publish/export health check information, install the following nuget package: AspNetCore.HealthChecks.Publisher.ApplicationInsights Add the following to your Program.cs: builder.Services.AddHealthChecks() .AddFlowtideCheck() .AddApplicationInsightsPublisher(&quot;{your connection string}&quot;);  Replace {your connection string} with your application insights connection string. You should now see custom events being published to Application Insights with health check information. ","version":"Next","tagName":"h2"},{"title":"Sample​","type":1,"pageTitle":"Azure Monitor","url":"/flowtide/docs/Monitoring/azuremonitor#sample","content":"A sample application exist for both setups in github. ","version":"Next","tagName":"h2"},{"title":"Health checks","type":0,"sectionRef":"#","url":"/flowtide/docs/Monitoring/healthchecks","content":"","keywords":"","version":"Next"},{"title":"Statuses​","type":1,"pageTitle":"Health checks","url":"/flowtide/docs/Monitoring/healthchecks#statuses","content":"This section describes how the different stream statuses maps to the health check status: Stream Status\tHealth check status\tDescriptionFailing\tUnhealthy\tStream has crashed Running\tRunning\tOperational Starting\tDegraded\tStarting is only reported when going from stopped -&gt; running Stopped\tUnhealthy\tIf a stream should be stopped, remove it from health check Degraded\tDegraded\tReported if a operator is degraded, such as slow performance ","version":"Next","tagName":"h2"},{"title":"Getting started","type":0,"sectionRef":"#","url":"/flowtide/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Creating a plan​","type":1,"pageTitle":"Getting started","url":"/flowtide/docs/intro#creating-a-plan","content":"The first step is to create an execution plan, this can be be done with any substrait plan creator. But it is also possible to do it with SQL inside flowtide. This tutorial will only show how to create a plan with SQL. Add the following to your Program.cs:  var sqlBuilder = new SqlPlanBuilder(); sqlBuilder.Sql(@&quot; CREATE TABLE testtable ( val any ); CREATE TABLE other ( val any ); INSERT INTO output SELECT t.val FROM testtable t LEFT JOIN other o ON t.val = o.val WHERE t.val = 123; &quot;); var plan = sqlBuilder.GetPlan();  ","version":"Next","tagName":"h2"},{"title":"Setting up a read and write factory​","type":1,"pageTitle":"Getting started","url":"/flowtide/docs/intro#setting-up-a-read-and-write-factory","content":"Each stream requires a factory that provides it with source and sink operators. These provide the actual implementation when talking with other sources. Some examples of sinks and sources are: MS SQLKafkaPostgres This example will add a connection for SQL Server: var factory = new ReadWriteFactory(); // Wildcard that all sources should use the following configuration factory.AddSqlServerSource(&quot;*&quot;, () =&gt; &quot;Server={your server};Database={your database};Trusted_Connection=True;&quot;); // Wildcard that all sinks will use this configuration factory.AddSqlServerSink(&quot;*&quot;, () =&gt; &quot;Server={your server};Database={your database};Trusted_Connection=True;&quot;);  ","version":"Next","tagName":"h2"},{"title":"Running the stream​","type":1,"pageTitle":"Getting started","url":"/flowtide/docs/intro#running-the-stream","content":"Finally to run the stream we add the following code: builder.Services.AddFlowtideStream(b =&gt; { b.AddPlan(plan) .AddReadWriteFactory(factory) .WithStateOptions(new StateManagerOptions() { // This is non persistent storage, use FasterKV persistence storage instead if you want persistent storage PersistentStorage = new FileCachePersistentStorage(new FlowtideDotNet.Storage.FileCacheOptions() { }) }); });  ","version":"Next","tagName":"h2"},{"title":"Persistent storage​","type":1,"pageTitle":"Getting started","url":"/flowtide/docs/intro#persistent-storage","content":"The previous example does not use persistent storage, to use persistent storage, you can instead use the FasterKV storage: PersistentStorage = new FasterKvPersistentStorage(new FasterKVSettings&lt;long, SpanByte&gt;() { RemoveOutdatedCheckpoints = true, MemorySize = 1024 * 1024 * 128, PageSize = 1024 * 1024 * 16, LogDevice = Devices.CreateLogDevice(&quot;./data/persistent/log&quot;), CheckpointDir = &quot;./data/checkpoints&quot; })  The stream will then be persistent between checkpoints. ","version":"Next","tagName":"h3"},{"title":"Adding the UI​","type":1,"pageTitle":"Getting started","url":"/flowtide/docs/intro#adding-the-ui","content":"If you want to add the UI to visualize the progress of the stream, add the following code after &quot;var app = builder.Build();&quot;. app.UseFlowtideUI(&quot;/stream&quot;);  ","version":"Next","tagName":"h2"},{"title":"Full example​","type":1,"pageTitle":"Getting started","url":"/flowtide/docs/intro#full-example","content":"Here is the full code example to get started:  var builder = WebApplication.CreateBuilder(args); var sqlBuilder = new SqlPlanBuilder(); sqlBuilder.Sql(@&quot; CREATE TABLE testtable ( val any ); CREATE TABLE other ( val any ); INSERT INTO output SELECT t.val FROM testtable t LEFT JOIN other o ON t.val = o.val WHERE t.val = 123; &quot;); var plan = sqlBuilder.GetPlan(); var factory = new ReadWriteFactory(); // Wildcard that all sources should use the following configuration factory.AddSqlServerSource(&quot;*&quot;, () =&gt; &quot;Server={your server};Database={your database};Trusted_Connection=True;&quot;); // Wildcard that all sinks will use this configuration factory.AddSqlServerSink(&quot;*&quot;, () =&gt; &quot;Server={your server};Database={your database};Trusted_Connection=True;&quot;); builder.Services.AddFlowtideStream(b =&gt; { b.AddPlan(plan) .AddReadWriteFactory(factory) .WithStateOptions(new StateManagerOptions() { // This is non persistent storage, use FasterKV persistence storage instead if you want persistent storage PersistentStorage = new FileCachePersistentStorage(new FlowtideDotNet.Storage.FileCacheOptions() { }) }); }); var app = builder.Build(); app.UseFlowtideUI(&quot;/stream&quot;); app.Run();  ","version":"Next","tagName":"h2"},{"title":"Aggregate Operator","type":0,"sectionRef":"#","url":"/flowtide/docs/Operators/aggregate","content":"","keywords":"","version":"Next"},{"title":"Metrics​","type":1,"pageTitle":"Aggregate Operator","url":"/flowtide/docs/Operators/aggregate#metrics","content":"The Aggregate Operator has the following metrics: Metric Name\tType\tDescriptionbusy\tGauge\tValue 0-1 on how busy the operator is. backpressure\tGauge\tValue 0-1 on how much backpressure the operator has. health\tGauge\tValue 0 or 1, if the operator is healthy or not. info At this point, an aggregate operator will never be unhealthy. If there is a failure against the state, the stream will instead restart. ","version":"Next","tagName":"h2"},{"title":"Filter Operator","type":0,"sectionRef":"#","url":"/flowtide/docs/Operators/filter","content":"","keywords":"","version":"Next"},{"title":"Metrics​","type":1,"pageTitle":"Filter Operator","url":"/flowtide/docs/Operators/filter#metrics","content":"The Projection Operator has the following metrics: Metric Name\tType\tDescriptionbusy\tGauge\tValue 0-1 on how busy the operator is. backpressure\tGauge\tValue 0-1 on how much backpressure the operator has. health\tGauge\tValue 0 or 1, if the operator is healthy or not. info At this point, a filter operator will never be unhealthy. ","version":"Next","tagName":"h2"},{"title":"Join Operators","type":0,"sectionRef":"#","url":"/flowtide/docs/Operators/join","content":"","keywords":"","version":"Next"},{"title":"Merge-Join Operator​","type":1,"pageTitle":"Join Operators","url":"/flowtide/docs/Operators/join#merge-join-operator","content":"The merge-join operator is a stateful operator that is implemented by two different B+ trees, one for each input source. The trees are sorted based on the keys used in the equality condition. ","version":"Next","tagName":"h2"},{"title":"Metrics​","type":1,"pageTitle":"Join Operators","url":"/flowtide/docs/Operators/join#metrics","content":"Metric Name\tType\tDescriptionbusy\tGauge\tValue 0-1 on how busy the operator is. backpressure\tGauge\tValue 0-1 on how much backpressure the operator has. health\tGauge\tValue 0 or 1, if the operator is healthy or not. events\tCounter\tHow many events that pass through the operator. info At this point, a merge-join operator will never be unhealthy. ","version":"Next","tagName":"h3"},{"title":"Block-Nested Join Operator​","type":1,"pageTitle":"Join Operators","url":"/flowtide/docs/Operators/join#block-nested-join-operator","content":"The block-nested join operator is a stateful operator that is implemented using 2 persistent B+ trees, and two temporary B+ trees. The temporary trees fill up with data until a watermark is recieved in which they it performs the join operations. It does this to reduce the amount of I/O that has to be made when reading through the entire persisted dataset. ","version":"Next","tagName":"h2"},{"title":"Metrics​","type":1,"pageTitle":"Join Operators","url":"/flowtide/docs/Operators/join#metrics-1","content":"Metric Name\tType\tDescriptionbusy\tGauge\tValue 0-1 on how busy the operator is. backpressure\tGauge\tValue 0-1 on how much backpressure the operator has. health\tGauge\tValue 0 or 1, if the operator is healthy or not. info At this point, a block-nested join operator will never be unhealthy. If there is a failure against the state, the stream will instead restart. ","version":"Next","tagName":"h3"},{"title":"Prometheus","type":0,"sectionRef":"#","url":"/flowtide/docs/Monitoring/prometheus","content":"","keywords":"","version":"Next"},{"title":"Sample​","type":1,"pageTitle":"Prometheus","url":"/flowtide/docs/Monitoring/prometheus#sample","content":"You can find a sample in github to see how it can be setup. ","version":"Next","tagName":"h2"},{"title":"Normalization Operator","type":0,"sectionRef":"#","url":"/flowtide/docs/Operators/normalization","content":"","keywords":"","version":"Next"},{"title":"Metrics​","type":1,"pageTitle":"Normalization Operator","url":"/flowtide/docs/Operators/normalization#metrics","content":"The Normalization Operator has the following metrics: Metric Name\tType\tDescriptionbusy\tGauge\tValue 0-1 on how busy the operator is. backpressure\tGauge\tValue 0-1 on how much backpressure the operator has. health\tGauge\tValue 0 or 1, if the operator is healthy or not. events\tCounter\tHow many events that pass through the operator. info At this point, a normalization operator will never be unhealthy. If there is a failure against the state, the stream will instead restart. ","version":"Next","tagName":"h2"},{"title":"Set Operator","type":0,"sectionRef":"#","url":"/flowtide/docs/Operators/set","content":"","keywords":"","version":"Next"},{"title":"Metrics​","type":1,"pageTitle":"Set Operator","url":"/flowtide/docs/Operators/set#metrics","content":"The Set Operator has the following metrics: Metric Name\tType\tDescriptionbusy\tGauge\tValue 0-1 on how busy the operator is. backpressure\tGauge\tValue 0-1 on how much backpressure the operator has. health\tGauge\tValue 0 or 1, if the operator is healthy or not. events\tCounter\tHow many events that pass through the operator. info At this point, a set operator will never be unhealthy. If there is a failure against the state, the stream will instead restart. ","version":"Next","tagName":"h2"},{"title":"Projection Operator","type":0,"sectionRef":"#","url":"/flowtide/docs/Operators/projection","content":"","keywords":"","version":"Next"},{"title":"Metrics​","type":1,"pageTitle":"Projection Operator","url":"/flowtide/docs/Operators/projection#metrics","content":"The Projection Operator has the following metrics: Metric Name\tType\tDescriptionbusy\tGauge\tValue 0-1 on how busy the operator is. backpressure\tGauge\tValue 0-1 on how much backpressure the operator has. health\tGauge\tValue 0 or 1, if the operator is healthy or not. events\tCounter\tHow many events that pass through the operator. info At this point, a projection operator will never be unhealthy. ","version":"Next","tagName":"h2"},{"title":"State Persistence","type":0,"sectionRef":"#","url":"/flowtide/docs/statepersistence","content":"","keywords":"","version":"Next"},{"title":"FasterKV storage​","type":1,"pageTitle":"State Persistence","url":"/flowtide/docs/statepersistence#fasterkv-storage","content":"FasterKV is persistent key value store built by Microsoft. It is the only storage solution available for Flowtide that will persist data between runs. FasterKV is highly configurable, and how you configure it will affect the performance of your stream. To configure your stream to use FasterKV storage, add the following to the builder: builder .WithStateOptions(new StateManagerOptions() { PersistentStorage = new FasterKvPersistentStorage(new FasterKVSettings&lt;long, SpanByte&gt;() { // Set the fasterKV configuration here ... }) });  ","version":"Next","tagName":"h2"},{"title":"Useful configuration options​","type":1,"pageTitle":"State Persistence","url":"/flowtide/docs/statepersistence#useful-configuration-options","content":"Property\tDescriptionLogDevice\tThe log device that will write to storage MemorySize\tHow much memory FasterKV can use PageSize\thow large a page is CheckpointDir\tWhere checkpoints should be stored CheckpointManager\tCheckpoint manager, useful if using Azure Storage. ","version":"Next","tagName":"h3"},{"title":"Storing to disk​","type":1,"pageTitle":"State Persistence","url":"/flowtide/docs/statepersistence#storing-to-disk","content":"This is an example of a configuration to store to a disk. var baseDirectory = &quot;/persistence/&quot; builder.WithStateOptions(new StateManagerOptions() { // Set cache page count to reduce the memory usage CachePageCount = 10000, PersistentStorage = new FasterKvPersistentStorage(new FasterKVSettings&lt;long, SpanByte&gt;() { // Checkpoint directory CheckpointDir = $&quot;{baseDirectory}/checkpoints&quot;, // A local file log device LogDevice = Devices.CreateLogDevice($&quot;{baseDirectory}/log&quot;), // Redice memory usage of fasterKV, to limit memory usage MemorySize = 1024L * 1024L * 64, // Page size PageSize = 1024 * 1024 * 16, }), TemporaryStorageOptions = new FileCacheOptions() { // Path where the temporary cache is stored DirectoryPath = $&quot;./temp&quot; } })  ","version":"Next","tagName":"h3"},{"title":"Storing to Azure Storage​","type":1,"pageTitle":"State Persistence","url":"/flowtide/docs/statepersistence#storing-to-azure-storage","content":"Storing the data in an Azure Storage requires a bit more configuration, especially a checkpoint manager. // Create azure storage device var log = new AzureStorageDevice(STORAGE_STRING, BASE_CONTAINER, &quot;&quot;, &quot;hlog.log&quot;); // Create azure storage backed checkpoint manager var checkpointManager = new DeviceLogCommitCheckpointManager( new AzureStorageNamedDeviceFactory(STORAGE_STRING), new DefaultCheckpointNamingScheme($&quot;{BASE_CONTAINER}/checkpoints/&quot;)); builder.WithStateOptions(new StateManagerOptions() { // Set cache page count to reduce the memory usage CachePageCount = 10000, PersistentStorage = new FasterKvPersistentStorage(new FasterKVSettings&lt;long, SpanByte&gt;() { CheckpointManager = checkpointManager, LogDevice = log, // Redice memory usage of fasterKV, to limit memory usage MemorySize = 1024L * 1024L * 64, // Page size PageSize = 1024 * 1024 * 16, }), TemporaryStorageOptions = new FileCacheOptions() { // Path where the temporary cache is stored DirectoryPath = $&quot;./temp&quot; } })  ","version":"Next","tagName":"h3"},{"title":"Temporary file cache storage​","type":1,"pageTitle":"State Persistence","url":"/flowtide/docs/statepersistence#temporary-file-cache-storage","content":"This storage solution is useful when developing or running unit tests on a stream. All data will be cleared between each run, but it will be persisted to local disk to reduce RAM usage and allow you to run streams with alot of data. The implementation of this is using the same solution as the intermediate file cache solution where modified pages are stored between checkpoints. To configure your stream to use this storage solution, add the following to the stream builder: builder .WithStateOptions(new StateManagerOptions() { // This is non persistent storage, use FasterKV persistence storage instead if you want persistent storage PersistentStorage = new FileCachePersistentStorage(new FlowtideDotNet.Storage.FileCacheOptions() { DirectoryPath = &quot;./tmp&quot; }) });  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"State Persistence","url":"/flowtide/docs/statepersistence#configuration","content":"Property\tDefault value\tDescriptionDirectoryPath\t./data/tempFiles\tPath where the files will be stored ","version":"Next","tagName":"h3"},{"title":"Storage solution​","type":1,"pageTitle":"State Persistence","url":"/flowtide/docs/statepersistence#storage-solution","content":"The stream storage is built on a three tier architecture, there is the in memory cache, the local disk modified page cache, and the persistent data. A data page is fetched using the following logic:  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}