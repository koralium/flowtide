//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./SpicedbLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
public partial class SpicedbLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DEFINITION=1, RELATION=2, PERMISSION=3, CAVEAT=4, COLON=5, STAR=6, PLUS=7, 
		AND=8, POINTER=9, LEFT_CURLY=10, RIGHT_CURLY=11, EQUALS=12, PIPE=13, HASH=14, 
		LEFT_PAREN=15, RIGHT_PAREN=16, COMMA=17, QUESTION=18, OR_PIPES=19, DOUBLE_AND=20, 
		SMALLER_THAN=21, GREATER_THAN=22, SMALLER_THAN_OR_EQUAL=23, GREATER_THAN_OR_EQUAL=24, 
		NOT_EQUAL=25, EQUAL=26, IN=27, DASH=28, DIVIDE=29, MOD=30, EXCLAMATION=31, 
		DOT=32, LEFT_SQUARE=33, RIGHT_SQUARE=34, NULL=35, TRUE=36, FALSE=37, WITH=38, 
		IDENTIFIER=39, LineComment=40, BlockComment=41, SPACES=42, STRING_LITERAL=43, 
		NUMERIC_LITERAL=44;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DEFINITION", "RELATION", "PERMISSION", "CAVEAT", "COLON", "STAR", "PLUS", 
		"AND", "POINTER", "LEFT_CURLY", "RIGHT_CURLY", "EQUALS", "PIPE", "HASH", 
		"LEFT_PAREN", "RIGHT_PAREN", "COMMA", "QUESTION", "OR_PIPES", "DOUBLE_AND", 
		"SMALLER_THAN", "GREATER_THAN", "SMALLER_THAN_OR_EQUAL", "GREATER_THAN_OR_EQUAL", 
		"NOT_EQUAL", "EQUAL", "IN", "DASH", "DIVIDE", "MOD", "EXCLAMATION", "DOT", 
		"LEFT_SQUARE", "RIGHT_SQUARE", "NULL", "TRUE", "FALSE", "WITH", "IDENTIFIER", 
		"LineComment", "BlockComment", "SPACES", "STRING_LITERAL", "NUMERIC_LITERAL", 
		"DIGIT"
	};


	public SpicedbLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SpicedbLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'definition'", "'relation'", "'permission'", "'caveat'", "':'", 
		"'*'", "'+'", "'&'", "'->'", "'{'", "'}'", "'='", "'|'", "'#'", "'('", 
		"')'", "','", "'?'", "'||'", "'&&'", "'<'", "'>'", "'<='", "'>='", "'!='", 
		"'=='", "'in'", "'-'", "'/'", "'%'", "'!'", "'.'", "'['", "']'", "'null'", 
		"'true'", "'false'", "'with'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DEFINITION", "RELATION", "PERMISSION", "CAVEAT", "COLON", "STAR", 
		"PLUS", "AND", "POINTER", "LEFT_CURLY", "RIGHT_CURLY", "EQUALS", "PIPE", 
		"HASH", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "QUESTION", "OR_PIPES", 
		"DOUBLE_AND", "SMALLER_THAN", "GREATER_THAN", "SMALLER_THAN_OR_EQUAL", 
		"GREATER_THAN_OR_EQUAL", "NOT_EQUAL", "EQUAL", "IN", "DASH", "DIVIDE", 
		"MOD", "EXCLAMATION", "DOT", "LEFT_SQUARE", "RIGHT_SQUARE", "NULL", "TRUE", 
		"FALSE", "WITH", "IDENTIFIER", "LineComment", "BlockComment", "SPACES", 
		"STRING_LITERAL", "NUMERIC_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SpicedbLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SpicedbLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,44,303,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
		15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,
		21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,
		26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,
		32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,
		36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,5,38,221,8,38,
		10,38,12,38,224,9,38,1,39,1,39,1,39,1,39,5,39,230,8,39,10,39,12,39,233,
		9,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,241,8,40,10,40,12,40,244,9,40,
		1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,
		259,8,42,10,42,12,42,262,9,42,1,42,1,42,1,43,3,43,267,8,43,1,43,4,43,270,
		8,43,11,43,12,43,271,1,43,1,43,5,43,276,8,43,10,43,12,43,279,9,43,3,43,
		281,8,43,1,43,1,43,4,43,285,8,43,11,43,12,43,286,3,43,289,8,43,1,43,1,
		43,3,43,293,8,43,1,43,4,43,296,8,43,11,43,12,43,297,3,43,300,8,43,1,44,
		1,44,1,242,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
		36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,0,1,0,7,3,0,65,90,
		95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,11,13,
		13,32,32,1,0,39,39,2,0,43,43,45,45,1,0,48,57,315,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,91,1,0,0,0,3,102,1,0,
		0,0,5,111,1,0,0,0,7,122,1,0,0,0,9,129,1,0,0,0,11,131,1,0,0,0,13,133,1,
		0,0,0,15,135,1,0,0,0,17,137,1,0,0,0,19,140,1,0,0,0,21,142,1,0,0,0,23,144,
		1,0,0,0,25,146,1,0,0,0,27,148,1,0,0,0,29,150,1,0,0,0,31,152,1,0,0,0,33,
		154,1,0,0,0,35,156,1,0,0,0,37,158,1,0,0,0,39,161,1,0,0,0,41,164,1,0,0,
		0,43,166,1,0,0,0,45,168,1,0,0,0,47,171,1,0,0,0,49,174,1,0,0,0,51,177,1,
		0,0,0,53,180,1,0,0,0,55,183,1,0,0,0,57,185,1,0,0,0,59,187,1,0,0,0,61,189,
		1,0,0,0,63,191,1,0,0,0,65,193,1,0,0,0,67,195,1,0,0,0,69,197,1,0,0,0,71,
		202,1,0,0,0,73,207,1,0,0,0,75,213,1,0,0,0,77,218,1,0,0,0,79,225,1,0,0,
		0,81,236,1,0,0,0,83,250,1,0,0,0,85,254,1,0,0,0,87,266,1,0,0,0,89,301,1,
		0,0,0,91,92,5,100,0,0,92,93,5,101,0,0,93,94,5,102,0,0,94,95,5,105,0,0,
		95,96,5,110,0,0,96,97,5,105,0,0,97,98,5,116,0,0,98,99,5,105,0,0,99,100,
		5,111,0,0,100,101,5,110,0,0,101,2,1,0,0,0,102,103,5,114,0,0,103,104,5,
		101,0,0,104,105,5,108,0,0,105,106,5,97,0,0,106,107,5,116,0,0,107,108,5,
		105,0,0,108,109,5,111,0,0,109,110,5,110,0,0,110,4,1,0,0,0,111,112,5,112,
		0,0,112,113,5,101,0,0,113,114,5,114,0,0,114,115,5,109,0,0,115,116,5,105,
		0,0,116,117,5,115,0,0,117,118,5,115,0,0,118,119,5,105,0,0,119,120,5,111,
		0,0,120,121,5,110,0,0,121,6,1,0,0,0,122,123,5,99,0,0,123,124,5,97,0,0,
		124,125,5,118,0,0,125,126,5,101,0,0,126,127,5,97,0,0,127,128,5,116,0,0,
		128,8,1,0,0,0,129,130,5,58,0,0,130,10,1,0,0,0,131,132,5,42,0,0,132,12,
		1,0,0,0,133,134,5,43,0,0,134,14,1,0,0,0,135,136,5,38,0,0,136,16,1,0,0,
		0,137,138,5,45,0,0,138,139,5,62,0,0,139,18,1,0,0,0,140,141,5,123,0,0,141,
		20,1,0,0,0,142,143,5,125,0,0,143,22,1,0,0,0,144,145,5,61,0,0,145,24,1,
		0,0,0,146,147,5,124,0,0,147,26,1,0,0,0,148,149,5,35,0,0,149,28,1,0,0,0,
		150,151,5,40,0,0,151,30,1,0,0,0,152,153,5,41,0,0,153,32,1,0,0,0,154,155,
		5,44,0,0,155,34,1,0,0,0,156,157,5,63,0,0,157,36,1,0,0,0,158,159,5,124,
		0,0,159,160,5,124,0,0,160,38,1,0,0,0,161,162,5,38,0,0,162,163,5,38,0,0,
		163,40,1,0,0,0,164,165,5,60,0,0,165,42,1,0,0,0,166,167,5,62,0,0,167,44,
		1,0,0,0,168,169,5,60,0,0,169,170,5,61,0,0,170,46,1,0,0,0,171,172,5,62,
		0,0,172,173,5,61,0,0,173,48,1,0,0,0,174,175,5,33,0,0,175,176,5,61,0,0,
		176,50,1,0,0,0,177,178,5,61,0,0,178,179,5,61,0,0,179,52,1,0,0,0,180,181,
		5,105,0,0,181,182,5,110,0,0,182,54,1,0,0,0,183,184,5,45,0,0,184,56,1,0,
		0,0,185,186,5,47,0,0,186,58,1,0,0,0,187,188,5,37,0,0,188,60,1,0,0,0,189,
		190,5,33,0,0,190,62,1,0,0,0,191,192,5,46,0,0,192,64,1,0,0,0,193,194,5,
		91,0,0,194,66,1,0,0,0,195,196,5,93,0,0,196,68,1,0,0,0,197,198,5,110,0,
		0,198,199,5,117,0,0,199,200,5,108,0,0,200,201,5,108,0,0,201,70,1,0,0,0,
		202,203,5,116,0,0,203,204,5,114,0,0,204,205,5,117,0,0,205,206,5,101,0,
		0,206,72,1,0,0,0,207,208,5,102,0,0,208,209,5,97,0,0,209,210,5,108,0,0,
		210,211,5,115,0,0,211,212,5,101,0,0,212,74,1,0,0,0,213,214,5,119,0,0,214,
		215,5,105,0,0,215,216,5,116,0,0,216,217,5,104,0,0,217,76,1,0,0,0,218,222,
		7,0,0,0,219,221,7,1,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,
		0,222,223,1,0,0,0,223,78,1,0,0,0,224,222,1,0,0,0,225,226,5,47,0,0,226,
		227,5,47,0,0,227,231,1,0,0,0,228,230,8,2,0,0,229,228,1,0,0,0,230,233,1,
		0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,
		234,235,6,39,0,0,235,80,1,0,0,0,236,237,5,47,0,0,237,238,5,42,0,0,238,
		242,1,0,0,0,239,241,9,0,0,0,240,239,1,0,0,0,241,244,1,0,0,0,242,243,1,
		0,0,0,242,240,1,0,0,0,243,245,1,0,0,0,244,242,1,0,0,0,245,246,5,42,0,0,
		246,247,5,47,0,0,247,248,1,0,0,0,248,249,6,40,0,0,249,82,1,0,0,0,250,251,
		7,3,0,0,251,252,1,0,0,0,252,253,6,41,0,0,253,84,1,0,0,0,254,260,5,39,0,
		0,255,259,8,4,0,0,256,257,5,39,0,0,257,259,5,39,0,0,258,255,1,0,0,0,258,
		256,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,263,1,
		0,0,0,262,260,1,0,0,0,263,264,5,39,0,0,264,86,1,0,0,0,265,267,5,45,0,0,
		266,265,1,0,0,0,266,267,1,0,0,0,267,288,1,0,0,0,268,270,3,89,44,0,269,
		268,1,0,0,0,270,271,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,280,1,
		0,0,0,273,277,5,46,0,0,274,276,3,89,44,0,275,274,1,0,0,0,276,279,1,0,0,
		0,277,275,1,0,0,0,277,278,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,280,
		273,1,0,0,0,280,281,1,0,0,0,281,289,1,0,0,0,282,284,5,46,0,0,283,285,3,
		89,44,0,284,283,1,0,0,0,285,286,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,
		0,287,289,1,0,0,0,288,269,1,0,0,0,288,282,1,0,0,0,289,299,1,0,0,0,290,
		292,5,69,0,0,291,293,7,5,0,0,292,291,1,0,0,0,292,293,1,0,0,0,293,295,1,
		0,0,0,294,296,3,89,44,0,295,294,1,0,0,0,296,297,1,0,0,0,297,295,1,0,0,
		0,297,298,1,0,0,0,298,300,1,0,0,0,299,290,1,0,0,0,299,300,1,0,0,0,300,
		88,1,0,0,0,301,302,7,6,0,0,302,90,1,0,0,0,15,0,222,231,242,258,260,266,
		271,277,280,286,288,292,297,299,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
