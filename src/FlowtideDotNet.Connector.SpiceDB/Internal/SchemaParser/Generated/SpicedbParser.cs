//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./SpicedbParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SpicedbParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DEFINITION=1, RELATION=2, PERMISSION=3, CAVEAT=4, COLON=5, STAR=6, PLUS=7, 
		AND=8, POINTER=9, LEFT_CURLY=10, RIGHT_CURLY=11, EQUALS=12, PIPE=13, HASH=14, 
		LEFT_PAREN=15, RIGHT_PAREN=16, COMMA=17, QUESTION=18, OR_PIPES=19, DOUBLE_AND=20, 
		SMALLER_THAN=21, GREATER_THAN=22, SMALLER_THAN_OR_EQUAL=23, GREATER_THAN_OR_EQUAL=24, 
		NOT_EQUAL=25, EQUAL=26, IN=27, DASH=28, DIVIDE=29, MOD=30, EXCLAMATION=31, 
		DOT=32, LEFT_SQUARE=33, RIGHT_SQUARE=34, NULL=35, TRUE=36, FALSE=37, WITH=38, 
		IDENTIFIER=39, LineComment=40, BlockComment=41, SPACES=42, STRING_LITERAL=43, 
		NUMERIC_LITERAL=44;
	public const int
		RULE_parse = 0, RULE_def = 1, RULE_block = 2, RULE_caveat = 3, RULE_caveat_parameter = 4, 
		RULE_type_definition = 5, RULE_type_relation = 6, RULE_relation_type = 7, 
		RULE_userset = 8, RULE_literal_value = 9, RULE_cel_expr = 10, RULE_cel_conditional_or = 11, 
		RULE_cel_conditional_and = 12, RULE_cel_relation = 13, RULE_cel_relop = 14, 
		RULE_cel_addition = 15, RULE_cel_multiplication = 16, RULE_cel_unary = 17, 
		RULE_cel_member = 18, RULE_cel_primary = 19, RULE_cel_expr_list = 20, 
		RULE_cel_map_inits = 21, RULE_cel_fields_init = 22;
	public static readonly string[] ruleNames = {
		"parse", "def", "block", "caveat", "caveat_parameter", "type_definition", 
		"type_relation", "relation_type", "userset", "literal_value", "cel_expr", 
		"cel_conditional_or", "cel_conditional_and", "cel_relation", "cel_relop", 
		"cel_addition", "cel_multiplication", "cel_unary", "cel_member", "cel_primary", 
		"cel_expr_list", "cel_map_inits", "cel_fields_init"
	};

	private static readonly string[] _LiteralNames = {
		null, "'definition'", "'relation'", "'permission'", "'caveat'", "':'", 
		"'*'", "'+'", "'&'", "'->'", "'{'", "'}'", "'='", "'|'", "'#'", "'('", 
		"')'", "','", "'?'", "'||'", "'&&'", "'<'", "'>'", "'<='", "'>='", "'!='", 
		"'=='", "'in'", "'-'", "'/'", "'%'", "'!'", "'.'", "'['", "']'", "'null'", 
		"'true'", "'false'", "'with'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DEFINITION", "RELATION", "PERMISSION", "CAVEAT", "COLON", "STAR", 
		"PLUS", "AND", "POINTER", "LEFT_CURLY", "RIGHT_CURLY", "EQUALS", "PIPE", 
		"HASH", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "QUESTION", "OR_PIPES", 
		"DOUBLE_AND", "SMALLER_THAN", "GREATER_THAN", "SMALLER_THAN_OR_EQUAL", 
		"GREATER_THAN_OR_EQUAL", "NOT_EQUAL", "EQUAL", "IN", "DASH", "DIVIDE", 
		"MOD", "EXCLAMATION", "DOT", "LEFT_SQUARE", "RIGHT_SQUARE", "NULL", "TRUE", 
		"FALSE", "WITH", "IDENTIFIER", "LineComment", "BlockComment", "SPACES", 
		"STRING_LITERAL", "NUMERIC_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SpicedbParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SpicedbParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SpicedbParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SpicedbParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SpicedbParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFINITION || _la==CAVEAT) {
				{
				{
				State = 46;
				block();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITION() { return GetToken(SpicedbParser.DEFINITION, 0); }
		public DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefContext def() {
		DefContext _localctx = new DefContext(Context, State);
		EnterRule(_localctx, 2, RULE_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(DEFINITION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition() {
			return GetRuleContext<Type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaveatContext caveat() {
			return GetRuleContext<CaveatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFINITION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				type_definition();
				}
				break;
			case CAVEAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				caveat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaveatContext : ParserRuleContext {
		public IToken definition_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAVEAT() { return GetToken(SpicedbParser.CAVEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(SpicedbParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(SpicedbParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY() { return GetToken(SpicedbParser.LEFT_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY() { return GetToken(SpicedbParser.RIGHT_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SpicedbParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Caveat_parameterContext[] caveat_parameter() {
			return GetRuleContexts<Caveat_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Caveat_parameterContext caveat_parameter(int i) {
			return GetRuleContext<Caveat_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SpicedbParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SpicedbParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext[] cel_expr() {
			return GetRuleContexts<Cel_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext cel_expr(int i) {
			return GetRuleContext<Cel_exprContext>(i);
		}
		public CaveatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caveat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCaveat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCaveat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaveat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaveatContext caveat() {
		CaveatContext _localctx = new CaveatContext(Context, State);
		EnterRule(_localctx, 6, RULE_caveat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(CAVEAT);
			State = 61;
			_localctx.definition_name = Match(IDENTIFIER);
			State = 62;
			Match(LEFT_PAREN);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 63;
				caveat_parameter();
				}
			}

			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 66;
				Match(COMMA);
				State = 67;
				caveat_parameter();
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73;
			Match(RIGHT_PAREN);
			State = 74;
			Match(LEFT_CURLY);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27193853903872L) != 0)) {
				{
				{
				State = 75;
				cel_expr();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81;
			Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Caveat_parameterContext : ParserRuleContext {
		public IToken name;
		public IToken parameter_type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SpicedbParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SpicedbParser.IDENTIFIER, i);
		}
		public Caveat_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caveat_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCaveat_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCaveat_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaveat_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Caveat_parameterContext caveat_parameter() {
		Caveat_parameterContext _localctx = new Caveat_parameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_caveat_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_localctx.name = Match(IDENTIFIER);
			State = 84;
			_localctx.parameter_type = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		public IToken definition_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITION() { return GetToken(SpicedbParser.DEFINITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY() { return GetToken(SpicedbParser.LEFT_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY() { return GetToken(SpicedbParser.RIGHT_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SpicedbParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_relationContext[] type_relation() {
			return GetRuleContexts<Type_relationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_relationContext type_relation(int i) {
			return GetRuleContext<Type_relationContext>(i);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(DEFINITION);
			State = 87;
			_localctx.definition_name = Match(IDENTIFIER);
			State = 88;
			Match(LEFT_CURLY);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RELATION || _la==PERMISSION) {
				{
				{
				State = 89;
				type_relation();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			Match(RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_relationContext : ParserRuleContext {
		public IToken relation;
		public IToken relation_name;
		public IToken permission;
		public IToken permission_name;
		public UsersetContext permission_userset;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SpicedbParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_typeContext[] relation_type() {
			return GetRuleContexts<Relation_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_typeContext relation_type(int i) {
			return GetRuleContext<Relation_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATION() { return GetToken(SpicedbParser.RELATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SpicedbParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(SpicedbParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(SpicedbParser.PIPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SpicedbParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMISSION() { return GetToken(SpicedbParser.PERMISSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext userset() {
			return GetRuleContext<UsersetContext>(0);
		}
		public Type_relationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterType_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitType_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_relation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_relationContext type_relation() {
		Type_relationContext _localctx = new Type_relationContext(Context, State);
		EnterRule(_localctx, 12, RULE_type_relation);
		int _la;
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RELATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				_localctx.relation = Match(RELATION);
				State = 98;
				_localctx.relation_name = Match(IDENTIFIER);
				State = 99;
				Match(COLON);
				State = 100;
				relation_type();
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PIPE) {
					{
					{
					State = 101;
					Match(PIPE);
					State = 102;
					relation_type();
					}
					}
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case PERMISSION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				_localctx.permission = Match(PERMISSION);
				State = 109;
				_localctx.permission_name = Match(IDENTIFIER);
				State = 110;
				Match(EQUALS);
				State = 111;
				_localctx.permission_userset = userset(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_typeContext : ParserRuleContext {
		public IToken name;
		public IToken star;
		public IToken relation;
		public IToken caveat_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SpicedbParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SpicedbParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SpicedbParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SpicedbParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(SpicedbParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SpicedbParser.STAR, 0); }
		public Relation_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterRelation_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitRelation_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relation_typeContext relation_type() {
		Relation_typeContext _localctx = new Relation_typeContext(Context, State);
		EnterRule(_localctx, 14, RULE_relation_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_localctx.name = Match(IDENTIFIER);
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 115;
				Match(COLON);
				State = 116;
				_localctx.star = Match(STAR);
				}
				}
				break;
			case HASH:
				{
				{
				State = 117;
				Match(HASH);
				State = 118;
				_localctx.relation = Match(IDENTIFIER);
				}
				}
				break;
			case RELATION:
			case PERMISSION:
			case RIGHT_CURLY:
			case PIPE:
			case WITH:
				break;
			default:
				break;
			}
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 121;
				Match(WITH);
				State = 122;
				_localctx.caveat_name = Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetContext : ParserRuleContext {
		public IToken self_relation;
		public IToken tuple;
		public IToken object_relation;
		public IToken compute;
		public IToken union;
		public IToken intersect;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SpicedbParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SpicedbParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(SpicedbParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext[] userset() {
			return GetRuleContexts<UsersetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext userset(int i) {
			return GetRuleContext<UsersetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(SpicedbParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(SpicedbParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(SpicedbParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(SpicedbParser.AND, i);
		}
		public UsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterUserset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitUserset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetContext userset() {
		return userset(0);
	}

	private UsersetContext userset(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UsersetContext _localctx = new UsersetContext(Context, _parentState);
		UsersetContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_userset, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 126;
				_localctx.self_relation = Match(IDENTIFIER);
				State = 127;
				_localctx.tuple = Match(POINTER);
				State = 128;
				_localctx.object_relation = Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 129;
				_localctx.compute = Match(IDENTIFIER);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 152;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new UsersetContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_userset);
						State = 132;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 133;
						_localctx.union = Match(PLUS);
						State = 134;
						userset(0);
						State = 139;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 135;
								Match(PLUS);
								State = 136;
								userset(0);
								}
								} 
							}
							State = 141;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
						}
						}
						break;
					case 2:
						{
						_localctx = new UsersetContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_userset);
						State = 142;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 143;
						_localctx.intersect = Match(AND);
						State = 144;
						userset(0);
						State = 149;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 145;
								Match(AND);
								State = 146;
								userset(0);
								}
								} 
							}
							State = 151;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
						}
						}
						break;
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(SpicedbParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SpicedbParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SpicedbParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SpicedbParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SpicedbParser.FALSE, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 18, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 26628797235200L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cel_conditional_orContext[] cel_conditional_or() {
			return GetRuleContexts<Cel_conditional_orContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_conditional_orContext cel_conditional_or(int i) {
			return GetRuleContext<Cel_conditional_orContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(SpicedbParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SpicedbParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext cel_expr() {
			return GetRuleContext<Cel_exprContext>(0);
		}
		public Cel_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_exprContext cel_expr() {
		Cel_exprContext _localctx = new Cel_exprContext(Context, State);
		EnterRule(_localctx, 20, RULE_cel_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			cel_conditional_or();
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 160;
				Match(QUESTION);
				State = 161;
				cel_conditional_or();
				State = 162;
				Match(COLON);
				State = 163;
				cel_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_conditional_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cel_conditional_andContext[] cel_conditional_and() {
			return GetRuleContexts<Cel_conditional_andContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_conditional_andContext cel_conditional_and(int i) {
			return GetRuleContext<Cel_conditional_andContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR_PIPES() { return GetTokens(SpicedbParser.OR_PIPES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_PIPES(int i) {
			return GetToken(SpicedbParser.OR_PIPES, i);
		}
		public Cel_conditional_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_conditional_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_conditional_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_conditional_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_conditional_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_conditional_orContext cel_conditional_or() {
		Cel_conditional_orContext _localctx = new Cel_conditional_orContext(Context, State);
		EnterRule(_localctx, 22, RULE_cel_conditional_or);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			cel_conditional_and();
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR_PIPES) {
				{
				{
				State = 168;
				Match(OR_PIPES);
				State = 169;
				cel_conditional_and();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_conditional_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cel_relationContext[] cel_relation() {
			return GetRuleContexts<Cel_relationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_relationContext cel_relation(int i) {
			return GetRuleContext<Cel_relationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE_AND() { return GetTokens(SpicedbParser.DOUBLE_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_AND(int i) {
			return GetToken(SpicedbParser.DOUBLE_AND, i);
		}
		public Cel_conditional_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_conditional_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_conditional_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_conditional_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_conditional_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_conditional_andContext cel_conditional_and() {
		Cel_conditional_andContext _localctx = new Cel_conditional_andContext(Context, State);
		EnterRule(_localctx, 24, RULE_cel_conditional_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			cel_relation();
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOUBLE_AND) {
				{
				{
				State = 176;
				Match(DOUBLE_AND);
				State = 177;
				cel_relation();
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_relationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cel_additionContext cel_addition() {
			return GetRuleContext<Cel_additionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_relopContext[] cel_relop() {
			return GetRuleContexts<Cel_relopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_relopContext cel_relop(int i) {
			return GetRuleContext<Cel_relopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_relationContext[] cel_relation() {
			return GetRuleContexts<Cel_relationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_relationContext cel_relation(int i) {
			return GetRuleContext<Cel_relationContext>(i);
		}
		public Cel_relationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_relation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_relationContext cel_relation() {
		Cel_relationContext _localctx = new Cel_relationContext(Context, State);
		EnterRule(_localctx, 26, RULE_cel_relation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			cel_addition();
			State = 189;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 184;
					cel_relop();
					State = 185;
					cel_relation();
					}
					} 
				}
				State = 191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_relopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER_THAN() { return GetToken(SpicedbParser.SMALLER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER_THAN_OR_EQUAL() { return GetToken(SpicedbParser.SMALLER_THAN_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OR_EQUAL() { return GetToken(SpicedbParser.GREATER_THAN_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(SpicedbParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SpicedbParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(SpicedbParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SpicedbParser.IN, 0); }
		public Cel_relopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_relop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_relop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_relop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_relopContext cel_relop() {
		Cel_relopContext _localctx = new Cel_relopContext(Context, State);
		EnterRule(_localctx, 28, RULE_cel_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 266338304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_additionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cel_multiplicationContext[] cel_multiplication() {
			return GetRuleContexts<Cel_multiplicationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_multiplicationContext cel_multiplication(int i) {
			return GetRuleContext<Cel_multiplicationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(SpicedbParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(SpicedbParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DASH() { return GetTokens(SpicedbParser.DASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH(int i) {
			return GetToken(SpicedbParser.DASH, i);
		}
		public Cel_additionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_addition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_addition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_addition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_addition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_additionContext cel_addition() {
		Cel_additionContext _localctx = new Cel_additionContext(Context, State);
		EnterRule(_localctx, 30, RULE_cel_addition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			cel_multiplication();
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 195;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==DASH) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 196;
					cel_multiplication();
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_multiplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cel_unaryContext[] cel_unary() {
			return GetRuleContexts<Cel_unaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_unaryContext cel_unary(int i) {
			return GetRuleContext<Cel_unaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(SpicedbParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(SpicedbParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIVIDE() { return GetTokens(SpicedbParser.DIVIDE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE(int i) {
			return GetToken(SpicedbParser.DIVIDE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(SpicedbParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(SpicedbParser.MOD, i);
		}
		public Cel_multiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_multiplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_multiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_multiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_multiplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_multiplicationContext cel_multiplication() {
		Cel_multiplicationContext _localctx = new Cel_multiplicationContext(Context, State);
		EnterRule(_localctx, 32, RULE_cel_multiplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			cel_unary();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1610612800L) != 0)) {
				{
				{
				State = 203;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1610612800L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 204;
				cel_unary();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cel_memberContext cel_member() {
			return GetRuleContext<Cel_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLAMATION() { return GetTokens(SpicedbParser.EXCLAMATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION(int i) {
			return GetToken(SpicedbParser.EXCLAMATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DASH() { return GetTokens(SpicedbParser.DASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH(int i) {
			return GetToken(SpicedbParser.DASH, i);
		}
		public Cel_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_unaryContext cel_unary() {
		Cel_unaryContext _localctx = new Cel_unaryContext(Context, State);
		EnterRule(_localctx, 34, RULE_cel_unary);
		int _la;
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_CURLY:
			case LEFT_PAREN:
			case DOT:
			case LEFT_SQUARE:
			case NULL:
			case TRUE:
			case FALSE:
			case IDENTIFIER:
			case STRING_LITERAL:
			case NUMERIC_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				cel_member(0);
				}
				break;
			case EXCLAMATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				Match(EXCLAMATION);
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXCLAMATION) {
					{
					{
					State = 212;
					Match(EXCLAMATION);
					}
					}
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 218;
				cel_member(0);
				}
				break;
			case DASH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219;
				Match(DASH);
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DASH) {
					{
					{
					State = 220;
					Match(DASH);
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 226;
				cel_member(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cel_primaryContext cel_primary() {
			return GetRuleContext<Cel_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_memberContext cel_member() {
			return GetRuleContext<Cel_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SpicedbParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SpicedbParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(SpicedbParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(SpicedbParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cel_expr_listContext cel_expr_list() {
			return GetRuleContext<Cel_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE() { return GetToken(SpicedbParser.LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext cel_expr() {
			return GetRuleContext<Cel_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE() { return GetToken(SpicedbParser.RIGHT_SQUARE, 0); }
		public Cel_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_memberContext cel_member() {
		return cel_member(0);
	}

	private Cel_memberContext cel_member(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Cel_memberContext _localctx = new Cel_memberContext(Context, _parentState);
		Cel_memberContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_cel_member, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 230;
			cel_primary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 249;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 247;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new Cel_memberContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cel_member);
						State = 232;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 233;
						Match(DOT);
						State = 234;
						Match(IDENTIFIER);
						State = 240;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
						case 1:
							{
							State = 235;
							Match(LEFT_PAREN);
							State = 237;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27193853903872L) != 0)) {
								{
								State = 236;
								cel_expr_list();
								}
							}

							State = 239;
							Match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new Cel_memberContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cel_member);
						State = 242;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 243;
						Match(LEFT_SQUARE);
						State = 244;
						cel_expr();
						State = 245;
						Match(RIGHT_SQUARE);
						}
						break;
					}
					} 
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Cel_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SpicedbParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SpicedbParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SpicedbParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SpicedbParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(SpicedbParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(SpicedbParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cel_expr_listContext cel_expr_list() {
			return GetRuleContext<Cel_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext cel_expr() {
			return GetRuleContext<Cel_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE() { return GetToken(SpicedbParser.LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE() { return GetToken(SpicedbParser.RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SpicedbParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY() { return GetToken(SpicedbParser.LEFT_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cel_map_initsContext cel_map_inits() {
			return GetRuleContext<Cel_map_initsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY() { return GetToken(SpicedbParser.RIGHT_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cel_fields_initContext cel_fields_init() {
			return GetRuleContext<Cel_fields_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Cel_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_primaryContext cel_primary() {
		Cel_primaryContext _localctx = new Cel_primaryContext(Context, State);
		EnterRule(_localctx, 38, RULE_cel_primary);
		int _la;
		try {
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 252;
					Match(DOT);
					}
				}

				State = 255;
				Match(IDENTIFIER);
				State = 261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 256;
					Match(LEFT_PAREN);
					State = 258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27193853903872L) != 0)) {
						{
						State = 257;
						cel_expr_list();
						}
					}

					State = 260;
					Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263;
				Match(LEFT_PAREN);
				State = 264;
				cel_expr();
				State = 265;
				Match(RIGHT_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267;
				Match(LEFT_SQUARE);
				State = 268;
				cel_expr_list();
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 269;
					Match(COMMA);
					}
				}

				State = 272;
				Match(RIGHT_SQUARE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 274;
				Match(LEFT_CURLY);
				State = 275;
				cel_map_inits();
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 276;
					Match(COMMA);
					}
				}

				State = 279;
				Match(RIGHT_CURLY);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 281;
					Match(DOT);
					}
				}

				State = 284;
				Match(IDENTIFIER);
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 285;
					Match(DOT);
					State = 286;
					Match(IDENTIFIER);
					}
					}
					State = 291;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 292;
				Match(LEFT_CURLY);
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 293;
					cel_fields_init();
					}
				}

				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 296;
					Match(COMMA);
					}
				}

				State = 299;
				Match(RIGHT_CURLY);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 300;
				literal_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext[] cel_expr() {
			return GetRuleContexts<Cel_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext cel_expr(int i) {
			return GetRuleContext<Cel_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SpicedbParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SpicedbParser.COMMA, i);
		}
		public Cel_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_expr_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_expr_listContext cel_expr_list() {
		Cel_expr_listContext _localctx = new Cel_expr_listContext(Context, State);
		EnterRule(_localctx, 40, RULE_cel_expr_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			cel_expr();
			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 304;
					Match(COMMA);
					State = 305;
					cel_expr();
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_map_initsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext[] cel_expr() {
			return GetRuleContexts<Cel_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext cel_expr(int i) {
			return GetRuleContext<Cel_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(SpicedbParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(SpicedbParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SpicedbParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SpicedbParser.COMMA, i);
		}
		public Cel_map_initsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_map_inits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_map_inits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_map_inits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_map_inits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_map_initsContext cel_map_inits() {
		Cel_map_initsContext _localctx = new Cel_map_initsContext(Context, State);
		EnterRule(_localctx, 42, RULE_cel_map_inits);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			cel_expr();
			State = 312;
			Match(COLON);
			State = 313;
			cel_expr();
			State = 321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 314;
					Match(COMMA);
					State = 315;
					cel_expr();
					State = 316;
					Match(COLON);
					State = 317;
					cel_expr();
					}
					} 
				}
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cel_fields_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SpicedbParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SpicedbParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(SpicedbParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(SpicedbParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext[] cel_expr() {
			return GetRuleContexts<Cel_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cel_exprContext cel_expr(int i) {
			return GetRuleContext<Cel_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SpicedbParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SpicedbParser.COMMA, i);
		}
		public Cel_fields_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cel_fields_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.EnterCel_fields_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpicedbParserListener typedListener = listener as ISpicedbParserListener;
			if (typedListener != null) typedListener.ExitCel_fields_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpicedbParserVisitor<TResult> typedVisitor = visitor as ISpicedbParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCel_fields_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cel_fields_initContext cel_fields_init() {
		Cel_fields_initContext _localctx = new Cel_fields_initContext(Context, State);
		EnterRule(_localctx, 44, RULE_cel_fields_init);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(IDENTIFIER);
			State = 325;
			Match(COLON);
			State = 326;
			cel_expr();
			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 327;
					Match(COMMA);
					State = 328;
					Match(IDENTIFIER);
					State = 329;
					Match(COLON);
					State = 330;
					cel_expr();
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return userset_sempred((UsersetContext)_localctx, predIndex);
		case 18: return cel_member_sempred((Cel_memberContext)_localctx, predIndex);
		}
		return true;
	}
	private bool userset_sempred(UsersetContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool cel_member_sempred(Cel_memberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,44,337,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,1,0,1,1,1,1,1,2,1,2,3,2,
		59,8,2,1,3,1,3,1,3,1,3,3,3,65,8,3,1,3,1,3,5,3,69,8,3,10,3,12,3,72,9,3,
		1,3,1,3,1,3,5,3,77,8,3,10,3,12,3,80,9,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,
		5,1,5,5,5,91,8,5,10,5,12,5,94,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,
		104,8,6,10,6,12,6,107,9,6,1,6,1,6,1,6,1,6,3,6,113,8,6,1,7,1,7,1,7,1,7,
		1,7,3,7,120,8,7,1,7,1,7,3,7,124,8,7,1,8,1,8,1,8,1,8,1,8,3,8,131,8,8,1,
		8,1,8,1,8,1,8,1,8,5,8,138,8,8,10,8,12,8,141,9,8,1,8,1,8,1,8,1,8,1,8,5,
		8,148,8,8,10,8,12,8,151,9,8,5,8,153,8,8,10,8,12,8,156,9,8,1,9,1,9,1,10,
		1,10,1,10,1,10,1,10,1,10,3,10,166,8,10,1,11,1,11,1,11,5,11,171,8,11,10,
		11,12,11,174,9,11,1,12,1,12,1,12,5,12,179,8,12,10,12,12,12,182,9,12,1,
		13,1,13,1,13,1,13,5,13,188,8,13,10,13,12,13,191,9,13,1,14,1,14,1,15,1,
		15,1,15,5,15,198,8,15,10,15,12,15,201,9,15,1,16,1,16,1,16,5,16,206,8,16,
		10,16,12,16,209,9,16,1,17,1,17,1,17,5,17,214,8,17,10,17,12,17,217,9,17,
		1,17,1,17,1,17,5,17,222,8,17,10,17,12,17,225,9,17,1,17,3,17,228,8,17,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,238,8,18,1,18,3,18,241,8,18,
		1,18,1,18,1,18,1,18,1,18,5,18,248,8,18,10,18,12,18,251,9,18,1,19,3,19,
		254,8,19,1,19,1,19,1,19,3,19,259,8,19,1,19,3,19,262,8,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,3,19,271,8,19,1,19,1,19,1,19,1,19,1,19,3,19,278,8,
		19,1,19,1,19,1,19,3,19,283,8,19,1,19,1,19,1,19,5,19,288,8,19,10,19,12,
		19,291,9,19,1,19,1,19,3,19,295,8,19,1,19,3,19,298,8,19,1,19,1,19,3,19,
		302,8,19,1,20,1,20,1,20,5,20,307,8,20,10,20,12,20,310,9,20,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,5,21,320,8,21,10,21,12,21,323,9,21,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,5,22,332,8,22,10,22,12,22,335,9,22,1,22,0,
		2,16,36,23,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,0,4,2,0,35,37,43,44,1,0,21,27,2,0,7,7,28,28,2,0,6,6,29,30,360,0,49,
		1,0,0,0,2,54,1,0,0,0,4,58,1,0,0,0,6,60,1,0,0,0,8,83,1,0,0,0,10,86,1,0,
		0,0,12,112,1,0,0,0,14,114,1,0,0,0,16,130,1,0,0,0,18,157,1,0,0,0,20,159,
		1,0,0,0,22,167,1,0,0,0,24,175,1,0,0,0,26,183,1,0,0,0,28,192,1,0,0,0,30,
		194,1,0,0,0,32,202,1,0,0,0,34,227,1,0,0,0,36,229,1,0,0,0,38,301,1,0,0,
		0,40,303,1,0,0,0,42,311,1,0,0,0,44,324,1,0,0,0,46,48,3,4,2,0,47,46,1,0,
		0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,52,1,0,0,0,51,49,1,0,
		0,0,52,53,5,0,0,1,53,1,1,0,0,0,54,55,5,1,0,0,55,3,1,0,0,0,56,59,3,10,5,
		0,57,59,3,6,3,0,58,56,1,0,0,0,58,57,1,0,0,0,59,5,1,0,0,0,60,61,5,4,0,0,
		61,62,5,39,0,0,62,64,5,15,0,0,63,65,3,8,4,0,64,63,1,0,0,0,64,65,1,0,0,
		0,65,70,1,0,0,0,66,67,5,17,0,0,67,69,3,8,4,0,68,66,1,0,0,0,69,72,1,0,0,
		0,70,68,1,0,0,0,70,71,1,0,0,0,71,73,1,0,0,0,72,70,1,0,0,0,73,74,5,16,0,
		0,74,78,5,10,0,0,75,77,3,20,10,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,
		0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,11,0,0,82,7,1,0,
		0,0,83,84,5,39,0,0,84,85,5,39,0,0,85,9,1,0,0,0,86,87,5,1,0,0,87,88,5,39,
		0,0,88,92,5,10,0,0,89,91,3,12,6,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,
		0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,92,1,0,0,0,95,96,5,11,0,0,96,11,1,
		0,0,0,97,98,5,2,0,0,98,99,5,39,0,0,99,100,5,5,0,0,100,105,3,14,7,0,101,
		102,5,13,0,0,102,104,3,14,7,0,103,101,1,0,0,0,104,107,1,0,0,0,105,103,
		1,0,0,0,105,106,1,0,0,0,106,113,1,0,0,0,107,105,1,0,0,0,108,109,5,3,0,
		0,109,110,5,39,0,0,110,111,5,12,0,0,111,113,3,16,8,0,112,97,1,0,0,0,112,
		108,1,0,0,0,113,13,1,0,0,0,114,119,5,39,0,0,115,116,5,5,0,0,116,120,5,
		6,0,0,117,118,5,14,0,0,118,120,5,39,0,0,119,115,1,0,0,0,119,117,1,0,0,
		0,119,120,1,0,0,0,120,123,1,0,0,0,121,122,5,38,0,0,122,124,5,39,0,0,123,
		121,1,0,0,0,123,124,1,0,0,0,124,15,1,0,0,0,125,126,6,8,-1,0,126,127,5,
		39,0,0,127,128,5,9,0,0,128,131,5,39,0,0,129,131,5,39,0,0,130,125,1,0,0,
		0,130,129,1,0,0,0,131,154,1,0,0,0,132,133,10,4,0,0,133,134,5,7,0,0,134,
		139,3,16,8,0,135,136,5,7,0,0,136,138,3,16,8,0,137,135,1,0,0,0,138,141,
		1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,153,1,0,0,0,141,139,1,0,0,
		0,142,143,10,3,0,0,143,144,5,8,0,0,144,149,3,16,8,0,145,146,5,8,0,0,146,
		148,3,16,8,0,147,145,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,
		0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,152,132,1,0,0,0,152,142,1,0,0,0,
		153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,17,1,0,0,0,156,154,
		1,0,0,0,157,158,7,0,0,0,158,19,1,0,0,0,159,165,3,22,11,0,160,161,5,18,
		0,0,161,162,3,22,11,0,162,163,5,5,0,0,163,164,3,20,10,0,164,166,1,0,0,
		0,165,160,1,0,0,0,165,166,1,0,0,0,166,21,1,0,0,0,167,172,3,24,12,0,168,
		169,5,19,0,0,169,171,3,24,12,0,170,168,1,0,0,0,171,174,1,0,0,0,172,170,
		1,0,0,0,172,173,1,0,0,0,173,23,1,0,0,0,174,172,1,0,0,0,175,180,3,26,13,
		0,176,177,5,20,0,0,177,179,3,26,13,0,178,176,1,0,0,0,179,182,1,0,0,0,180,
		178,1,0,0,0,180,181,1,0,0,0,181,25,1,0,0,0,182,180,1,0,0,0,183,189,3,30,
		15,0,184,185,3,28,14,0,185,186,3,26,13,0,186,188,1,0,0,0,187,184,1,0,0,
		0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,27,1,0,0,0,191,189,
		1,0,0,0,192,193,7,1,0,0,193,29,1,0,0,0,194,199,3,32,16,0,195,196,7,2,0,
		0,196,198,3,32,16,0,197,195,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,
		200,1,0,0,0,200,31,1,0,0,0,201,199,1,0,0,0,202,207,3,34,17,0,203,204,7,
		3,0,0,204,206,3,34,17,0,205,203,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,
		0,207,208,1,0,0,0,208,33,1,0,0,0,209,207,1,0,0,0,210,228,3,36,18,0,211,
		215,5,31,0,0,212,214,5,31,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,213,
		1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,228,3,36,18,
		0,219,223,5,28,0,0,220,222,5,28,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,
		221,1,0,0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,228,3,
		36,18,0,227,210,1,0,0,0,227,211,1,0,0,0,227,219,1,0,0,0,228,35,1,0,0,0,
		229,230,6,18,-1,0,230,231,3,38,19,0,231,249,1,0,0,0,232,233,10,2,0,0,233,
		234,5,32,0,0,234,240,5,39,0,0,235,237,5,15,0,0,236,238,3,40,20,0,237,236,
		1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,241,5,16,0,0,240,235,1,0,0,
		0,240,241,1,0,0,0,241,248,1,0,0,0,242,243,10,1,0,0,243,244,5,33,0,0,244,
		245,3,20,10,0,245,246,5,34,0,0,246,248,1,0,0,0,247,232,1,0,0,0,247,242,
		1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,37,1,0,0,0,
		251,249,1,0,0,0,252,254,5,32,0,0,253,252,1,0,0,0,253,254,1,0,0,0,254,255,
		1,0,0,0,255,261,5,39,0,0,256,258,5,15,0,0,257,259,3,40,20,0,258,257,1,
		0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,262,5,16,0,0,261,256,1,0,0,0,
		261,262,1,0,0,0,262,302,1,0,0,0,263,264,5,15,0,0,264,265,3,20,10,0,265,
		266,5,16,0,0,266,302,1,0,0,0,267,268,5,33,0,0,268,270,3,40,20,0,269,271,
		5,17,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,5,34,
		0,0,273,302,1,0,0,0,274,275,5,10,0,0,275,277,3,42,21,0,276,278,5,17,0,
		0,277,276,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,280,5,11,0,0,280,
		302,1,0,0,0,281,283,5,32,0,0,282,281,1,0,0,0,282,283,1,0,0,0,283,284,1,
		0,0,0,284,289,5,39,0,0,285,286,5,32,0,0,286,288,5,39,0,0,287,285,1,0,0,
		0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,
		289,1,0,0,0,292,294,5,10,0,0,293,295,3,44,22,0,294,293,1,0,0,0,294,295,
		1,0,0,0,295,297,1,0,0,0,296,298,5,17,0,0,297,296,1,0,0,0,297,298,1,0,0,
		0,298,299,1,0,0,0,299,302,5,11,0,0,300,302,3,18,9,0,301,253,1,0,0,0,301,
		263,1,0,0,0,301,267,1,0,0,0,301,274,1,0,0,0,301,282,1,0,0,0,301,300,1,
		0,0,0,302,39,1,0,0,0,303,308,3,20,10,0,304,305,5,17,0,0,305,307,3,20,10,
		0,306,304,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,
		41,1,0,0,0,310,308,1,0,0,0,311,312,3,20,10,0,312,313,5,5,0,0,313,321,3,
		20,10,0,314,315,5,17,0,0,315,316,3,20,10,0,316,317,5,5,0,0,317,318,3,20,
		10,0,318,320,1,0,0,0,319,314,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,
		322,1,0,0,0,322,43,1,0,0,0,323,321,1,0,0,0,324,325,5,39,0,0,325,326,5,
		5,0,0,326,333,3,20,10,0,327,328,5,17,0,0,328,329,5,39,0,0,329,330,5,5,
		0,0,330,332,3,20,10,0,331,327,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,
		333,334,1,0,0,0,334,45,1,0,0,0,335,333,1,0,0,0,41,49,58,64,70,78,92,105,
		112,119,123,130,139,149,152,154,165,172,180,189,199,207,215,223,227,237,
		240,247,249,253,258,261,270,277,282,289,294,297,301,308,321,333
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
