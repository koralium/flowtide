### SUBSTRAIT_SCALAR_TEST: v1.0
### SUBSTRAIT_INCLUDE: '/extensions/functions_datetime.yaml'

# timestamps: examples using the timestamp and timestamptz types
extract('YEAR'::str, '2016-12-31T13:30:15'::ts) = 2016::i64
extract('ISO_YEAR'::str, '2024-12-29T13:30:15'::ts) = 2024::i64
extract('ISO_YEAR'::str, '2024-12-30T13:30:15'::ts) = 2025::i64
extract('ISO_YEAR'::str, '2024-12-28T13:30:15'::ts) = 2024::i64
extract('US_YEAR'::str, '2016-12-31T13:30:15'::ts) = 2016::i64
extract('US_YEAR'::str, '2017-01-01T00:00:00'::ts) = 2017::i64
extract('US_YEAR'::str, '2018-12-29T10:00:00'::ts) = 2018::i64
extract('US_YEAR'::str, '2018-12-30T00:00:00'::ts) = 2019::i64
extract('US_YEAR'::str, '2022-12-31T23:59:59'::ts) = 2022::i64
extract('US_YEAR'::str, '2023-01-01T00:00:00'::ts) = 2023::i64
extract('US_YEAR'::str, '2025-12-27T13:30:15'::ts) = 2025::i64
extract('US_YEAR'::str, '2025-12-28T00:00:00'::ts) = 2025::i64
extract('US_YEAR'::str, '2025-12-29T00:00:00'::ts) = 2025::i64
extract('US_YEAR'::str, '2026-01-03T00:00:00'::ts) = 2025::i64
extract('US_YEAR'::str, '2026-01-04T00:00:00'::ts) = 2026::i64
extract('QUARTER'::str, '2016-12-31T13:30:15'::ts) = 4::i64
extract('QUARTER'::str, '2016-01-01T13:30:15'::ts) = 1::i64
extract('MONTH'::str, '2016-12-31T13:30:15'::ts) = 12::i64
extract('DAY'::str, '2016-12-31T13:30:15'::ts) = 31::i64
extract('DAY_OF_YEAR'::str, '2016-12-25T13:30:15'::ts) = 360::i64
extract('MONDAY_DAY_OF_WEEK'::str, '2016-12-25T13:30:15'::ts) = 7::i64
extract('SUNDAY_DAY_OF_WEEK'::str, '2016-12-25T13:30:15'::ts) = 1::i64
extract('MONDAY_WEEK'::str, '2024-01-01T00:00:00'::ts) = 1::i64
extract('MONDAY_WEEK'::str, '2024-01-07T00:00:00'::ts) = 1::i64
extract('MONDAY_WEEK'::str, '2024-01-14T00:00:00'::ts) = 2::i64
extract('MONDAY_WEEK'::str, '2024-06-17T00:00:00'::ts) = 25::i64
extract('MONDAY_WEEK'::str, '2024-12-30T00:00:00'::ts) = 53::i64
extract('MONDAY_WEEK'::str, '2024-12-31T00:00:00'::ts) = 53::i64

extract('SUNDAY_WEEK'::str, '2024-01-07T00:00:00'::ts) = 1::i64
extract('SUNDAY_WEEK'::str, '2024-12-29T00:00:00'::ts) = 52::i64
extract('SUNDAY_WEEK'::str, '2024-06-16T00:00:00'::ts) = 24::i64
extract('SUNDAY_WEEK'::str, '2024-01-14T00:00:00'::ts) = 2::i64
extract('SUNDAY_WEEK'::str, '2024-12-14T00:00:00'::ts) = 49::i64
extract('SUNDAY_WEEK'::str, '2024-12-31T00:00:00'::ts) = 52::i64
extract('SUNDAY_WEEK'::str, '2024-05-12T00:00:00'::ts) = 19::i64
extract('SUNDAY_WEEK'::str, '2024-01-01T00:00:00'::ts) = 52::i64

extract('ISO_WEEK'::str, '2016-12-31T13:30:15'::ts) = 52::i64
extract('ISO_WEEK'::str, '2023-01-01T00:00:00'::ts) = 52::i64 
extract('ISO_WEEK'::str, '2023-01-02T00:00:00'::ts) = 1::i64 
extract('ISO_WEEK'::str, '2023-12-31T00:00:00'::ts) = 52::i64
extract('ISO_WEEK'::str, '2024-01-01T00:00:00'::ts) = 1::i64
extract('ISO_WEEK'::str, '2024-12-29T00:00:00'::ts) = 52::i64
extract('ISO_WEEK'::str, '2024-12-30T00:00:00'::ts) = 1::i64 
extract('ISO_WEEK'::str, '2025-01-01T00:00:00'::ts) = 1::i64
extract('ISO_WEEK'::str, '2025-12-28T00:00:00'::ts) = 52::i64
extract('ISO_WEEK'::str, '2025-12-29T00:00:00'::ts) = 1::i64

extract('US_WEEK'::str, '2017-01-01T00:00:00'::ts) = 1::i64
extract('US_WEEK'::str, '2017-01-07T00:00:00'::ts) = 1::i64
extract('US_WEEK'::str, '2017-01-08T00:00:00'::ts) = 2::i64
extract('US_WEEK'::str, '2017-12-30T00:00:00'::ts) = 52::i64
extract('US_WEEK'::str, '2017-12-31T00:00:00'::ts) = 1::i64

extract('HOUR'::str, '2016-12-31T13:30:15'::ts) = 13::i64
extract('MINUTE'::str, '2016-12-31T13:30:15'::ts) = 30::i64
extract('SECOND'::str, '2016-12-31T13:30:15'::ts) = 15::i64
extract('MILLISECOND'::str, '2016-12-31T13:30:15.220000'::ts) = 220::i64
extract('MICROSECOND'::str, '2016-12-31T13:30:15.220300'::ts) = 300::i64